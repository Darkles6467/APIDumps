#pragma once

#include "BaseDeclarations.h"
#include "FDynamicRHI.h"
#include "FRHIUniformBuffer.h"
#include "FOpenGLBaseVertexBuffer.h"
#include "FIntRect.h"
#include "FScreenResolutionRHI.h"
#include "FColor.h"
#include "FFloat16Color.h"
#include "FReadSurfaceDataFlags.h"
#include "FOpenGLBindlessSamplerInfo.h"

struct FOpenGLDynamicRHI : FDynamicRHI
{
	char __padding[0x15c38L];
	unsigned int& SceneFrameCounterField() { return *GetNativePointerField<unsigned int*>(this, "FOpenGLDynamicRHI.SceneFrameCounter"); }
	unsigned int& ResourceTableFrameCounterField() { return *GetNativePointerField<unsigned int*>(this, "FOpenGLDynamicRHI.ResourceTableFrameCounter"); }
	FOpenGLRHIState& PendingStateField() { return *GetNativePointerField<FOpenGLRHIState*>(this, "FOpenGLDynamicRHI.PendingState"); }
	TArray<FOpenGLViewport *>& ViewportsField() { return *GetNativePointerField<TArray<FOpenGLViewport *>*>(this, "FOpenGLDynamicRHI.Viewports"); }
	TRefCountPtr<FOpenGLViewport>& DrawingViewportField() { return *GetNativePointerField<TRefCountPtr<FOpenGLViewport>*>(this, "FOpenGLDynamicRHI.DrawingViewport"); }
	bool& bRevertToSharedContextAfterDrawingViewportField() { return *GetNativePointerField<bool*>(this, "FOpenGLDynamicRHI.bRevertToSharedContextAfterDrawingViewport"); }
	bool& bIsRenderingContextAcquiredField() { return *GetNativePointerField<bool*>(this, "FOpenGLDynamicRHI.bIsRenderingContextAcquired"); }
	TGlobalResource<TBoundShaderStateHistory<10000> >& BoundShaderStateHistoryField() { return *GetNativePointerField<TGlobalResource<TBoundShaderStateHistory<10000> >*>(this, "FOpenGLDynamicRHI.BoundShaderStateHistory"); }
	FOpenGLContextState& InvalidContextStateField() { return *GetNativePointerField<FOpenGLContextState*>(this, "FOpenGLDynamicRHI.InvalidContextState"); }
	FOpenGLContextState& SharedContextStateField() { return *GetNativePointerField<FOpenGLContextState*>(this, "FOpenGLDynamicRHI.SharedContextState"); }
	FOpenGLContextState& RenderingContextStateField() { return *GetNativePointerField<FOpenGLContextState*>(this, "FOpenGLDynamicRHI.RenderingContextState"); }
	FPlatformOpenGLDevice * PlatformDeviceField() { return GetNativePointerField<FPlatformOpenGLDevice *>(this, "FOpenGLDynamicRHI.PlatformDevice"); }
	TArray<FOpenGLRenderQuery *>& QueriesField() { return *GetNativePointerField<TArray<FOpenGLRenderQuery *>*>(this, "FOpenGLDynamicRHI.Queries"); }
	FWindowsCriticalSection& QueriesListCriticalSectionField() { return *GetNativePointerField<FWindowsCriticalSection*>(this, "FOpenGLDynamicRHI.QueriesListCriticalSection"); }
	TArray<FOpenGLRenderQuery *>& TimerQueriesField() { return *GetNativePointerField<TArray<FOpenGLRenderQuery *>*>(this, "FOpenGLDynamicRHI.TimerQueries"); }
	FWindowsCriticalSection& TimerQueriesListCriticalSectionField() { return *GetNativePointerField<FWindowsCriticalSection*>(this, "FOpenGLDynamicRHI.TimerQueriesListCriticalSection"); }
	FOpenGLGPUProfiler& GPUProfilingDataField() { return *GetNativePointerField<FOpenGLGPUProfiler*>(this, "FOpenGLDynamicRHI.GPUProfilingData"); }
	FWindowsCriticalSection& CustomPresentSectionField() { return *GetNativePointerField<FWindowsCriticalSection*>(this, "FOpenGLDynamicRHI.CustomPresentSection"); }
	TRefCountPtr<FRHICustomPresent>& CustomPresentField() { return *GetNativePointerField<TRefCountPtr<FRHICustomPresent>*>(this, "FOpenGLDynamicRHI.CustomPresent"); }

	// Functions

	unsigned __int64 RHICalcTexture2DPlatformSize(unsigned int SizeX, unsigned int SizeY, char Format, unsigned int NumMips, unsigned int NumSamples, unsigned int Flags, unsigned int * OutAlign) { return NativeCall<unsigned __int64, unsigned int, unsigned int, char, unsigned int, unsigned int, unsigned int, unsigned int *>(this, "FOpenGLDynamicRHI.RHICalcTexture2DPlatformSize", SizeX, SizeY, Format, NumMips, NumSamples, Flags, OutAlign); }
	unsigned __int64 RHICalcTextureCubePlatformSize(unsigned int Size, char Format, unsigned int NumMips, unsigned int Flags, unsigned int * OutAlign) { return NativeCall<unsigned __int64, unsigned int, char, unsigned int, unsigned int, unsigned int *>(this, "FOpenGLDynamicRHI.RHICalcTextureCubePlatformSize", Size, Format, NumMips, Flags, OutAlign); }
	void BindPendingComputeShaderState(FOpenGLContextState * ContextState, FRHIComputeShader * ComputeShaderRHI) { NativeCall<void, FOpenGLContextState *, FRHIComputeShader *>(this, "FOpenGLDynamicRHI.BindPendingComputeShaderState", ContextState, ComputeShaderRHI); }
	void BindPendingFramebuffer(FOpenGLContextState * ContextState) { NativeCall<void, FOpenGLContextState *>(this, "FOpenGLDynamicRHI.BindPendingFramebuffer", ContextState); }
	void BindPendingShaderState(FOpenGLContextState * ContextState) { NativeCall<void, FOpenGLContextState *>(this, "FOpenGLDynamicRHI.BindPendingShaderState", ContextState); }
	void BindUniformBufferBase(FOpenGLContextState * ContextState, int NumUniformBuffers, TRefCountPtr<FRHIUniformBuffer> * BoundUniformBuffers, unsigned int FirstUniformBuffer, bool ForceUpdate) { NativeCall<void, FOpenGLContextState *, int, TRefCountPtr<FRHIUniformBuffer> *, unsigned int, bool>(this, "FOpenGLDynamicRHI.BindUniformBufferBase", ContextState, NumUniformBuffers, BoundUniformBuffers, FirstUniformBuffer, ForceUpdate); }
	void CachedSetupTextureStage(FOpenGLContextState * ContextState, int TextureIndex, unsigned int Target, unsigned int Resource, int LimitMip, int NumMips) { NativeCall<void, FOpenGLContextState *, int, unsigned int, unsigned int, int, int>(this, "FOpenGLDynamicRHI.CachedSetupTextureStage", ContextState, TextureIndex, Target, Resource, LimitMip, NumMips); }
	void CachedSetupUAVStage(FOpenGLContextState * ContextState, int UAVIndex, unsigned int Format, unsigned int Resource) { NativeCall<void, FOpenGLContextState *, int, unsigned int, unsigned int>(this, "FOpenGLDynamicRHI.CachedSetupUAVStage", ContextState, UAVIndex, Format, Resource); }
	void Cleanup() { NativeCall<void>(this, "FOpenGLDynamicRHI.Cleanup"); }
	void ClearCurrentFramebufferWithCurrentScissor(FOpenGLContextState * ContextState, char ClearType, int NumClearColors, const FLinearColor * ClearColorArray, float Depth, unsigned int Stencil) { NativeCall<void, FOpenGLContextState *, char, int, const FLinearColor *, float, unsigned int>(this, "FOpenGLDynamicRHI.ClearCurrentFramebufferWithCurrentScissor", ContextState, ClearType, NumClearColors, ClearColorArray, Depth, Stencil); }
	void CommitGraphicsResourceTables() { NativeCall<void>(this, "FOpenGLDynamicRHI.CommitGraphicsResourceTables"); }
	void CommitNonComputeShaderConstants() { NativeCall<void>(this, "FOpenGLDynamicRHI.CommitNonComputeShaderConstants"); }
	void EnableVertexElementCached(FOpenGLContextState * ContextState, const FOpenGLVertexElement * VertexElement, int Stride, void * Pointer, unsigned int Buffer) { NativeCall<void, FOpenGLContextState *, const FOpenGLVertexElement *, int, void *, unsigned int>(this, "FOpenGLDynamicRHI.EnableVertexElementCached", ContextState, VertexElement, Stride, Pointer, Buffer); }
	void EnableVertexElementCachedZeroStride(FOpenGLContextState * ContextState, const FOpenGLVertexElement * VertexElement, unsigned int NumVertices, TOpenGLBuffer<FOpenGLBaseVertexBuffer,34962,&CachedBindArrayBuffer> * ZeroStrideVertexBuffer) { NativeCall<void, FOpenGLContextState *, const FOpenGLVertexElement *, unsigned int, TOpenGLBuffer<FOpenGLBaseVertexBuffer,34962,&CachedBindArrayBuffer> *>(this, "FOpenGLDynamicRHI.EnableVertexElementCachedZeroStride", ContextState, VertexElement, NumVertices, ZeroStrideVertexBuffer); }
	FOpenGLContextState * GetContextStateForCurrentContext(bool bAssertIfInvalid) { return NativeCall<FOpenGLContextState *, bool>(this, "FOpenGLDynamicRHI.GetContextStateForCurrentContext", bAssertIfInvalid); }
	const wchar_t * GetName() { return NativeCall<const wchar_t *>(this, "FOpenGLDynamicRHI.GetName"); }
	unsigned int GetOpenGLFramebuffer(unsigned int NumSimultaneousRenderTargets, FOpenGLTextureBase ** RenderTargets, unsigned int * ArrayIndices, unsigned int * MipmapLevels, FOpenGLTextureBase * DepthStencilTarget) { return NativeCall<unsigned int, unsigned int, FOpenGLTextureBase **, unsigned int *, unsigned int *, FOpenGLTextureBase *>(this, "FOpenGLDynamicRHI.GetOpenGLFramebuffer", NumSimultaneousRenderTargets, RenderTargets, ArrayIndices, MipmapLevels, DepthStencilTarget); }
	void Init() { NativeCall<void>(this, "FOpenGLDynamicRHI.Init"); }
	void InvalidateQueries() { NativeCall<void>(this, "FOpenGLDynamicRHI.InvalidateQueries"); }
	void InvalidateTextureResourceInCache(unsigned int Resource) { NativeCall<void, unsigned int>(this, "FOpenGLDynamicRHI.InvalidateTextureResourceInCache", Resource); }
	void IssueLongGPUTask() { NativeCall<void>(this, "FOpenGLDynamicRHI.IssueLongGPUTask"); }
	void PurgeFramebufferFromCaches(unsigned int Framebuffer) { NativeCall<void, unsigned int>(this, "FOpenGLDynamicRHI.PurgeFramebufferFromCaches", Framebuffer); }
	void RHIAcquireThreadOwnership() { NativeCall<void>(this, "FOpenGLDynamicRHI.RHIAcquireThreadOwnership"); }
	void RHIBeginDrawIndexedPrimitiveUP(unsigned int PrimitiveType, unsigned int NumPrimitives, unsigned int NumVertices, unsigned int VertexDataStride, void ** OutVertexData, unsigned int MinVertexIndex, unsigned int NumIndices, unsigned int IndexDataStride, void ** OutIndexData) { NativeCall<void, unsigned int, unsigned int, unsigned int, unsigned int, void **, unsigned int, unsigned int, unsigned int, void **>(this, "FOpenGLDynamicRHI.RHIBeginDrawIndexedPrimitiveUP", PrimitiveType, NumPrimitives, NumVertices, VertexDataStride, OutVertexData, MinVertexIndex, NumIndices, IndexDataStride, OutIndexData); }
	void RHIBeginDrawPrimitiveUP(unsigned int PrimitiveType, unsigned int NumPrimitives, unsigned int NumVertices, unsigned int VertexDataStride, void ** OutVertexData) { NativeCall<void, unsigned int, unsigned int, unsigned int, unsigned int, void **>(this, "FOpenGLDynamicRHI.RHIBeginDrawPrimitiveUP", PrimitiveType, NumPrimitives, NumVertices, VertexDataStride, OutVertexData); }
	void RHIBeginDrawingViewport(FRHIViewport * ViewportRHI, FRHITexture * RenderTarget) { NativeCall<void, FRHIViewport *, FRHITexture *>(this, "FOpenGLDynamicRHI.RHIBeginDrawingViewport", ViewportRHI, RenderTarget); }
	void RHIBeginFrame() { NativeCall<void>(this, "FOpenGLDynamicRHI.RHIBeginFrame"); }
	void RHIBeginRenderQuery(FRHIRenderQuery * QueryRHI) { NativeCall<void, FRHIRenderQuery *>(this, "FOpenGLDynamicRHI.RHIBeginRenderQuery", QueryRHI); }
	void RHIBeginScene() { NativeCall<void>(this, "FOpenGLDynamicRHI.RHIBeginScene"); }
	void RHIBindDebugLabelName(FRHITexture * TextureRHI, const wchar_t * Name) { NativeCall<void, FRHITexture *, const wchar_t *>(this, "FOpenGLDynamicRHI.RHIBindDebugLabelName", TextureRHI, Name); }
	void RHIClear(bool bClearColor, const FLinearColor * Color, bool bClearDepth, float Depth, bool bClearStencil, unsigned int Stencil, FIntRect ExcludeRect) { NativeCall<void, bool, const FLinearColor *, bool, float, bool, unsigned int, FIntRect>(this, "FOpenGLDynamicRHI.RHIClear", bClearColor, Color, bClearDepth, Depth, bClearStencil, Stencil, ExcludeRect); }
	void RHIClearMRT(bool bClearColor, int NumClearColors, const FLinearColor * ClearColorArray, bool bClearDepth, float Depth, bool bClearStencil, unsigned int Stencil, FIntRect ExcludeRect) { NativeCall<void, bool, int, const FLinearColor *, bool, float, bool, unsigned int, FIntRect>(this, "FOpenGLDynamicRHI.RHIClearMRT", bClearColor, NumClearColors, ClearColorArray, bClearDepth, Depth, bClearStencil, Stencil, ExcludeRect); }
	void RHIClearUAV(FRHIUnorderedAccessView * UnorderedAccessViewRHI, const unsigned int * Values) { NativeCall<void, FRHIUnorderedAccessView *, const unsigned int *>(this, "FOpenGLDynamicRHI.RHIClearUAV", UnorderedAccessViewRHI, Values); }
	unsigned int RHIComputeMemorySize(FRHITexture * TextureRHI) { return NativeCall<unsigned int, FRHITexture *>(this, "FOpenGLDynamicRHI.RHIComputeMemorySize", TextureRHI); }
	void RHICopyToResolveTarget(FRHITexture * SourceTextureRHI, FRHITexture * DestTextureRHI, bool bKeepOriginalSurface, const FResolveParams * ResolveParams) { NativeCall<void, FRHITexture *, FRHITexture *, bool, const FResolveParams *>(this, "FOpenGLDynamicRHI.RHICopyToResolveTarget", SourceTextureRHI, DestTextureRHI, bKeepOriginalSurface, ResolveParams); }
	void RHICopyVertexBuffer(FRHIVertexBuffer * SourceBufferRHI, FRHIVertexBuffer * DestBufferRHI) { NativeCall<void, FRHIVertexBuffer *, FRHIVertexBuffer *>(this, "FOpenGLDynamicRHI.RHICopyVertexBuffer", SourceBufferRHI, DestBufferRHI); }
	void RHIDispatchComputeShader(unsigned int ThreadGroupCountX, unsigned int ThreadGroupCountY, unsigned int ThreadGroupCountZ) { NativeCall<void, unsigned int, unsigned int, unsigned int>(this, "FOpenGLDynamicRHI.RHIDispatchComputeShader", ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ); }
	void RHIDispatchIndirectComputeShader(FRHIVertexBuffer * ArgumentBufferRHI, unsigned int ArgumentOffset) { NativeCall<void, FRHIVertexBuffer *, unsigned int>(this, "FOpenGLDynamicRHI.RHIDispatchIndirectComputeShader", ArgumentBufferRHI, ArgumentOffset); }
	void RHIDrawIndexedIndirect(FRHIIndexBuffer * IndexBufferRHI, unsigned int PrimitiveType, FRHIStructuredBuffer * ArgumentsBufferRHI, int DrawArgumentsIndex, unsigned int NumInstances) { NativeCall<void, FRHIIndexBuffer *, unsigned int, FRHIStructuredBuffer *, int, unsigned int>(this, "FOpenGLDynamicRHI.RHIDrawIndexedIndirect", IndexBufferRHI, PrimitiveType, ArgumentsBufferRHI, DrawArgumentsIndex, NumInstances); }
	void RHIDrawIndexedPrimitive(FRHIIndexBuffer * IndexBufferRHI, unsigned int PrimitiveType, int BaseVertexIndex, unsigned int MinIndex, unsigned int NumVertices, unsigned int StartIndex, unsigned int NumPrimitives, unsigned int NumInstances) { NativeCall<void, FRHIIndexBuffer *, unsigned int, int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int>(this, "FOpenGLDynamicRHI.RHIDrawIndexedPrimitive", IndexBufferRHI, PrimitiveType, BaseVertexIndex, MinIndex, NumVertices, StartIndex, NumPrimitives, NumInstances); }
	void RHIDrawIndexedPrimitiveIndirect(unsigned int PrimitiveType, FRHIIndexBuffer * IndexBufferRHI, FRHIVertexBuffer * ArgumentBufferRHI, unsigned int ArgumentOffset) { NativeCall<void, unsigned int, FRHIIndexBuffer *, FRHIVertexBuffer *, unsigned int>(this, "FOpenGLDynamicRHI.RHIDrawIndexedPrimitiveIndirect", PrimitiveType, IndexBufferRHI, ArgumentBufferRHI, ArgumentOffset); }
	void RHIDrawPrimitive(unsigned int PrimitiveType, unsigned int BaseVertexIndex, unsigned int NumPrimitives, unsigned int NumInstances) { NativeCall<void, unsigned int, unsigned int, unsigned int, unsigned int>(this, "FOpenGLDynamicRHI.RHIDrawPrimitive", PrimitiveType, BaseVertexIndex, NumPrimitives, NumInstances); }
	void RHIDrawPrimitiveIndirect(unsigned int PrimitiveType, FRHIVertexBuffer * ArgumentBufferRHI, unsigned int ArgumentOffset) { NativeCall<void, unsigned int, FRHIVertexBuffer *, unsigned int>(this, "FOpenGLDynamicRHI.RHIDrawPrimitiveIndirect", PrimitiveType, ArgumentBufferRHI, ArgumentOffset); }
	void RHIEnableDepthBoundsTest(bool bEnable, float MinDepth, float MaxDepth) { NativeCall<void, bool, float, float>(this, "FOpenGLDynamicRHI.RHIEnableDepthBoundsTest", bEnable, MinDepth, MaxDepth); }
	void RHIEndDrawIndexedPrimitiveUP() { NativeCall<void>(this, "FOpenGLDynamicRHI.RHIEndDrawIndexedPrimitiveUP"); }
	void RHIEndDrawPrimitiveUP() { NativeCall<void>(this, "FOpenGLDynamicRHI.RHIEndDrawPrimitiveUP"); }
	void RHIEndDrawingViewport(FRHIViewport * ViewportRHI, bool bPresent, bool bLockToVsync) { NativeCall<void, FRHIViewport *, bool, bool>(this, "FOpenGLDynamicRHI.RHIEndDrawingViewport", ViewportRHI, bPresent, bLockToVsync); }
	void RHIEndFrame() { NativeCall<void>(this, "FOpenGLDynamicRHI.RHIEndFrame"); }
	void RHIEndRenderQuery(FRHIRenderQuery * QueryRHI) { NativeCall<void, FRHIRenderQuery *>(this, "FOpenGLDynamicRHI.RHIEndRenderQuery", QueryRHI); }
	void RHIEndScene() { NativeCall<void>(this, "FOpenGLDynamicRHI.RHIEndScene"); }
	void RHIFlushResources() { NativeCall<void>(this, "FOpenGLDynamicRHI.RHIFlushResources"); }
	void RHIGenerateMips(FRHITexture * SurfaceRHI) { NativeCall<void, FRHITexture *>(this, "FOpenGLDynamicRHI.RHIGenerateMips", SurfaceRHI); }
	bool RHIGetAvailableResolutions(TArray<FScreenResolutionRHI> * Resolutions, bool bIgnoreRefreshRate) { return NativeCall<bool, TArray<FScreenResolutionRHI> *, bool>(this, "FOpenGLDynamicRHI.RHIGetAvailableResolutions", Resolutions, bIgnoreRefreshRate); }
	unsigned int RHIGetGPUFrameCycles() { return NativeCall<unsigned int>(this, "FOpenGLDynamicRHI.RHIGetGPUFrameCycles"); }
	bool RHIGetRenderQueryResult(FRHIRenderQuery * QueryRHI, unsigned __int64 * OutResult, bool bWait) { return NativeCall<bool, FRHIRenderQuery *, unsigned __int64 *, bool>(this, "FOpenGLDynamicRHI.RHIGetRenderQueryResult", QueryRHI, OutResult, bWait); }
	void RHIGetSupportedResolution(unsigned int * Width, unsigned int * Height) { NativeCall<void, unsigned int *, unsigned int *>(this, "FOpenGLDynamicRHI.RHIGetSupportedResolution", Width, Height); }
	void RHIGetTextureMemoryStats(FTextureMemoryStats * OutStats) { NativeCall<void, FTextureMemoryStats *>(this, "FOpenGLDynamicRHI.RHIGetTextureMemoryStats", OutStats); }
	void * RHILockIndexBuffer(FRHIIndexBuffer * IndexBufferRHI, unsigned int Offset, unsigned int Size, EResourceLockMode LockMode) { return NativeCall<void *, FRHIIndexBuffer *, unsigned int, unsigned int, EResourceLockMode>(this, "FOpenGLDynamicRHI.RHILockIndexBuffer", IndexBufferRHI, Offset, Size, LockMode); }
	void * RHILockStructuredBuffer(FRHIStructuredBuffer * StructuredBufferRHI, unsigned int Offset, unsigned int Size, EResourceLockMode LockMode) { return NativeCall<void *, FRHIStructuredBuffer *, unsigned int, unsigned int, EResourceLockMode>(this, "FOpenGLDynamicRHI.RHILockStructuredBuffer", StructuredBufferRHI, Offset, Size, LockMode); }
	void * RHILockTexture2D(FRHITexture2D * TextureRHI, unsigned int MipIndex, EResourceLockMode LockMode, unsigned int * DestStride, bool bLockWithinMiptail) { return NativeCall<void *, FRHITexture2D *, unsigned int, EResourceLockMode, unsigned int *, bool>(this, "FOpenGLDynamicRHI.RHILockTexture2D", TextureRHI, MipIndex, LockMode, DestStride, bLockWithinMiptail); }
	void * RHILockTexture2DArray(FRHITexture2DArray * TextureRHI, unsigned int TextureIndex, unsigned int MipIndex, EResourceLockMode LockMode, unsigned int * DestStride, bool bLockWithinMiptail) { return NativeCall<void *, FRHITexture2DArray *, unsigned int, unsigned int, EResourceLockMode, unsigned int *, bool>(this, "FOpenGLDynamicRHI.RHILockTexture2DArray", TextureRHI, TextureIndex, MipIndex, LockMode, DestStride, bLockWithinMiptail); }
	void * RHILockTextureCubeFace(FRHITextureCube * TextureCubeRHI, unsigned int FaceIndex, unsigned int ArrayIndex, unsigned int MipIndex, EResourceLockMode LockMode, unsigned int * DestStride, bool bLockWithinMiptail) { return NativeCall<void *, FRHITextureCube *, unsigned int, unsigned int, unsigned int, EResourceLockMode, unsigned int *, bool>(this, "FOpenGLDynamicRHI.RHILockTextureCubeFace", TextureCubeRHI, FaceIndex, ArrayIndex, MipIndex, LockMode, DestStride, bLockWithinMiptail); }
	void * RHILockVertexBuffer(FRHIVertexBuffer * VertexBufferRHI, unsigned int Offset, unsigned int Size, EResourceLockMode LockMode) { return NativeCall<void *, FRHIVertexBuffer *, unsigned int, unsigned int, EResourceLockMode>(this, "FOpenGLDynamicRHI.RHILockVertexBuffer", VertexBufferRHI, Offset, Size, LockMode); }
	void RHIMapStagingSurface(FRHITexture * TextureRHI, void ** OutData, int * OutWidth, int * OutHeight) { NativeCall<void, FRHITexture *, void **, int *, int *>(this, "FOpenGLDynamicRHI.RHIMapStagingSurface", TextureRHI, OutData, OutWidth, OutHeight); }
	void RHIPopEvent() { NativeCall<void>(this, "FOpenGLDynamicRHI.RHIPopEvent"); }
	void RHIPushEvent(const wchar_t * Name, FColor Color) { NativeCall<void, const wchar_t *, FColor>(this, "FOpenGLDynamicRHI.RHIPushEvent", Name, Color); }
	void RHIRead3DSurfaceFloatData(FRHITexture * TextureRHI, FIntRect Rect, FIntPoint ZMinMax, TArray<FFloat16Color> * OutData) { NativeCall<void, FRHITexture *, FIntRect, FIntPoint, TArray<FFloat16Color> *>(this, "FOpenGLDynamicRHI.RHIRead3DSurfaceFloatData", TextureRHI, Rect, ZMinMax, OutData); }
	void RHIReadSurfaceData(FRHITexture * TextureRHI, FIntRect Rect, TArray<FColor> * OutData, FReadSurfaceDataFlags InFlags) { NativeCall<void, FRHITexture *, FIntRect, TArray<FColor> *, FReadSurfaceDataFlags>(this, "FOpenGLDynamicRHI.RHIReadSurfaceData", TextureRHI, Rect, OutData, InFlags); }
	void RHIReadSurfaceFloatData(FRHITexture * TextureRHI, FIntRect Rect, TArray<FFloat16Color> * OutData, ECubeFace CubeFace, int ArrayIndex, int MipIndex) { NativeCall<void, FRHITexture *, FIntRect, TArray<FFloat16Color> *, ECubeFace, int, int>(this, "FOpenGLDynamicRHI.RHIReadSurfaceFloatData", TextureRHI, Rect, OutData, CubeFace, ArrayIndex, MipIndex); }
	void RHIReleaseThreadOwnership() { NativeCall<void>(this, "FOpenGLDynamicRHI.RHIReleaseThreadOwnership"); }
	void RHIResizeViewport(FRHIViewport * ViewportRHI, unsigned int SizeX, unsigned int SizeY, bool bIsFullscreen) { NativeCall<void, FRHIViewport *, unsigned int, unsigned int, bool>(this, "FOpenGLDynamicRHI.RHIResizeViewport", ViewportRHI, SizeX, SizeY, bIsFullscreen); }
	void RHISetBlendState(FRHIBlendState * NewStateRHI, const FLinearColor * BlendFactor) { NativeCall<void, FRHIBlendState *, const FLinearColor *>(this, "FOpenGLDynamicRHI.RHISetBlendState", NewStateRHI, BlendFactor); }
	void RHISetBoundShaderState(FRHIBoundShaderState * BoundShaderStateRHI) { NativeCall<void, FRHIBoundShaderState *>(this, "FOpenGLDynamicRHI.RHISetBoundShaderState", BoundShaderStateRHI); }
	void RHISetComputeShader(FRHIComputeShader * ComputeShaderRHI) { NativeCall<void, FRHIComputeShader *>(this, "FOpenGLDynamicRHI.RHISetComputeShader", ComputeShaderRHI); }
	void RHISetDepthStencilState(FRHIDepthStencilState * NewStateRHI, unsigned int StencilRef) { NativeCall<void, FRHIDepthStencilState *, unsigned int>(this, "FOpenGLDynamicRHI.RHISetDepthStencilState", NewStateRHI, StencilRef); }
	void RHISetMultipleViewports(unsigned int Count, const FViewportBounds * Data) { NativeCall<void, unsigned int, const FViewportBounds *>(this, "FOpenGLDynamicRHI.RHISetMultipleViewports", Count, Data); }
	void RHISetRasterizerState(FRHIRasterizerState * NewStateRHI) { NativeCall<void, FRHIRasterizerState *>(this, "FOpenGLDynamicRHI.RHISetRasterizerState", NewStateRHI); }
	void RHISetRenderTargets(unsigned int NumSimultaneousRenderTargets, const FRHIRenderTargetView * NewRenderTargetsRHI, const FRHIDepthRenderTargetView * NewDepthStencilTargetRHI, unsigned int NumUAVs, FRHIUnorderedAccessView *const * UAVs) { NativeCall<void, unsigned int, const FRHIRenderTargetView *, const FRHIDepthRenderTargetView *, unsigned int, FRHIUnorderedAccessView *const *>(this, "FOpenGLDynamicRHI.RHISetRenderTargets", NumSimultaneousRenderTargets, NewRenderTargetsRHI, NewDepthStencilTargetRHI, NumUAVs, UAVs); }
	void RHISetRenderTargetsAndClear(const FRHISetRenderTargetsInfo * RenderTargetsInfo) { NativeCall<void, const FRHISetRenderTargetsInfo *>(this, "FOpenGLDynamicRHI.RHISetRenderTargetsAndClear", RenderTargetsInfo); }
	void RHISetScissorRect(bool bEnable, unsigned int MinX, unsigned int MinY, unsigned int MaxX, unsigned int MaxY) { NativeCall<void, bool, unsigned int, unsigned int, unsigned int, unsigned int>(this, "FOpenGLDynamicRHI.RHISetScissorRect", bEnable, MinX, MinY, MaxX, MaxY); }
	void RHISetShaderParameter(FRHIComputeShader * ComputeShaderRHI, unsigned int BufferIndex, unsigned int BaseIndex, unsigned int NumBytes, const void * NewValue) { NativeCall<void, FRHIComputeShader *, unsigned int, unsigned int, unsigned int, const void *>(this, "FOpenGLDynamicRHI.RHISetShaderParameter", ComputeShaderRHI, BufferIndex, BaseIndex, NumBytes, NewValue); }
	void RHISetShaderParameter(FRHIDomainShader * DomainShaderRHI, unsigned int BufferIndex, unsigned int BaseIndex, unsigned int NumBytes, const void * NewValue) { NativeCall<void, FRHIDomainShader *, unsigned int, unsigned int, unsigned int, const void *>(this, "FOpenGLDynamicRHI.RHISetShaderParameter", DomainShaderRHI, BufferIndex, BaseIndex, NumBytes, NewValue); }
	void RHISetShaderParameter(FRHIGeometryShader * GeometryShaderRHI, unsigned int BufferIndex, unsigned int BaseIndex, unsigned int NumBytes, const void * NewValue) { NativeCall<void, FRHIGeometryShader *, unsigned int, unsigned int, unsigned int, const void *>(this, "FOpenGLDynamicRHI.RHISetShaderParameter", GeometryShaderRHI, BufferIndex, BaseIndex, NumBytes, NewValue); }
	void RHISetShaderParameter(FRHIHullShader * HullShaderRHI, unsigned int BufferIndex, unsigned int BaseIndex, unsigned int NumBytes, const void * NewValue) { NativeCall<void, FRHIHullShader *, unsigned int, unsigned int, unsigned int, const void *>(this, "FOpenGLDynamicRHI.RHISetShaderParameter", HullShaderRHI, BufferIndex, BaseIndex, NumBytes, NewValue); }
	void RHISetShaderParameter(FRHIPixelShader * PixelShaderRHI, unsigned int BufferIndex, unsigned int BaseIndex, unsigned int NumBytes, const void * NewValue) { NativeCall<void, FRHIPixelShader *, unsigned int, unsigned int, unsigned int, const void *>(this, "FOpenGLDynamicRHI.RHISetShaderParameter", PixelShaderRHI, BufferIndex, BaseIndex, NumBytes, NewValue); }
	void RHISetShaderParameter(FRHIVertexShader * VertexShaderRHI, unsigned int BufferIndex, unsigned int BaseIndex, unsigned int NumBytes, const void * NewValue) { NativeCall<void, FRHIVertexShader *, unsigned int, unsigned int, unsigned int, const void *>(this, "FOpenGLDynamicRHI.RHISetShaderParameter", VertexShaderRHI, BufferIndex, BaseIndex, NumBytes, NewValue); }
	void RHISetShaderResourceViewParameter(FRHIDomainShader * DomainShaderRHI, unsigned int TextureIndex, FRHIShaderResourceView * SRVRHI) { NativeCall<void, FRHIDomainShader *, unsigned int, FRHIShaderResourceView *>(this, "FOpenGLDynamicRHI.RHISetShaderResourceViewParameter", DomainShaderRHI, TextureIndex, SRVRHI); }
	void RHISetShaderResourceViewParameter(FRHIGeometryShader * GeometryShaderRHI, unsigned int TextureIndex, FRHIShaderResourceView * SRVRHI) { NativeCall<void, FRHIGeometryShader *, unsigned int, FRHIShaderResourceView *>(this, "FOpenGLDynamicRHI.RHISetShaderResourceViewParameter", GeometryShaderRHI, TextureIndex, SRVRHI); }
	void RHISetShaderResourceViewParameter(FRHIHullShader * HullShaderRHI, unsigned int TextureIndex, FRHIShaderResourceView * SRVRHI) { NativeCall<void, FRHIHullShader *, unsigned int, FRHIShaderResourceView *>(this, "FOpenGLDynamicRHI.RHISetShaderResourceViewParameter", HullShaderRHI, TextureIndex, SRVRHI); }
	void RHISetShaderResourceViewParameter(FRHIPixelShader * PixelShaderRHI, unsigned int TextureIndex, FRHIShaderResourceView * SRVRHI) { NativeCall<void, FRHIPixelShader *, unsigned int, FRHIShaderResourceView *>(this, "FOpenGLDynamicRHI.RHISetShaderResourceViewParameter", PixelShaderRHI, TextureIndex, SRVRHI); }
	void RHISetShaderResourceViewParameter(FRHIVertexShader * VertexShaderRHI, unsigned int TextureIndex, FRHIShaderResourceView * SRVRHI) { NativeCall<void, FRHIVertexShader *, unsigned int, FRHIShaderResourceView *>(this, "FOpenGLDynamicRHI.RHISetShaderResourceViewParameter", VertexShaderRHI, TextureIndex, SRVRHI); }
	void RHISetShaderSampler(FRHIDomainShader * DomainShaderRHI, unsigned int SamplerIndex, FRHISamplerState * NewStateRHI) { NativeCall<void, FRHIDomainShader *, unsigned int, FRHISamplerState *>(this, "FOpenGLDynamicRHI.RHISetShaderSampler", DomainShaderRHI, SamplerIndex, NewStateRHI); }
	void RHISetShaderSampler(FRHIGeometryShader * GeometryShaderRHI, unsigned int SamplerIndex, FRHISamplerState * NewStateRHI) { NativeCall<void, FRHIGeometryShader *, unsigned int, FRHISamplerState *>(this, "FOpenGLDynamicRHI.RHISetShaderSampler", GeometryShaderRHI, SamplerIndex, NewStateRHI); }
	void RHISetShaderSampler(FRHIHullShader * HullShaderRHI, unsigned int SamplerIndex, FRHISamplerState * NewStateRHI) { NativeCall<void, FRHIHullShader *, unsigned int, FRHISamplerState *>(this, "FOpenGLDynamicRHI.RHISetShaderSampler", HullShaderRHI, SamplerIndex, NewStateRHI); }
	void RHISetShaderSampler(FRHIPixelShader * PixelShaderRHI, unsigned int SamplerIndex, FRHISamplerState * NewStateRHI) { NativeCall<void, FRHIPixelShader *, unsigned int, FRHISamplerState *>(this, "FOpenGLDynamicRHI.RHISetShaderSampler", PixelShaderRHI, SamplerIndex, NewStateRHI); }
	void RHISetShaderSampler(FRHIVertexShader * VertexShaderRHI, unsigned int SamplerIndex, FRHISamplerState * NewStateRHI) { NativeCall<void, FRHIVertexShader *, unsigned int, FRHISamplerState *>(this, "FOpenGLDynamicRHI.RHISetShaderSampler", VertexShaderRHI, SamplerIndex, NewStateRHI); }
	void RHISetShaderTexture(FRHIDomainShader * DomainShaderRHI, unsigned int TextureIndex, FRHITexture * NewTextureRHI) { NativeCall<void, FRHIDomainShader *, unsigned int, FRHITexture *>(this, "FOpenGLDynamicRHI.RHISetShaderTexture", DomainShaderRHI, TextureIndex, NewTextureRHI); }
	void RHISetShaderTexture(FRHIGeometryShader * GeometryShaderRHI, unsigned int TextureIndex, FRHITexture * NewTextureRHI) { NativeCall<void, FRHIGeometryShader *, unsigned int, FRHITexture *>(this, "FOpenGLDynamicRHI.RHISetShaderTexture", GeometryShaderRHI, TextureIndex, NewTextureRHI); }
	void RHISetShaderTexture(FRHIHullShader * HullShaderRHI, unsigned int TextureIndex, FRHITexture * NewTextureRHI) { NativeCall<void, FRHIHullShader *, unsigned int, FRHITexture *>(this, "FOpenGLDynamicRHI.RHISetShaderTexture", HullShaderRHI, TextureIndex, NewTextureRHI); }
	void RHISetShaderTexture(FRHIPixelShader * PixelShaderRHI, unsigned int TextureIndex, FRHITexture * NewTextureRHI) { NativeCall<void, FRHIPixelShader *, unsigned int, FRHITexture *>(this, "FOpenGLDynamicRHI.RHISetShaderTexture", PixelShaderRHI, TextureIndex, NewTextureRHI); }
	void RHISetShaderTexture(FRHIVertexShader * VertexShaderRHI, unsigned int TextureIndex, FRHITexture * NewTextureRHI) { NativeCall<void, FRHIVertexShader *, unsigned int, FRHITexture *>(this, "FOpenGLDynamicRHI.RHISetShaderTexture", VertexShaderRHI, TextureIndex, NewTextureRHI); }
	void RHISetShaderUniformBuffer(FRHIComputeShader * ComputeShaderRHI, unsigned int BufferIndex, FRHIUniformBuffer * BufferRHI) { NativeCall<void, FRHIComputeShader *, unsigned int, FRHIUniformBuffer *>(this, "FOpenGLDynamicRHI.RHISetShaderUniformBuffer", ComputeShaderRHI, BufferIndex, BufferRHI); }
	void RHISetShaderUniformBuffer(FRHIDomainShader * DomainShaderRHI, unsigned int BufferIndex, FRHIUniformBuffer * BufferRHI) { NativeCall<void, FRHIDomainShader *, unsigned int, FRHIUniformBuffer *>(this, "FOpenGLDynamicRHI.RHISetShaderUniformBuffer", DomainShaderRHI, BufferIndex, BufferRHI); }
	void RHISetShaderUniformBuffer(FRHIGeometryShader * GeometryShaderRHI, unsigned int BufferIndex, FRHIUniformBuffer * BufferRHI) { NativeCall<void, FRHIGeometryShader *, unsigned int, FRHIUniformBuffer *>(this, "FOpenGLDynamicRHI.RHISetShaderUniformBuffer", GeometryShaderRHI, BufferIndex, BufferRHI); }
	void RHISetShaderUniformBuffer(FRHIHullShader * HullShaderRHI, unsigned int BufferIndex, FRHIUniformBuffer * BufferRHI) { NativeCall<void, FRHIHullShader *, unsigned int, FRHIUniformBuffer *>(this, "FOpenGLDynamicRHI.RHISetShaderUniformBuffer", HullShaderRHI, BufferIndex, BufferRHI); }
	void RHISetShaderUniformBuffer(FRHIPixelShader * PixelShaderRHI, unsigned int BufferIndex, FRHIUniformBuffer * BufferRHI) { NativeCall<void, FRHIPixelShader *, unsigned int, FRHIUniformBuffer *>(this, "FOpenGLDynamicRHI.RHISetShaderUniformBuffer", PixelShaderRHI, BufferIndex, BufferRHI); }
	void RHISetShaderUniformBuffer(FRHIVertexShader * VertexShaderRHI, unsigned int BufferIndex, FRHIUniformBuffer * BufferRHI) { NativeCall<void, FRHIVertexShader *, unsigned int, FRHIUniformBuffer *>(this, "FOpenGLDynamicRHI.RHISetShaderUniformBuffer", VertexShaderRHI, BufferIndex, BufferRHI); }
	void RHISetStencilRef(unsigned int StencilRef) { NativeCall<void, unsigned int>(this, "FOpenGLDynamicRHI.RHISetStencilRef", StencilRef); }
	void RHISetStereoViewport(unsigned int LeftMinX, unsigned int RightMinX, unsigned int MinY, float MinZ, unsigned int LeftMaxX, unsigned int RightMaxX, unsigned int MaxY, float MaxZ) { NativeCall<void, unsigned int, unsigned int, unsigned int, float, unsigned int, unsigned int, unsigned int, float>(this, "FOpenGLDynamicRHI.RHISetStereoViewport", LeftMinX, RightMinX, MinY, MinZ, LeftMaxX, RightMaxX, MaxY, MaxZ); }
	void RHISetStreamSource(unsigned int StreamIndex, FRHIVertexBuffer * VertexBufferRHI, unsigned int Stride, unsigned int Offset) { NativeCall<void, unsigned int, FRHIVertexBuffer *, unsigned int, unsigned int>(this, "FOpenGLDynamicRHI.RHISetStreamSource", StreamIndex, VertexBufferRHI, Stride, Offset); }
	void RHISetUAVParameter(FRHIComputeShader * ComputeShaderRHI, unsigned int UAVIndex, FRHIUnorderedAccessView * UnorderedAccessViewRHI) { NativeCall<void, FRHIComputeShader *, unsigned int, FRHIUnorderedAccessView *>(this, "FOpenGLDynamicRHI.RHISetUAVParameter", ComputeShaderRHI, UAVIndex, UnorderedAccessViewRHI); }
	void RHISetViewport(int MinX, int MinY, float MinZ, int MaxX, int MaxY, float MaxZ) { NativeCall<void, int, int, float, int, int, float>(this, "FOpenGLDynamicRHI.RHISetViewport", MinX, MinY, MinZ, MaxX, MaxY, MaxZ); }
	void RHISubmitCommandsAndFlushGPU() { NativeCall<void>(this, "FOpenGLDynamicRHI.RHISubmitCommandsAndFlushGPU"); }
	void RHIUnlockIndexBuffer(FRHIIndexBuffer * IndexBufferRHI) { NativeCall<void, FRHIIndexBuffer *>(this, "FOpenGLDynamicRHI.RHIUnlockIndexBuffer", IndexBufferRHI); }
	void RHIUnlockStructuredBuffer(FRHIStructuredBuffer * StructuredBufferRHI) { NativeCall<void, FRHIStructuredBuffer *>(this, "FOpenGLDynamicRHI.RHIUnlockStructuredBuffer", StructuredBufferRHI); }
	void RHIUnlockTexture2D(FRHITexture2D * TextureRHI, unsigned int MipIndex, bool bLockWithinMiptail) { NativeCall<void, FRHITexture2D *, unsigned int, bool>(this, "FOpenGLDynamicRHI.RHIUnlockTexture2D", TextureRHI, MipIndex, bLockWithinMiptail); }
	void RHIUnlockTexture2DArray(FRHITexture2DArray * TextureRHI, unsigned int TextureIndex, unsigned int MipIndex, bool bLockWithinMiptail) { NativeCall<void, FRHITexture2DArray *, unsigned int, unsigned int, bool>(this, "FOpenGLDynamicRHI.RHIUnlockTexture2DArray", TextureRHI, TextureIndex, MipIndex, bLockWithinMiptail); }
	void RHIUnlockTextureCubeFace(FRHITextureCube * TextureCubeRHI, unsigned int FaceIndex, unsigned int ArrayIndex, unsigned int MipIndex, bool bLockWithinMiptail) { NativeCall<void, FRHITextureCube *, unsigned int, unsigned int, unsigned int, bool>(this, "FOpenGLDynamicRHI.RHIUnlockTextureCubeFace", TextureCubeRHI, FaceIndex, ArrayIndex, MipIndex, bLockWithinMiptail); }
	void RHIUnlockVertexBuffer(FRHIVertexBuffer * VertexBufferRHI) { NativeCall<void, FRHIVertexBuffer *>(this, "FOpenGLDynamicRHI.RHIUnlockVertexBuffer", VertexBufferRHI); }
	void RHIUnmapStagingSurface(FRHITexture * TextureRHI) { NativeCall<void, FRHITexture *>(this, "FOpenGLDynamicRHI.RHIUnmapStagingSurface", TextureRHI); }
	void RHIUpdateTexture2D(FRHITexture2D * TextureRHI, unsigned int MipIndex, const FUpdateTextureRegion2D * UpdateRegion, unsigned int SourcePitch, const char * SourceData) { NativeCall<void, FRHITexture2D *, unsigned int, const FUpdateTextureRegion2D *, unsigned int, const char *>(this, "FOpenGLDynamicRHI.RHIUpdateTexture2D", TextureRHI, MipIndex, UpdateRegion, SourcePitch, SourceData); }
	void RHIUpdateTexture3D(FRHITexture3D * TextureRHI, unsigned int MipIndex, const FUpdateTextureRegion3D * UpdateRegion, unsigned int SourceRowPitch, unsigned int SourceDepthPitch, const char * SourceData) { NativeCall<void, FRHITexture3D *, unsigned int, const FUpdateTextureRegion3D *, unsigned int, unsigned int, const char *>(this, "FOpenGLDynamicRHI.RHIUpdateTexture3D", TextureRHI, MipIndex, UpdateRegion, SourceRowPitch, SourceDepthPitch, SourceData); }
	void RHIUpdateTextureReference(FRHITextureReference * TextureRefRHI, FRHITexture * NewTextureRHI) { NativeCall<void, FRHITextureReference *, FRHITexture *>(this, "FOpenGLDynamicRHI.RHIUpdateTextureReference", TextureRefRHI, NewTextureRHI); }
	void ReadSurfaceDataRaw(FOpenGLContextState * ContextState, FRHITexture * TextureRHI, FIntRect Rect, TArray<unsigned char> * OutData, FReadSurfaceDataFlags InFlags) { NativeCall<void, FOpenGLContextState *, FRHITexture *, FIntRect, TArray<unsigned char> *, FReadSurfaceDataFlags>(this, "FOpenGLDynamicRHI.ReadSurfaceDataRaw", ContextState, TextureRHI, Rect, OutData, InFlags); }
	void RegisterQuery(FOpenGLRenderQuery * Query) { NativeCall<void, FOpenGLRenderQuery *>(this, "FOpenGLDynamicRHI.RegisterQuery", Query); }
	void SetPendingBlendStateForActiveRenderTargets(FOpenGLContextState * ContextState) { NativeCall<void, FOpenGLContextState *>(this, "FOpenGLDynamicRHI.SetPendingBlendStateForActiveRenderTargets", ContextState); }
	void SetupBindlessTextures(FOpenGLContextState * ContextState, const TArray<FOpenGLBindlessSamplerInfo> * Samplers) { NativeCall<void, FOpenGLContextState *, const TArray<FOpenGLBindlessSamplerInfo> *>(this, "FOpenGLDynamicRHI.SetupBindlessTextures", ContextState, Samplers); }
	void SetupUAVsForDraw(FOpenGLContextState * ContextState, const TRefCountPtr<FOpenGLComputeShader> * ComputeShader, int MaxUAVsNeeded) { NativeCall<void, FOpenGLContextState *, const TRefCountPtr<FOpenGLComputeShader> *, int>(this, "FOpenGLDynamicRHI.SetupUAVsForDraw", ContextState, ComputeShader, MaxUAVsNeeded); }
	void SetupVertexArrays(FOpenGLContextState * ContextState, unsigned int BaseVertexIndex, FOpenGLStream * Streams, unsigned int NumStreams, unsigned int MaxVertices) { NativeCall<void, FOpenGLContextState *, unsigned int, FOpenGLStream *, unsigned int, unsigned int>(this, "FOpenGLDynamicRHI.SetupVertexArrays", ContextState, BaseVertexIndex, Streams, NumStreams, MaxVertices); }
	void SetupVertexArraysVAB(FOpenGLContextState * ContextState, unsigned int BaseVertexIndex, FOpenGLStream * Streams, unsigned int NumStreams, unsigned int MaxVertices) { NativeCall<void, FOpenGLContextState *, unsigned int, FOpenGLStream *, unsigned int, unsigned int>(this, "FOpenGLDynamicRHI.SetupVertexArraysVAB", ContextState, BaseVertexIndex, Streams, NumStreams, MaxVertices); }
	void Shutdown() { NativeCall<void>(this, "FOpenGLDynamicRHI.Shutdown"); }
	void UnregisterQuery(FOpenGLRenderQuery * Query) { NativeCall<void, FOpenGLRenderQuery *>(this, "FOpenGLDynamicRHI.UnregisterQuery", Query); }
	void UpdateDepthStencilStateInOpenGLContext(FOpenGLContextState * ContextState) { NativeCall<void, FOpenGLContextState *>(this, "FOpenGLDynamicRHI.UpdateDepthStencilStateInOpenGLContext", ContextState); }
	void UpdateRasterizerStateInOpenGLContext(FOpenGLContextState * ContextState) { NativeCall<void, FOpenGLContextState *>(this, "FOpenGLDynamicRHI.UpdateRasterizerStateInOpenGLContext", ContextState); }
	void UpdateScissorRectInOpenGLContext(FOpenGLContextState * ContextState) { NativeCall<void, FOpenGLContextState *>(this, "FOpenGLDynamicRHI.UpdateScissorRectInOpenGLContext", ContextState); }
	void UpdateViewportInOpenGLContext(FOpenGLContextState * ContextState) { NativeCall<void, FOpenGLContextState *>(this, "FOpenGLDynamicRHI.UpdateViewportInOpenGLContext", ContextState); }
};

