#pragma once

#include "BaseDeclarations.h"
#include "FRepChangedParent.h"
#include "FRepChangedPropertyTracker.h"

struct FRepLayout
{
	char __padding[0x58L];
	TArray<FRepParentCmd>& ParentsField() { return *GetNativePointerField<TArray<FRepParentCmd>*>(this, "FRepLayout.Parents"); }
	TArray<FRepLayoutCmd>& CmdsField() { return *GetNativePointerField<TArray<FRepLayoutCmd>*>(this, "FRepLayout.Cmds"); }
	TArray<unsigned short>& UnconditionalLifetimeField() { return *GetNativePointerField<TArray<unsigned short>*>(this, "FRepLayout.UnconditionalLifetime"); }
	TArray<FLifetimeProperty>& ConditionalLifetimeField() { return *GetNativePointerField<TArray<FLifetimeProperty>*>(this, "FRepLayout.ConditionalLifetime"); }
	int& FirstNonCustomParentField() { return *GetNativePointerField<int*>(this, "FRepLayout.FirstNonCustomParent"); }
	int& RoleIndexField() { return *GetNativePointerField<int*>(this, "FRepLayout.RoleIndex"); }
	int& RemoteRoleIndexField() { return *GetNativePointerField<int*>(this, "FRepLayout.RemoteRoleIndex"); }

	// Functions

	void AddArrayCmd(UArrayProperty * Property, int Offset, int RelativeHandle, int ParentIndex) { NativeCall<void, UArrayProperty *, int, int, int>(this, "FRepLayout.AddArrayCmd", Property, Offset, RelativeHandle, ParentIndex); }
	void AddPropertyCmd(UProperty * Property, int Offset, int RelativeHandle, int ParentIndex) { NativeCall<void, UProperty *, int, int, int>(this, "FRepLayout.AddPropertyCmd", Property, Offset, RelativeHandle, ParentIndex); }
	void CallRepNotifies(FRepState * RepState, UObject * Object) { NativeCall<void, FRepState *, UObject *>(this, "FRepLayout.CallRepNotifies", RepState, Object); }
	bool CompareProperties(FRepState * RepState, const char * CompareData, const char * Data, TArray<FRepChangedParent> * OutChangedParents, const TArray<unsigned short> * PropertyList) { return NativeCall<bool, FRepState *, const char *, const char *, TArray<FRepChangedParent> *, const TArray<unsigned short> *>(this, "FRepLayout.CompareProperties", RepState, CompareData, Data, OutChangedParents, PropertyList); }
	void CompareProperties_Array_r(const char * CompareData, const char * Data, TArray<unsigned short> * Changed, const unsigned __int16 CmdIndex, const unsigned __int16 Handle) { NativeCall<void, const char *, const char *, TArray<unsigned short> *, const unsigned __int16, const unsigned __int16>(this, "FRepLayout.CompareProperties_Array_r", CompareData, Data, Changed, CmdIndex, Handle); }
	unsigned __int16 CompareProperties_r(const int CmdStart, const int CmdEnd, const char * CompareData, const char * Data, TArray<unsigned short> * Changed, unsigned __int16 Handle) { return NativeCall<unsigned __int16, const int, const int, const char *, const char *, TArray<unsigned short> *, unsigned __int16>(this, "FRepLayout.CompareProperties_r", CmdStart, CmdEnd, CompareData, Data, Changed, Handle); }
	void ConstructProperties(FRepState * RepState) { NativeCall<void, FRepState *>(this, "FRepLayout.ConstructProperties", RepState); }
	void DestructProperties(FRepState * RepState) { NativeCall<void, FRepState *>(this, "FRepLayout.DestructProperties", RepState); }
	bool DiffProperties(FRepState * RepState, const void * Data, const bool bSync) { return NativeCall<bool, FRepState *, const void *, const bool>(this, "FRepLayout.DiffProperties", RepState, Data, bSync); }
	void DiffProperties_DynamicArray_r(FRepState * RepState, const int CmdIndex, const char * StoredData, const char * Data, const bool bSync, bool * bOutDifferent) { NativeCall<void, FRepState *, const int, const char *, const char *, const bool, bool *>(this, "FRepLayout.DiffProperties_DynamicArray_r", RepState, CmdIndex, StoredData, Data, bSync, bOutDifferent); }
	void DiffProperties_r(FRepState * RepState, const int CmdStart, const int CmdEnd, const char * StoredData, const char * Data, const bool bSync, bool * bOutDifferent) { NativeCall<void, FRepState *, const int, const int, const char *, const char *, const bool, bool *>(this, "FRepLayout.DiffProperties_r", RepState, CmdStart, CmdEnd, StoredData, Data, bSync, bOutDifferent); }
	void GetLifetimeCustomDeltaProperties(TArray<int> * OutCustom) { NativeCall<void, TArray<int> *>(this, "FRepLayout.GetLifetimeCustomDeltaProperties", OutCustom); }
	void InitChangedTracker(FRepChangedPropertyTracker * ChangedTracker) { NativeCall<void, FRepChangedPropertyTracker *>(this, "FRepLayout.InitChangedTracker", ChangedTracker); }
	void InitFromFunction(UFunction * InFunction) { NativeCall<void, UFunction *>(this, "FRepLayout.InitFromFunction", InFunction); }
	void InitFromObjectClass(UClass * InObjectClass) { NativeCall<void, UClass *>(this, "FRepLayout.InitFromObjectClass", InObjectClass); }
	int InitFromProperty_r(UProperty * Property, int Offset, int RelativeHandle, int ParentIndex) { return NativeCall<int, UProperty *, int, int, int>(this, "FRepLayout.InitFromProperty_r", Property, Offset, RelativeHandle, ParentIndex); }
	void InitFromStruct(UStruct * InStruct) { NativeCall<void, UStruct *>(this, "FRepLayout.InitFromStruct", InStruct); }
	void InitProperties(FRepState * RepState, char * Src) { NativeCall<void, FRepState *, char *>(this, "FRepLayout.InitProperties", RepState, Src); }
	void InitRepState(FRepState * RepState, UClass * InObjectClass, char * Src, TSharedPtr<FRepChangedPropertyTracker,1> * InRepChangedPropertyTracker) { NativeCall<void, FRepState *, UClass *, char *, TSharedPtr<FRepChangedPropertyTracker,1> *>(this, "FRepLayout.InitRepState", RepState, InObjectClass, Src, InRepChangedPropertyTracker); }
	void MergeDirtyList(const void * Data, const TArray<unsigned short> * Dirty1, const TArray<unsigned short> * Dirty2, TArray<unsigned short> * MergedDirty) { NativeCall<void, const void *, const TArray<unsigned short> *, const TArray<unsigned short> *, TArray<unsigned short> *>(this, "FRepLayout.MergeDirtyList", Data, Dirty1, Dirty2, MergedDirty); }
	void MergeDirtyList_AnyArray_r(FMergeDirtyListState * MergeState, const FRepLayoutCmd * Cmd, const int ArrayNum, const int ElementSize, const int CmdIndex, const char * Data) { NativeCall<void, FMergeDirtyListState *, const FRepLayoutCmd *, const int, const int, const int, const char *>(this, "FRepLayout.MergeDirtyList_AnyArray_r", MergeState, Cmd, ArrayNum, ElementSize, CmdIndex, Data); }
	void MergeDirtyList_DynamicArray_r(FMergeDirtyListState * MergeState, const FRepLayoutCmd * Cmd, const int CmdIndex, const char * Data) { NativeCall<void, FMergeDirtyListState *, const FRepLayoutCmd *, const int, const char *>(this, "FRepLayout.MergeDirtyList_DynamicArray_r", MergeState, Cmd, CmdIndex, Data); }
	void MergeDirtyList_r(FMergeDirtyListState * MergeState, const int CmdStart, const int CmdEnd, const char * Data) { NativeCall<void, FMergeDirtyListState *, const int, const int, const char *>(this, "FRepLayout.MergeDirtyList_r", MergeState, CmdStart, CmdEnd, Data); }
	void OpenAcked(FRepState * RepState) { NativeCall<void, FRepState *>(this, "FRepLayout.OpenAcked", RepState); }
	void PostReceivedNak_Range(FRepState * RepState, int NakPacketStart, int NakPacketEnd) { NativeCall<void, FRepState *, int, int>(this, "FRepLayout.PostReceivedNak_Range", RepState, NakPacketStart, NakPacketEnd); }
	void PostReplicate(FRepState * RepState, FPacketIdRange * PacketRange, bool bReliable) { NativeCall<void, FRepState *, FPacketIdRange *, bool>(this, "FRepLayout.PostReplicate", RepState, PacketRange, bReliable); }
	bool ReadProperty(FRepReaderState * ReaderState, FUnmappedGuidMgr * UnmappedGuids, const int AbsOffset, const FRepLayoutCmd * Cmd, const int CmdIndex, char * StoredData, char * Data) { return NativeCall<bool, FRepReaderState *, FUnmappedGuidMgr *, const int, const FRepLayoutCmd *, const int, char *, char *>(this, "FRepLayout.ReadProperty", ReaderState, UnmappedGuids, AbsOffset, Cmd, CmdIndex, StoredData, Data); }
	void RebuildConditionalProperties(FRepState * RepState, const FRepChangedPropertyTracker * ChangedTracker, const FReplicationFlags * RepFlags) { NativeCall<void, FRepState *, const FRepChangedPropertyTracker *, const FReplicationFlags *>(this, "FRepLayout.RebuildConditionalProperties", RepState, ChangedTracker, RepFlags); }
	bool ReceiveProperties(UClass * InObjectClass, FRepState * RepState, void * Data, FNetBitReader * InBunch, bool * bOutHasUnmapped) { return NativeCall<bool, UClass *, FRepState *, void *, FNetBitReader *, bool *>(this, "FRepLayout.ReceiveProperties", InObjectClass, RepState, Data, InBunch, bOutHasUnmapped); }
	void ReceivePropertiesForRPC(UObject * Object, UFunction * Function, UActorChannel * Channel, FNetBitReader * Reader, void * Data) { NativeCall<void, UObject *, UFunction *, UActorChannel *, FNetBitReader *, void *>(this, "FRepLayout.ReceivePropertiesForRPC", Object, Function, Channel, Reader, Data); }
	bool ReceiveProperties_AnyArray_r(FRepReaderState * ReaderState, FUnmappedGuidMgr * UnmappedGuids, const int AbsOffset, const int ArrayNum, const int ElementSize, const int CmdIndex, char * StoredData, char * Data) { return NativeCall<bool, FRepReaderState *, FUnmappedGuidMgr *, const int, const int, const int, const int, char *, char *>(this, "FRepLayout.ReceiveProperties_AnyArray_r", ReaderState, UnmappedGuids, AbsOffset, ArrayNum, ElementSize, CmdIndex, StoredData, Data); }
	bool ReceiveProperties_DynamicArray_r(FRepReaderState * ReaderState, FUnmappedGuidMgr * UnmappedGuids, const int AbsOffset, const FRepLayoutCmd * Cmd, const int CmdIndex, char * StoredData, char * Data) { return NativeCall<bool, FRepReaderState *, FUnmappedGuidMgr *, const int, const FRepLayoutCmd *, const int, char *, char *>(this, "FRepLayout.ReceiveProperties_DynamicArray_r", ReaderState, UnmappedGuids, AbsOffset, Cmd, CmdIndex, StoredData, Data); }
	bool ReceiveProperties_r(FRepReaderState * ReaderState, FUnmappedGuidMgr * UnmappedGuids, const int AbsOffset, const int CmdStart, const int CmdEnd, char * StoredData, char * Data) { return NativeCall<bool, FRepReaderState *, FUnmappedGuidMgr *, const int, const int, const int, char *, char *>(this, "FRepLayout.ReceiveProperties_r", ReaderState, UnmappedGuids, AbsOffset, CmdStart, CmdEnd, StoredData, Data); }
	void ReceivedNak(FRepState * RepState, int NakPacketId) { NativeCall<void, FRepState *, int>(this, "FRepLayout.ReceivedNak", RepState, NakPacketId); }
	bool ReplicateProperties(FRepState * RepState, const char * Data, UClass * ObjectClass, UActorChannel * OwningChannel, FNetBitWriter * Writer, const FReplicationFlags * RepFlags, int * LastIndex, bool * bContentBlockWritten) { return NativeCall<bool, FRepState *, const char *, UClass *, UActorChannel *, FNetBitWriter *, const FReplicationFlags *, int *, bool *>(this, "FRepLayout.ReplicateProperties", RepState, Data, ObjectClass, OwningChannel, Writer, RepFlags, LastIndex, bContentBlockWritten); }
	void SendProperties(FRepState * RepState, const FReplicationFlags * RepFlags, const char * Data, UClass * ObjectClass, UActorChannel * OwningChannel, FNetBitWriter * Writer, TArray<unsigned short> * Changed, int * LastIndex, bool * bContentBlockWritten) { NativeCall<void, FRepState *, const FReplicationFlags *, const char *, UClass *, UActorChannel *, FNetBitWriter *, TArray<unsigned short> *, int *, bool *>(this, "FRepLayout.SendProperties", RepState, RepFlags, Data, ObjectClass, OwningChannel, Writer, Changed, LastIndex, bContentBlockWritten); }
	void SendPropertiesForRPC(UObject * Object, UFunction * Function, UActorChannel * Channel, FNetBitWriter * Writer, void * Data) { NativeCall<void, UObject *, UFunction *, UActorChannel *, FNetBitWriter *, void *>(this, "FRepLayout.SendPropertiesForRPC", Object, Function, Channel, Writer, Data); }
	void SendProperties_DynamicArray_r(FRepState * RepState, const FReplicationFlags * RepFlags, FRepWriterState * WriterState, const int CmdIndex, const char * StoredData, const char * Data, unsigned __int16 Handle) { NativeCall<void, FRepState *, const FReplicationFlags *, FRepWriterState *, const int, const char *, const char *, unsigned __int16>(this, "FRepLayout.SendProperties_DynamicArray_r", RepState, RepFlags, WriterState, CmdIndex, StoredData, Data, Handle); }
	unsigned __int16 SendProperties_r(FRepState * RepState, const FReplicationFlags * RepFlags, FRepWriterState * WriterState, const int CmdStart, const int CmdEnd, const char * StoredData, const char * Data, unsigned __int16 Handle) { return NativeCall<unsigned __int16, FRepState *, const FReplicationFlags *, FRepWriterState *, const int, const int, const char *, const char *, unsigned __int16>(this, "FRepLayout.SendProperties_r", RepState, RepFlags, WriterState, CmdStart, CmdEnd, StoredData, Data, Handle); }
	void SerializePropertiesForStruct(UStruct * Struct, FArchive * Ar, UPackageMap * Map, void * Data, bool * bHasUnmapped) { NativeCall<void, UStruct *, FArchive *, UPackageMap *, void *, bool *>(this, "FRepLayout.SerializePropertiesForStruct", Struct, Ar, Map, Data, bHasUnmapped); }
	void SerializeProperties_DynamicArray_r(FArchive * Ar, UPackageMap * Map, const int CmdIndex, char * Data, bool * bHasUnmapped) { NativeCall<void, FArchive *, UPackageMap *, const int, char *, bool *>(this, "FRepLayout.SerializeProperties_DynamicArray_r", Ar, Map, CmdIndex, Data, bHasUnmapped); }
	void SerializeProperties_r(FArchive * Ar, UPackageMap * Map, const int CmdStart, const int CmdEnd, void * Data, bool * bHasUnmapped) { NativeCall<void, FArchive *, UPackageMap *, const int, const int, void *, bool *>(this, "FRepLayout.SerializeProperties_r", Ar, Map, CmdStart, CmdEnd, Data, bHasUnmapped); }
	void UpdateChangelistHistory(FRepState * RepState, UClass * ObjectClass, const char * Data, const int AckPacketId, TArray<unsigned short> * OutMerged) { NativeCall<void, FRepState *, UClass *, const char *, const int, TArray<unsigned short> *>(this, "FRepLayout.UpdateChangelistHistory", RepState, ObjectClass, Data, AckPacketId, OutMerged); }
	void UpdateUnmappedObjects(FRepState * RepState, UPackageMap * PackageMap, UObject * OriginalObject, bool * bOutSomeObjectsWereMapped, bool * bOutHasMoreUnmapped) { NativeCall<void, FRepState *, UPackageMap *, UObject *, bool *, bool *>(this, "FRepLayout.UpdateUnmappedObjects", RepState, PackageMap, OriginalObject, bOutSomeObjectsWereMapped, bOutHasMoreUnmapped); }
	void UpdateUnmappedObjects_r(FRepState * RepState, FUnmappedGuidMgr * UnmappedGuids, UObject * OriginalObject, UPackageMap * PackageMap, char * Data, const int MaxAbsOffset, bool * bOutSomeObjectsWereMapped, bool * bOutHasMoreUnmapped) { NativeCall<void, FRepState *, FUnmappedGuidMgr *, UObject *, UPackageMap *, char *, const int, bool *, bool *>(this, "FRepLayout.UpdateUnmappedObjects_r", RepState, UnmappedGuids, OriginalObject, PackageMap, Data, MaxAbsOffset, bOutSomeObjectsWereMapped, bOutHasMoreUnmapped); }
	void WritePropertyHeader(UObject * Object, UClass * ObjectClass, UActorChannel * OwningChannel, UProperty * Property, FNetBitWriter * Bunch, int ArrayIndex, int * LastArrayIndex, bool * bContentBlockWritten) { NativeCall<void, UObject *, UClass *, UActorChannel *, UProperty *, FNetBitWriter *, int, int *, bool *>(this, "FRepLayout.WritePropertyHeader", Object, ObjectClass, OwningChannel, Property, Bunch, ArrayIndex, LastArrayIndex, bContentBlockWritten); }
};

