#pragma once

#include "BaseDeclarations.h"
struct FEngineShowFlags
{
	enum EShowFlag
	{
		SF_PostProcessing = 0x0,
		SF_Bloom = 0x1,
		SF_Tonemapper = 0x2,
		SF_AntiAliasing = 0x3,
		SF_TemporalAA = 0x4,
		SF_AmbientCubemap = 0x5,
		SF_EyeAdaptation = 0x6,
		SF_VisualizeHDR = 0x7,
		SF_LensFlares = 0x8,
		SF_GlobalIllumination = 0x9,
		SF_Vignette = 0xa,
		SF_Grain = 0xb,
		SF_AmbientOcclusion = 0xc,
		SF_Decals = 0xd,
		SF_CameraImperfections = 0xe,
		SF_OnScreenDebug = 0xf,
		SF_OverrideDiffuseAndSpecular = 0x10,
		SF_ReflectionOverride = 0x11,
		SF_VisualizeBuffer = 0x12,
		SF_DirectLighting = 0x13,
		SF_DirectionalLights = 0x14,
		SF_PointLights = 0x15,
		SF_SpotLights = 0x16,
		SF_ColorGrading = 0x17,
		SF_VectorFields = 0x18,
		SF_DepthOfField = 0x19,
		SF_ShadowsFromEditorHiddenActors = 0x1a,
		SF_GBufferHints = 0x1b,
		SF_MotionBlur = 0x1c,
		SF_CompositeEditorPrimitives = 0x1d,
		SF_TestImage = 0x1e,
		SF_VisualizeDOF = 0x1f,
		SF_VisualizeAdaptiveDOF = 0x20,
		SF_VertexColors = 0x21,
		SF_Refraction = 0x22,
		SF_CameraInterpolation = 0x23,
		SF_SceneColorFringe = 0x24,
		SF_SeparateTranslucency = 0x25,
		SF_ScreenPercentage = 0x26,
		SF_VisualizeMotionBlur = 0x27,
		SF_ReflectionEnvironment = 0x28,
		SF_VisualizeOutOfBoundsPixels = 0x29,
		SF_Diffuse = 0x2a,
		SF_Specular = 0x2b,
		SF_SelectionOutline = 0x2c,
		SF_ScreenSpaceReflections = 0x2d,
		SF_SubsurfaceScattering = 0x2e,
		SF_VisualizeSSS = 0x2f,
		SF_IndirectLightingCache = 0x30,
		SF_DebugAI = 0x31,
		SF_VisLog = 0x32,
		SF_Navigation = 0x33,
		SF_GameplayDebug = 0x34,
		SF_TexturedLightProfiles = 0x35,
		SF_LightFunctions = 0x36,
		SF_Tessellation = 0x37,
		SF_InstancedStaticMeshes = 0x38,
		SF_DynamicShadows = 0x39,
		SF_Particles = 0x3a,
		SF_SkeletalMeshes = 0x3b,
		SF_BuilderBrush = 0x3c,
		SF_Translucency = 0x3d,
		SF_BillboardSprites = 0x3e,
		SF_LOD = 0x3f,
		SF_LightComplexity = 0x40,
		SF_ShaderComplexity = 0x41,
		SF_StationaryLightOverlap = 0x42,
		SF_LightMapDensity = 0x43,
		SF_StreamingBounds = 0x44,
		SF_Constraints = 0x45,
		SF_CameraFrustums = 0x46,
		SF_AudioRadius = 0x47,
		SF_BSPSplit = 0x48,
		SF_Brushes = 0x49,
		SF_Lighting = 0x4a,
		SF_DeferredLighting = 0x4b,
		SF_Editor = 0x4c,
		SF_BSPTriangles = 0x4d,
		SF_LargeVertices = 0x4e,
		SF_Grid = 0x4f,
		SF_Snap = 0x50,
		SF_MeshEdges = 0x51,
		SF_Cover = 0x52,
		SF_Splines = 0x53,
		SF_Selection = 0x54,
		SF_ModeWidgets = 0x55,
		SF_Bounds = 0x56,
		SF_HitProxies = 0x57,
		SF_PropertyColoration = 0x58,
		SF_LightInfluences = 0x59,
		SF_Pivot = 0x5a,
		SF_ShadowFrustums = 0x5b,
		SF_Wireframe = 0x5c,
		SF_Materials = 0x5d,
		SF_StaticMeshes = 0x5e,
		SF_Landscape = 0x5f,
		SF_LightRadius = 0x60,
		SF_Fog = 0x61,
		SF_Volumes = 0x62,
		SF_Game = 0x63,
		SF_LevelColoration = 0x64,
		SF_BSP = 0x65,
		SF_Collision = 0x66,
		SF_CollisionVisibility = 0x67,
		SF_CollisionPawn = 0x68,
		SF_LightShafts = 0x69,
		SF_PostProcessMaterial = 0x6a,
		SF_Atmosphere = 0x6b,
		SF_CameraAspectRatioBars = 0x6c,
		SF_CameraSafeFrames = 0x6d,
		SF_TextRender = 0x6e,
		SF_Rendering = 0x6f,
		SF_HighResScreenshotMask = 0x70,
		SF_HMDDistortion = 0x71,
		SF_StereoRendering = 0x72,
		SF_DistanceCulledPrimitives = 0x73,
		SF_VisualizeLightCulling = 0x74,
		SF_PrecomputedVisibility = 0x75,
		SF_SkyLighting = 0x76,
		SF_VisualizeLPV = 0x77,
		SF_PreviewShadowsIndicator = 0x78,
		SF_PrecomputedVisibilityCells = 0x79,
		SF_VolumeLightingSamples = 0x7a,
		SF_LpvLightingOnly = 0x7b,
		SF_Paper2DSprites = 0x7c,
		SF_VisualizeDistanceFieldAO = 0x7d,
		SF_VisualizeDistanceFieldGI = 0x7e,
		SF_VisualizeMeshDistanceFields = 0x7f,
		SF_VisualizeGlobalDistanceField = 0x80,
		SF_DistanceFieldAO = 0x81,
		SF_DistanceFieldGI = 0x82,
		SF_VisualizeSSR = 0x83,
		SF_ForceGBuffer = 0x84,
		SF_VisualizeSenses = 0x85,
		SF_TrueSky = 0x86,
		SF_GroundClutter = 0x87,
		SF_AllowMaskedZEqual = 0x88,
	};

	char __padding[0x10L];

	// Functions

	void SetAmbientOcclusion(bool bVal) { NativeCall<void, bool>(this, "FEngineShowFlags.SetAmbientOcclusion", bVal); }
	void SetScreenSpaceReflections(bool bVal) { NativeCall<void, bool>(this, "FEngineShowFlags.SetScreenSpaceReflections", bVal); }
	static int FindIndexByName(const wchar_t * Name, const wchar_t * CommaSeparatedNames) { return NativeCall<int, const wchar_t *, const wchar_t *>(nullptr, "FEngineShowFlags.FindIndexByName", Name, CommaSeparatedNames); }
	bool GetSingleFlag(unsigned int Index) { return NativeCall<bool, unsigned int>(this, "FEngineShowFlags.GetSingleFlag", Index); }
	void SetSingleFlag(unsigned int Index, bool bSet) { NativeCall<void, unsigned int, bool>(this, "FEngineShowFlags.SetSingleFlag", Index, bSet); }
};

