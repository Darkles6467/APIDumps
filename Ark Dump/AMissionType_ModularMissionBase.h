#pragma once

#include "BaseDeclarations.h"
#include "AActor.h"
#include "UObject.h"
#include "UObjectBaseUtility.h"
#include "UObjectBase.h"
#include "FHUDElement.h"
#include "FMissionWorldIndicator.h"
#include "FMissionPhaseRequirement.h"
#include "FLifetimeProperty.h"
#include "AShooterProjectile.h"
#include "UNewMissionModuleBase.h"
#include "FCharacterAndControllerPair.h"
#include "AMissionType_ModularMissionBase.h"
#include "UPrimalItem.h"
#include "UPrimalInventoryComponent_Static.h"
#include "FLeaderboardRow.h"
#include "APrimalStructure.h"
#include "URecastFilter_UseDefaultArea.h"
#include "FRacePlayerData.h"
#include "FMissionAlertEntry.h"
#include "APrimalEmitterSpawnable.h"
#include "UPrimalColorSet.h"
#include "FDinoSetup.h"

struct AMissionType : AActor
{
	char __padding[0x648L];
	int& MissionVersionField() { return *GetNativePointerField<int*>(this, "AMissionType.MissionVersion"); }
	TArray<FName>& PrereqMissionTagsField() { return *GetNativePointerField<TArray<FName>*>(this, "AMissionType.PrereqMissionTags"); }
	TArray<FName>& PreventsStargingMissionsOfTagsField() { return *GetNativePointerField<TArray<FName>*>(this, "AMissionType.PreventsStargingMissionsOfTags"); }
	TArray<FName>& BuffTagsThatPreventMissionField() { return *GetNativePointerField<TArray<FName>*>(this, "AMissionType.BuffTagsThatPreventMission"); }
	TArray<TSubclassOf<UMissionPrerequisite>>& UnlockPrequisitesField() { return *GetNativePointerField<TArray<TSubclassOf<UMissionPrerequisite>>*>(this, "AMissionType.UnlockPrequisites"); }
	float& MissionTimeOfDayUnlockTimeField() { return *GetNativePointerField<float*>(this, "AMissionType.MissionTimeOfDayUnlockTime"); }
	float& MissionTimeOfDayLockTimeField() { return *GetNativePointerField<float*>(this, "AMissionType.MissionTimeOfDayLockTime"); }
	TEnumAsByte<enum EMissionDispatchMode::Type>& DispatchModeField() { return *GetNativePointerField<TEnumAsByte<enum EMissionDispatchMode::Type>*>(this, "AMissionType.DispatchMode"); }
	float& MissionDispatcherMaxDistanceField() { return *GetNativePointerField<float*>(this, "AMissionType.MissionDispatcherMaxDistance"); }
	float& MissionWildDinoOutgoingDamageScaleField() { return *GetNativePointerField<float*>(this, "AMissionType.MissionWildDinoOutgoingDamageScale"); }
	float& MissionWildDinoIncomingDamageScaleField() { return *GetNativePointerField<float*>(this, "AMissionType.MissionWildDinoIncomingDamageScale"); }
	int& MaxPlayerCountField() { return *GetNativePointerField<int*>(this, "AMissionType.MaxPlayerCount"); }
	int& MaxDinosPerPlayerAllowedOnMissionField() { return *GetNativePointerField<int*>(this, "AMissionType.MaxDinosPerPlayerAllowedOnMission"); }
	float& GlobalMissionCooldownField() { return *GetNativePointerField<float*>(this, "AMissionType.GlobalMissionCooldown"); }
	float& PerPlayerMissionCooldownField() { return *GetNativePointerField<float*>(this, "AMissionType.PerPlayerMissionCooldown"); }
	int& TargetPlayerLevelField() { return *GetNativePointerField<int*>(this, "AMissionType.TargetPlayerLevel"); }
	int& MinPlayerLevelField() { return *GetNativePointerField<int*>(this, "AMissionType.MinPlayerLevel"); }
	int& MaxPlayerLevelField() { return *GetNativePointerField<int*>(this, "AMissionType.MaxPlayerLevel"); }
	FString& MissionDisplayNameField() { return *GetNativePointerField<FString*>(this, "AMissionType.MissionDisplayName"); }
	FString& MissionDescriptionField() { return *GetNativePointerField<FString*>(this, "AMissionType.MissionDescription"); }
	FString& MissionSuccessMessageField() { return *GetNativePointerField<FString*>(this, "AMissionType.MissionSuccessMessage"); }
	FLinearColor& MissionSuccessMessageColorField() { return *GetNativePointerField<FLinearColor*>(this, "AMissionType.MissionSuccessMessageColor"); }
	FString& MissionFailedMessageField() { return *GetNativePointerField<FString*>(this, "AMissionType.MissionFailedMessage"); }
	FLinearColor& MissionFailedMessageColorField() { return *GetNativePointerField<FLinearColor*>(this, "AMissionType.MissionFailedMessageColor"); }
	FString& MissionAlertTitleField() { return *GetNativePointerField<FString*>(this, "AMissionType.MissionAlertTitle"); }
	FString& MissionInitiatedStringField() { return *GetNativePointerField<FString*>(this, "AMissionType.MissionInitiatedString"); }
	float& MissionCompleteAlertDisplayTimeField() { return *GetNativePointerField<float*>(this, "AMissionType.MissionCompleteAlertDisplayTime"); }
	TArray<FLootTableEntry>& RewardLootTableField() { return *GetNativePointerField<TArray<FLootTableEntry>*>(this, "AMissionType.RewardLootTable"); }
	int& RewardItemCountField() { return *GetNativePointerField<int*>(this, "AMissionType.RewardItemCount"); }
	float& RewardXPRatioField() { return *GetNativePointerField<float*>(this, "AMissionType.RewardXPRatio"); }
	int& FirstTimeCompletionHexagonRewardBonusField() { return *GetNativePointerField<int*>(this, "AMissionType.FirstTimeCompletionHexagonRewardBonus"); }
	int& FirstTimeCompletionHexagonRewardOverrideField() { return *GetNativePointerField<int*>(this, "AMissionType.FirstTimeCompletionHexagonRewardOverride"); }
	int& HexagonsOnCompletionField() { return *GetNativePointerField<int*>(this, "AMissionType.HexagonsOnCompletion"); }
	bool& bDivideHexogonsOnCompletionField() { return *GetNativePointerField<bool*>(this, "AMissionType.bDivideHexogonsOnCompletion"); }
	bool& bAutoRewardFromCustomItemSetsField() { return *GetNativePointerField<bool*>(this, "AMissionType.bAutoRewardFromCustomItemSets"); }
	bool& bRollExtraLootSetsPerPlayerField() { return *GetNativePointerField<bool*>(this, "AMissionType.bRollExtraLootSetsPerPlayer"); }
	int& MinimumItemSetGenerationRollsField() { return *GetNativePointerField<int*>(this, "AMissionType.MinimumItemSetGenerationRolls"); }
	bool& bEqualRewardsToAllParticipantsField() { return *GetNativePointerField<bool*>(this, "AMissionType.bEqualRewardsToAllParticipants"); }
	float& GenerateItemSetsQualityMultiplierMinField() { return *GetNativePointerField<float*>(this, "AMissionType.GenerateItemSetsQualityMultiplierMin"); }
	float& GenerateItemSetsQualityMultiplierMaxField() { return *GetNativePointerField<float*>(this, "AMissionType.GenerateItemSetsQualityMultiplierMax"); }
	float& MinItemSetsField() { return *GetNativePointerField<float*>(this, "AMissionType.MinItemSets"); }
	float& MaxItemSetsField() { return *GetNativePointerField<float*>(this, "AMissionType.MaxItemSets"); }
	float& NumItemSetsPowerField() { return *GetNativePointerField<float*>(this, "AMissionType.NumItemSetsPower"); }
	TArray<FSupplyCrateItemSet>& CustomItemSetsField() { return *GetNativePointerField<TArray<FSupplyCrateItemSet>*>(this, "AMissionType.CustomItemSets"); }
	FString& CustomMissionsUIRewardsLabelTextField() { return *GetNativePointerField<FString*>(this, "AMissionType.CustomMissionsUIRewardsLabelText"); }
	FName& InitialMissionPhaseField() { return *GetNativePointerField<FName*>(this, "AMissionType.InitialMissionPhase"); }
	TArray<FMissionPhase>& PhasesField() { return *GetNativePointerField<TArray<FMissionPhase>*>(this, "AMissionType.Phases"); }
	TArray<FMissionPhaseData>& PhaseDataField() { return *GetNativePointerField<TArray<FMissionPhaseData>*>(this, "AMissionType.PhaseData"); }
	TSubclassOf<ULeaderboard>& LeaderboardTypeField() { return *GetNativePointerField<TSubclassOf<ULeaderboard>*>(this, "AMissionType.LeaderboardType"); }
	TArray<FLeaderboardRow>& DefaultLeaderboardRowsField() { return *GetNativePointerField<TArray<FLeaderboardRow>*>(this, "AMissionType.DefaultLeaderboardRows"); }
	TArray<FMissionWorldBuffData>& SuccessWorldBuffsField() { return *GetNativePointerField<TArray<FMissionWorldBuffData>*>(this, "AMissionType.SuccessWorldBuffs"); }
	TArray<FMissionWorldBuffData>& FailureWorldBuffsField() { return *GetNativePointerField<TArray<FMissionWorldBuffData>*>(this, "AMissionType.FailureWorldBuffs"); }
	TArray<FName>& DisableTekArmorBuffsField() { return *GetNativePointerField<TArray<FName>*>(this, "AMissionType.DisableTekArmorBuffs"); }
	TArray<FTaggedString>& CustomMissionRequirementsField() { return *GetNativePointerField<TArray<FTaggedString>*>(this, "AMissionType.CustomMissionRequirements"); }
	float& MinDistanceToWaypointMultiplierField() { return *GetNativePointerField<float*>(this, "AMissionType.MinDistanceToWaypointMultiplier"); }
	int& MissionDebugFlagsField() { return *GetNativePointerField<int*>(this, "AMissionType.MissionDebugFlags"); }
	TArray<FName>& TriggerKeysField() { return *GetNativePointerField<TArray<FName>*>(this, "AMissionType.TriggerKeys"); }
	float& MissionMaxDurationSecondsField() { return *GetNativePointerField<float*>(this, "AMissionType.MissionMaxDurationSeconds"); }
	float& MissionDurationConsoleOffsetSecondsField() { return *GetNativePointerField<float*>(this, "AMissionType.MissionDurationConsoleOffsetSeconds"); }
	TEnumAsByte<enum EMissionTimerMode::Type>& MissionTimerUIModeField() { return *GetNativePointerField<TEnumAsByte<enum EMissionTimerMode::Type>*>(this, "AMissionType.MissionTimerUIMode"); }
	TEnumAsByte<enum EMissionTimerMode::Type>& MissionDurationUIModeField() { return *GetNativePointerField<TEnumAsByte<enum EMissionTimerMode::Type>*>(this, "AMissionType.MissionDurationUIMode"); }
	FString& MissionObjectiveTimeLabelStringField() { return *GetNativePointerField<FString*>(this, "AMissionType.MissionObjectiveTimeLabelString"); }
	float& LifetimeAfterDeactivatedField() { return *GetNativePointerField<float*>(this, "AMissionType.LifetimeAfterDeactivated"); }
	TArray<FTaggedString>& MissionStringsField() { return *GetNativePointerField<TArray<FTaggedString>*>(this, "AMissionType.MissionStrings"); }
	bool& bListEntryOnlyField() { return *GetNativePointerField<bool*>(this, "AMissionType.bListEntryOnly"); }
	bool& bUseThrottledTickField() { return *GetNativePointerField<bool*>(this, "AMissionType.bUseThrottledTick"); }
	FTimeRange& ThrottledTickTimeRangeField() { return *GetNativePointerField<FTimeRange*>(this, "AMissionType.ThrottledTickTimeRange"); }
	bool& bUseThrottledServerTickField() { return *GetNativePointerField<bool*>(this, "AMissionType.bUseThrottledServerTick"); }
	FTimeRange& ThrottledServerTickTimeRangeField() { return *GetNativePointerField<FTimeRange*>(this, "AMissionType.ThrottledServerTickTimeRange"); }
	bool& bUseThrottledClientTickField() { return *GetNativePointerField<bool*>(this, "AMissionType.bUseThrottledClientTick"); }
	FTimeRange& ThrottledClientTickTimeRangeField() { return *GetNativePointerField<FTimeRange*>(this, "AMissionType.ThrottledClientTickTimeRange"); }
	AShooterCharacter * StartedByCharacterField() { return GetNativePointerField<AShooterCharacter *>(this, "AMissionType.StartedByCharacter"); }
	TArray<FCharacterAndControllerPair>& PlayersOnMissionField() { return *GetNativePointerField<TArray<FCharacterAndControllerPair>*>(this, "AMissionType.PlayersOnMission"); }
	long double& MissionStartNetworkTimeField() { return *GetNativePointerField<long double*>(this, "AMissionType.MissionStartNetworkTime"); }
	long double& PostSetupMissionStartNetworkTimeField() { return *GetNativePointerField<long double*>(this, "AMissionType.PostSetupMissionStartNetworkTime"); }
	TEnumAsByte<enum EMissionState::Type>& MissionStateField() { return *GetNativePointerField<TEnumAsByte<enum EMissionState::Type>*>(this, "AMissionType.MissionState"); }
	TArray<AMissionSpline *>& DinoPathingSplinesField() { return *GetNativePointerField<TArray<AMissionSpline *>*>(this, "AMissionType.DinoPathingSplines"); }
	bool& UseDynamicMissionStringsField() { return *GetNativePointerField<bool*>(this, "AMissionType.UseDynamicMissionStrings"); }
	float& PrepAreaRadiusField() { return *GetNativePointerField<float*>(this, "AMissionType.PrepAreaRadius"); }
	float& PrepDurationField() { return *GetNativePointerField<float*>(this, "AMissionType.PrepDuration"); }
	bool& bPrepUseTargetingTeamOfStartingPlayerField() { return *GetNativePointerField<bool*>(this, "AMissionType.bPrepUseTargetingTeamOfStartingPlayer"); }
	TEnumAsByte<enum ETargetingTeamBehavior::Type>& PrepTargetingTeamBehaviorField() { return *GetNativePointerField<TEnumAsByte<enum ETargetingTeamBehavior::Type>*>(this, "AMissionType.PrepTargetingTeamBehavior"); }
	bool& bSetPrepAreaEmitterLifespanToPrepDurationField() { return *GetNativePointerField<bool*>(this, "AMissionType.bSetPrepAreaEmitterLifespanToPrepDuration"); }
	UParticleSystem * PrepAreaPlayerInclusionParticlesField() { return GetNativePointerField<UParticleSystem *>(this, "AMissionType.PrepAreaPlayerInclusionParticles"); }
	bool& bPrepAreaAutoSendNotificationToIncludedPlayersField() { return *GetNativePointerField<bool*>(this, "AMissionType.bPrepAreaAutoSendNotificationToIncludedPlayers"); }
	FString& PrepAreaNotificationPrefixField() { return *GetNativePointerField<FString*>(this, "AMissionType.PrepAreaNotificationPrefix"); }
	TArray<FName>& LevelsToLoadField() { return *GetNativePointerField<TArray<FName>*>(this, "AMissionType.LevelsToLoad"); }
	TArray<FName>& LevelsToLoadSinglePlayerAndListenServerField() { return *GetNativePointerField<TArray<FName>*>(this, "AMissionType.LevelsToLoadSinglePlayerAndListenServer"); }
	TArray<APrimalDinoCharacter *>& MissionDinosField() { return *GetNativePointerField<TArray<APrimalDinoCharacter *>*>(this, "AMissionType.MissionDinos"); }
	TArray<FTeleportedCharacter>& TeleportedCharactersField() { return *GetNativePointerField<TArray<FTeleportedCharacter>*>(this, "AMissionType.TeleportedCharacters"); }
	TArray<FPlayerItems>& PlayerUsableItemsField() { return *GetNativePointerField<TArray<FPlayerItems>*>(this, "AMissionType.PlayerUsableItems"); }
	TArray<AShooterCharacter *>& PlayersPendingAddToMissionField() { return *GetNativePointerField<TArray<AShooterCharacter *>*>(this, "AMissionType.PlayersPendingAddToMission"); }
	long double& LastUpdateMissionPrepAreaTimeField() { return *GetNativePointerField<long double*>(this, "AMissionType.LastUpdateMissionPrepAreaTime"); }
	TArray<FMissionPhaseRequirement>& ServerCachedPhaseRequirementsField() { return *GetNativePointerField<TArray<FMissionPhaseRequirement>*>(this, "AMissionType.ServerCachedPhaseRequirements"); }
	TArray<FMissionWorldIndicator>& ServerCachedWorldIndicatorsField() { return *GetNativePointerField<TArray<FMissionWorldIndicator>*>(this, "AMissionType.ServerCachedWorldIndicators"); }
	int& MissionPhaseIndexField() { return *GetNativePointerField<int*>(this, "AMissionType.MissionPhaseIndex"); }
	FTimerHandle& DelayedPhaseChangeTimerHandleField() { return *GetNativePointerField<FTimerHandle*>(this, "AMissionType.DelayedPhaseChangeTimerHandle"); }
	long double& LastThrottledTickEventTimeField() { return *GetNativePointerField<long double*>(this, "AMissionType.LastThrottledTickEventTime"); }
	float& CurrentThrottledTickEventIntervalField() { return *GetNativePointerField<float*>(this, "AMissionType.CurrentThrottledTickEventInterval"); }
	long double& LastThrottledServerTickEventTimeField() { return *GetNativePointerField<long double*>(this, "AMissionType.LastThrottledServerTickEventTime"); }
	float& CurrentThrottledServerTickEventIntervalField() { return *GetNativePointerField<float*>(this, "AMissionType.CurrentThrottledServerTickEventInterval"); }
	long double& LastThrottledClientTickEventTimeField() { return *GetNativePointerField<long double*>(this, "AMissionType.LastThrottledClientTickEventTime"); }
	float& CurrentThrottledClientTickEventIntervalField() { return *GetNativePointerField<float*>(this, "AMissionType.CurrentThrottledClientTickEventInterval"); }
	long double& LastAutoSwitchPhaseTimeField() { return *GetNativePointerField<long double*>(this, "AMissionType.LastAutoSwitchPhaseTime"); }
	float& CurrentAutoSwitchPhaseIntervalField() { return *GetNativePointerField<float*>(this, "AMissionType.CurrentAutoSwitchPhaseInterval"); }
	FName& CachedMissionTagField() { return *GetNativePointerField<FName*>(this, "AMissionType.CachedMissionTag"); }
	TArray<FName>& SplineSpanwerTriggerKeysField() { return *GetNativePointerField<TArray<FName>*>(this, "AMissionType.SplineSpanwerTriggerKeys"); }
	FName& OnFailureKillAllTamesInTileStreamingVolumeCustomTagField() { return *GetNativePointerField<FName*>(this, "AMissionType.OnFailureKillAllTamesInTileStreamingVolumeCustomTag"); }
	TArray<AMissionSpline *>& SplineSpawnersField() { return *GetNativePointerField<TArray<AMissionSpline *>*>(this, "AMissionType.SplineSpawners"); }
	TArray<FString>& ActivePreventsMissionsField() { return *GetNativePointerField<TArray<FString>*>(this, "AMissionType.ActivePreventsMissions"); }

	// Functions

	void AddDinoToDinoPathing(APrimalDinoCharacter * Dino) { NativeCall<void, APrimalDinoCharacter *>(this, "AMissionType.AddDinoToDinoPathing", Dino); }
	bool AddMissionLeaderboardRow(AShooterPlayerController * Controller, long double NetworkTime, float FloatValue, int IntValue, FName NameValue, const FString * StringValue) { return NativeCall<bool, AShooterPlayerController *, long double, float, int, FName, const FString *>(this, "AMissionType.AddMissionLeaderboardRow", Controller, NetworkTime, FloatValue, IntValue, NameValue, StringValue); }
	bool AddPlayerToMission(AShooterCharacter * PlayerCharacter, bool bForceAdd) { return NativeCall<bool, AShooterCharacter *, bool>(this, "AMissionType.AddPlayerToMission", PlayerCharacter, bForceAdd); }
	void AddPlayerUsableItem(AShooterCharacter * Character, UPrimalItem * Item) { NativeCall<void, AShooterCharacter *, UPrimalItem *>(this, "AMissionType.AddPlayerUsableItem", Character, Item); }
	int AddPlayersInRadiusToMission(const FVector * WorldLocation, float Radius, int MaxPlayersToAdd, bool bPrioritizeByDistanceToWorldLocation, int InTargetingTeam, TEnumAsByte<enum ETargetingTeamBehavior::Type> TargetingTeamBehavior, bool bForceAdd) { return NativeCall<int, const FVector *, float, int, bool, int, TEnumAsByte<enum ETargetingTeamBehavior::Type>, bool>(this, "AMissionType.AddPlayersInRadiusToMission", WorldLocation, Radius, MaxPlayersToAdd, bPrioritizeByDistanceToWorldLocation, InTargetingTeam, TargetingTeamBehavior, bForceAdd); }
	bool AllowMissionCreation_Implementation(AShooterCharacter * ForCharacter, const FVector * Location, AActor * MissionDispatcherActor, FString * FailureReason) { return NativeCall<bool, AShooterCharacter *, const FVector *, AActor *, FString *>(this, "AMissionType.AllowMissionCreation_Implementation", ForCharacter, Location, MissionDispatcherActor, FailureReason); }
	bool BPAllowPlayerToLeaveMission_Implementation(AShooterCharacter * PlayerPawn) { return NativeCall<bool, AShooterCharacter *>(this, "AMissionType.BPAllowPlayerToLeaveMission_Implementation", PlayerPawn); }
	void BPGenerateMissionRewards_Implementation(FCharacterAndControllerPair Player, bool bCompletedSuccessfully, float * OutXPReward, TArray<UPrimalItem *> * OutGeneratedItems) { NativeCall<void, FCharacterAndControllerPair, bool, float *, TArray<UPrimalItem *> *>(this, "AMissionType.BPGenerateMissionRewards_Implementation", Player, bCompletedSuccessfully, OutXPReward, OutGeneratedItems); }
	FString * BPGetMissionDurationText_Implementation(FString * result, AShooterPlayerController * ShootCont) { return NativeCall<FString *, FString *, AShooterPlayerController *>(this, "AMissionType.BPGetMissionDurationText_Implementation", result, ShootCont); }
	float BPGetMissionTargetingDesire_Implementation(APrimalDinoCharacter * MissionDino, AActor * ForTarget, float ForTargetingDesireValue) { return NativeCall<float, APrimalDinoCharacter *, AActor *, float>(this, "AMissionType.BPGetMissionTargetingDesire_Implementation", MissionDino, ForTarget, ForTargetingDesireValue); }
	FString * BPGetMissionTimerText_Implementation(FString * result, AShooterPlayerController * ShootCont) { return NativeCall<FString *, FString *, AShooterPlayerController *>(this, "AMissionType.BPGetMissionTimerText_Implementation", result, ShootCont); }
	FString * BPGetPhaseDisplayText_Implementation(FString * result, FName PhaseName) { return NativeCall<FString *, FString *, FName>(this, "AMissionType.BPGetPhaseDisplayText_Implementation", result, PhaseName); }
	void BPOnMissionPlayerDied_Implementation(AShooterCharacter * Player, AShooterPlayerController * Controller, float KillingDamage, const FDamageEvent * DamageEvent, AController * Killer, AActor * DamageCauser) { NativeCall<void, AShooterCharacter *, AShooterPlayerController *, float, const FDamageEvent *, AController *, AActor *>(this, "AMissionType.BPOnMissionPlayerDied_Implementation", Player, Controller, KillingDamage, DamageEvent, Killer, DamageCauser); }
	void BPOnPlayerRemovedFromMission_Implementation(AShooterCharacter * Player, AShooterPlayerController * Controller, bool bFromMissionCompleteEvent, bool bLastPhaseSuccess) { NativeCall<void, AShooterCharacter *, AShooterPlayerController *, bool, bool>(this, "AMissionType.BPOnPlayerRemovedFromMission_Implementation", Player, Controller, bFromMissionCompleteEvent, bLastPhaseSuccess); }
	int BPPhaseNameToIndex(FName Name, bool * OutIndexIsValid) { return NativeCall<int, FName, bool *>(this, "AMissionType.BPPhaseNameToIndex", Name, OutIndexIsValid); }
	bool BPStaticCanStartMission_Implementation(APlayerController * Controller, AShooterCharacter * PlayerPawn, APrimalBuff_MissionData * PlayerMissionData, FString * OutClientFailureReason, AActor ** OutSelectedMissionDispatcher) { return NativeCall<bool, APlayerController *, AShooterCharacter *, APrimalBuff_MissionData *, FString *, AActor **>(this, "AMissionType.BPStaticCanStartMission_Implementation", Controller, PlayerPawn, PlayerMissionData, OutClientFailureReason, OutSelectedMissionDispatcher); }
	void BeginPlay() { NativeCall<void>(this, "AMissionType.BeginPlay"); }
	static float CalcXPRatio(TEnumAsByte<enum ELevelExperienceRampType::Type> RampType, int Level, float Ratio) { return NativeCall<float, TEnumAsByte<enum ELevelExperienceRampType::Type>, int, float>(nullptr, "AMissionType.CalcXPRatio", RampType, Level, Ratio); }
	float CalculateMissionExperienceForPlayer(AShooterCharacter * Player) { return NativeCall<float, AShooterCharacter *>(this, "AMissionType.CalculateMissionExperienceForPlayer", Player); }
	static bool CanStartMission(TSubclassOf<AMissionType> MissionType, APlayerController * Controller, FString * OutClientFailureReason, AActor ** OutMissionDispatcher) { return NativeCall<bool, TSubclassOf<AMissionType>, APlayerController *, FString *, AActor **>(nullptr, "AMissionType.CanStartMission", MissionType, Controller, OutClientFailureReason, OutMissionDispatcher); }
	bool ChangeMissionState(EMissionState::Type NewState) { return NativeCall<bool, EMissionState::Type>(this, "AMissionType.ChangeMissionState", NewState); }
	void CleanupDinoPathingMap() { NativeCall<void>(this, "AMissionType.CleanupDinoPathingMap"); }
	void CleanupInvalidPlayers(bool RemoveIfInvalid) { NativeCall<void, bool>(this, "AMissionType.CleanupInvalidPlayers", RemoveIfInvalid); }
	bool ClearDinoAIForcedTargetActor(APrimalDinoCharacter * Dino) { return NativeCall<bool, APrimalDinoCharacter *>(this, "AMissionType.ClearDinoAIForcedTargetActor", Dino); }
	bool ClearDinoAINavigationTargetActor(APrimalDinoCharacter * Dino) { return NativeCall<bool, APrimalDinoCharacter *>(this, "AMissionType.ClearDinoAINavigationTargetActor", Dino); }
	bool ClearReverseTeleportReturnLocation(APrimalCharacter * Character) { return NativeCall<bool, APrimalCharacter *>(this, "AMissionType.ClearReverseTeleportReturnLocation", Character); }
	static int CountInventoryItems(APrimalCharacter * Character, TSubclassOf<UPrimalItem> ItemType, bool bRequireExactClassMatch) { return NativeCall<int, APrimalCharacter *, TSubclassOf<UPrimalItem>, bool>(nullptr, "AMissionType.CountInventoryItems", Character, ItemType, bRequireExactClassMatch); }
	int CountInventoryItemsFromAllPlayersInMission(TSubclassOf<UPrimalItem> ItemType, bool bRequireExactClassMatch) { return NativeCall<int, TSubclassOf<UPrimalItem>, bool>(this, "AMissionType.CountInventoryItemsFromAllPlayersInMission", ItemType, bRequireExactClassMatch); }
	int CountMissionLeaderboardRows() { return NativeCall<int>(this, "AMissionType.CountMissionLeaderboardRows"); }
	bool CreateMissionInventory(TSubclassOf<UPrimalInventoryComponent> InventoryType, bool bRecreate) { return NativeCall<bool, TSubclassOf<UPrimalInventoryComponent>, bool>(this, "AMissionType.CreateMissionInventory", InventoryType, bRecreate); }
	void DeactivateMission() { NativeCall<void>(this, "AMissionType.DeactivateMission"); }
	void Destroyed() { NativeCall<void>(this, "AMissionType.Destroyed"); }
	int FinalizeMissionPrep(bool bForceAdd) { return NativeCall<int, bool>(this, "AMissionType.FinalizeMissionPrep", bForceAdd); }
	USplineComponent * FindClosestPathingSpline(const FVector * WorldLocation) { return NativeCall<USplineComponent *, const FVector *>(this, "AMissionType.FindClosestPathingSpline", WorldLocation); }
	static AMissionSpline * FindClosestSplineActor(const FVector * WorldLocation, const TArray<AMissionSpline *> * Splines) { return NativeCall<AMissionSpline *, const FVector *, const TArray<AMissionSpline *> *>(nullptr, "AMissionType.FindClosestSplineActor", WorldLocation, Splines); }
	static AMissionSpline * FindClosestSplineActorWithTriggerKey(UObject * WorldContextObject, const FVector * WorldLocation, FName TriggerKey) { return NativeCall<AMissionSpline *, UObject *, const FVector *, FName>(nullptr, "AMissionType.FindClosestSplineActorWithTriggerKey", WorldContextObject, WorldLocation, TriggerKey); }
	static void FindMissionsMatchingTag(UObject * WorldContextObject, FName MissionTag, TArray<TSubclassOf<AMissionType>> * OutMissions) { NativeCall<void, UObject *, FName, TArray<TSubclassOf<AMissionType>> *>(nullptr, "AMissionType.FindMissionsMatchingTag", WorldContextObject, MissionTag, OutMissions); }
	void FireMissionPhaseChangeCallbacks(FName OldPhaseName, FName NewPhaseName, bool bStarted) { NativeCall<void, FName, FName, bool>(this, "AMissionType.FireMissionPhaseChangeCallbacks", OldPhaseName, NewPhaseName, bStarted); }
	void GenerateMissionRewardsForPlayer(const FCharacterAndControllerPair * Player, bool bCompletedSuccessfully, float * OutXPRewarded, TArray<UPrimalItem *> * OutLootItems, int NumCustomLootRolls, int HexagonReward) { NativeCall<void, const FCharacterAndControllerPair *, bool, float *, TArray<UPrimalItem *> *, int, int>(this, "AMissionType.GenerateMissionRewardsForPlayer", Player, bCompletedSuccessfully, OutXPRewarded, OutLootItems, NumCustomLootRolls, HexagonReward); }
	void GeneratePerPlayerPhaseRequirements_Implementation(AShooterPlayerController * Controller, AShooterCharacter * Character, FName PhaseName, TArray<FMissionPhaseRequirement> * OutRequirements) { NativeCall<void, AShooterPlayerController *, AShooterCharacter *, FName, TArray<FMissionPhaseRequirement> *>(this, "AMissionType.GeneratePerPlayerPhaseRequirements_Implementation", Controller, Character, PhaseName, OutRequirements); }
	void GeneratePhaseRequirements_Implementation(FName PhaseName, TArray<FMissionPhaseRequirement> * OutRequirements) { NativeCall<void, FName, TArray<FMissionPhaseRequirement> *>(this, "AMissionType.GeneratePhaseRequirements_Implementation", PhaseName, OutRequirements); }
	static void GetAllMissionServerSidePointsWithKey(UObject * WorldContextObject, FName TriggerKey, TArray<AMissionServerSidePoint *> * OutServerSidePointActors, bool bSortByTriggerOrder, bool bReverseSort, bool bExcludeMissionBounds) { NativeCall<void, UObject *, FName, TArray<AMissionServerSidePoint *> *, bool, bool, bool>(nullptr, "AMissionType.GetAllMissionServerSidePointsWithKey", WorldContextObject, TriggerKey, OutServerSidePointActors, bSortByTriggerOrder, bReverseSort, bExcludeMissionBounds); }
	static void GetAllMissionSplinesWithKey(UObject * WorldContextObject, FName TriggerKey, TArray<AMissionSpline *> * OutSplineActors, bool bSortByTriggerOrder, bool bReverseSort) { NativeCall<void, UObject *, FName, TArray<AMissionSpline *> *, bool, bool>(nullptr, "AMissionType.GetAllMissionSplinesWithKey", WorldContextObject, TriggerKey, OutSplineActors, bSortByTriggerOrder, bReverseSort); }
	TArray<FName> * GetAllMissionTriggerKeys_Implementation(TArray<FName> * result) { return NativeCall<TArray<FName> *, TArray<FName> *>(this, "AMissionType.GetAllMissionTriggerKeys_Implementation", result); }
	static void GetAllMissionTriggersWithKey(UObject * WorldContextObject, FName TriggerKey, TArray<AMissionTrigger *> * OutTriggerActors, bool bSortByTriggerOrder, bool bReverseSort) { NativeCall<void, UObject *, FName, TArray<AMissionTrigger *> *, bool, bool>(nullptr, "AMissionType.GetAllMissionTriggersWithKey", WorldContextObject, TriggerKey, OutTriggerActors, bSortByTriggerOrder, bReverseSort); }
	void GetAllPlayerCharactersInvolvedInMission(TArray<AShooterCharacter *> * OutPlayerCharacters) { NativeCall<void, TArray<AShooterCharacter *> *>(this, "AMissionType.GetAllPlayerCharactersInvolvedInMission", OutPlayerCharacters); }
	void GetAllPlayerControllersInvolvedInMission(TArray<AShooterPlayerController *> * OutPlayerControllers) { NativeCall<void, TArray<AShooterPlayerController *> *>(this, "AMissionType.GetAllPlayerControllersInvolvedInMission", OutPlayerControllers); }
	void GetAllPlayerControllersOnMission(TArray<AShooterPlayerController *> * OutControllers) { NativeCall<void, TArray<AShooterPlayerController *> *>(this, "AMissionType.GetAllPlayerControllersOnMission", OutControllers); }
	void GetAllPlayersOnMission(TArray<AShooterCharacter *> * OutCharacters) { NativeCall<void, TArray<AShooterCharacter *> *>(this, "AMissionType.GetAllPlayersOnMission", OutCharacters); }
	int GetCurrentMissionPhaseIndex() { return NativeCall<int>(this, "AMissionType.GetCurrentMissionPhaseIndex"); }
	FName * GetCurrentMissionPhaseName(FName * result) { return NativeCall<FName *, FName *>(this, "AMissionType.GetCurrentMissionPhaseName", result); }
	int GetCurrentSplineKeyTarget(APrimalDinoCharacter * ForDino) { return NativeCall<int, APrimalDinoCharacter *>(this, "AMissionType.GetCurrentSplineKeyTarget", ForDino); }
	void GetCurrentWorldIndicators_Implementation(TArray<FMissionWorldIndicator> * Indicators) { NativeCall<void, TArray<FMissionWorldIndicator> *>(this, "AMissionType.GetCurrentWorldIndicators_Implementation", Indicators); }
	bool GetDifficultyAsInt(UWorld * World, int * diffInt) { return NativeCall<bool, UWorld *, int *>(this, "AMissionType.GetDifficultyAsInt", World, diffInt); }
	bool GetDifficultyString(UWorld * World, FString * diffString, FLinearColor * diffColor) { return NativeCall<bool, UWorld *, FString *, FLinearColor *>(this, "AMissionType.GetDifficultyString", World, diffString, diffColor); }
	static FVector * GetDispatcherPointLocation(FVector * result, UObject * WorldContextObject, TSubclassOf<AMissionType> ForMissionType) { return NativeCall<FVector *, FVector *, UObject *, TSubclassOf<AMissionType>>(nullptr, "AMissionType.GetDispatcherPointLocation", result, WorldContextObject, ForMissionType); }
	void GetLifetimeReplicatedProps(TArray<FLifetimeProperty> * OutLifetimeProps) { NativeCall<void, TArray<FLifetimeProperty> *>(this, "AMissionType.GetLifetimeReplicatedProps", OutLifetimeProps); }
	FName * GetMissionClassName(FName * result) { return NativeCall<FName *, FName *>(this, "AMissionType.GetMissionClassName", result); }
	FString * GetMissionDisplayName_Implementation(FString * result, APlayerController * ShootCont) { return NativeCall<FString *, FString *, APlayerController *>(this, "AMissionType.GetMissionDisplayName_Implementation", result, ShootCont); }
	static FString * GetMissionDurationFromTag(FString * result, FName MissionTag, AShooterCharacter * Character) { return NativeCall<FString *, FString *, FName, AShooterCharacter *>(nullptr, "AMissionType.GetMissionDurationFromTag", result, MissionTag, Character); }
	static float GetMissionDurationInSeconds(TSubclassOf<AMissionType> MissionType) { return NativeCall<float, TSubclassOf<AMissionType>>(nullptr, "AMissionType.GetMissionDurationInSeconds", MissionType); }
	bool GetMissionLeaderboardRows(TArray<FLeaderboardRow> * OutRows) { return NativeCall<bool, TArray<FLeaderboardRow> *>(this, "AMissionType.GetMissionLeaderboardRows", OutRows); }
	FName * GetMissionTag(FName * result) { return NativeCall<FName *, FName *>(this, "AMissionType.GetMissionTag", result); }
	static FName * GetMissionTagForMission(FName * result, TSubclassOf<AMissionType> MissionType) { return NativeCall<FName *, FName *, TSubclassOf<AMissionType>>(nullptr, "AMissionType.GetMissionTagForMission", result, MissionType); }
	static FString * GetMissionWorldIndicatorDescription(FString * result, TSubclassOf<AMissionType> FromMissionType, const FMissionWorldIndicator * WorldIndicator) { return NativeCall<FString *, FString *, TSubclassOf<AMissionType>, const FMissionWorldIndicator *>(nullptr, "AMissionType.GetMissionWorldIndicatorDescription", result, FromMissionType, WorldIndicator); }
	static FVector * GetMissionWorldIndicatorWorldLocation(FVector * result, const FMissionWorldIndicator * Indicator, APrimalCharacter * ForCharacter) { return NativeCall<FVector *, FVector *, const FMissionWorldIndicator *, APrimalCharacter *>(nullptr, "AMissionType.GetMissionWorldIndicatorWorldLocation", result, Indicator, ForCharacter); }
	static void GetNearbyCharacters(UObject * WorldContextObject, TArray<APrimalCharacter *> * OutCharacters, FVector Location, float Radius) { NativeCall<void, UObject *, TArray<APrimalCharacter *> *, FVector, float>(nullptr, "AMissionType.GetNearbyCharacters", WorldContextObject, OutCharacters, Location, Radius); }
	static void GetNearbyDinos(UObject * WorldContextObject, TArray<APrimalDinoCharacter *> * OutCharacters, FVector Location, float Radius, bool bIncludeTamed, bool bIncludeWild, int OnlyFriendlyWithTargetingTeam) { NativeCall<void, UObject *, TArray<APrimalDinoCharacter *> *, FVector, float, bool, bool, int>(nullptr, "AMissionType.GetNearbyDinos", WorldContextObject, OutCharacters, Location, Radius, bIncludeTamed, bIncludeWild, OnlyFriendlyWithTargetingTeam); }
	static void GetNearbyMissionDispatchers(UObject * WorldContextObject, TSubclassOf<AMissionType> ForMissionType, AShooterCharacter * ForPlayer, const FVector * SearchOrigin, TArray<AMissionDispatcher *> * OutDispatchers, float Radius, bool bSortByDistance, bool bRequireMissionInDisaptcher) { NativeCall<void, UObject *, TSubclassOf<AMissionType>, AShooterCharacter *, const FVector *, TArray<AMissionDispatcher *> *, float, bool, bool>(nullptr, "AMissionType.GetNearbyMissionDispatchers", WorldContextObject, ForMissionType, ForPlayer, SearchOrigin, OutDispatchers, Radius, bSortByDistance, bRequireMissionInDisaptcher); }
	static void GetNearbyPlayers(UObject * WorldContextObject, TArray<AShooterCharacter *> * OutCharacters, FVector Location, float Radius, int OnlyFriendlyWithTargetingTeam) { NativeCall<void, UObject *, TArray<AShooterCharacter *> *, FVector, float, int>(nullptr, "AMissionType.GetNearbyPlayers", WorldContextObject, OutCharacters, Location, Radius, OnlyFriendlyWithTargetingTeam); }
	static void GetNearbyPlayersAndTamedDinos(UObject * WorldContextObject, TArray<APrimalCharacter *> * OutCharacters, FVector Location, float Radius, int OnlyFriendlyWithTargetingTeam) { NativeCall<void, UObject *, TArray<APrimalCharacter *> *, FVector, float, int>(nullptr, "AMissionType.GetNearbyPlayersAndTamedDinos", WorldContextObject, OutCharacters, Location, Radius, OnlyFriendlyWithTargetingTeam); }
	static void GetNearbyPlayersEligibleForMission(UObject * WorldContextObject, TArray<AShooterCharacter *> * OutCharacters, TSubclassOf<AMissionType> MissionType, FVector Location, float Radius, bool bSortByDistanceToLocation, bool bRespectMissionMaxPlayerCount, int InTargetingTeam, TEnumAsByte<enum ETargetingTeamBehavior::Type> TargetingTeamBehavior) { NativeCall<void, UObject *, TArray<AShooterCharacter *> *, TSubclassOf<AMissionType>, FVector, float, bool, bool, int, TEnumAsByte<enum ETargetingTeamBehavior::Type>>(nullptr, "AMissionType.GetNearbyPlayersEligibleForMission", WorldContextObject, OutCharacters, MissionType, Location, Radius, bSortByDistanceToLocation, bRespectMissionMaxPlayerCount, InTargetingTeam, TargetingTeamBehavior); }
	void GetNearbyStructures(UObject * WorldContextObject, TArray<APrimalStructure *> * OutStructures, TSubclassOf<APrimalStructure> StructureType, bool bExactTypeMatch, FVector Location, float Radius) { NativeCall<void, UObject *, TArray<APrimalStructure *> *, TSubclassOf<APrimalStructure>, bool, FVector, float>(this, "AMissionType.GetNearbyStructures", WorldContextObject, OutStructures, StructureType, bExactTypeMatch, Location, Radius); }
	void GetPerPlayerWorldIndicators_Implementation(AShooterPlayerController * Controller, AShooterCharacter * Character, TArray<FMissionWorldIndicator> * WorldIndicators) { NativeCall<void, AShooterPlayerController *, AShooterCharacter *, TArray<FMissionWorldIndicator> *>(this, "AMissionType.GetPerPlayerWorldIndicators_Implementation", Controller, Character, WorldIndicators); }
	FString * GetPhaseDisplayText(FString * result) { return NativeCall<FString *, FString *>(this, "AMissionType.GetPhaseDisplayText", result); }
	static FString * GetPhaseRequirementDescription(FString * result, TSubclassOf<AMissionType> ForMission, const FMissionPhaseRequirement * Req) { return NativeCall<FString *, FString *, TSubclassOf<AMissionType>, const FMissionPhaseRequirement *>(nullptr, "AMissionType.GetPhaseRequirementDescription", result, ForMission, Req); }
	static float GetPhaseRequirementProgress(const FMissionPhaseRequirement * Req) { return NativeCall<float, const FMissionPhaseRequirement *>(nullptr, "AMissionType.GetPhaseRequirementProgress", Req); }
	void GetPhaseRequirements(FName PhaseName, TArray<FMissionPhaseRequirement> * OutRequirements, AShooterCharacter * ForPlayer) { NativeCall<void, FName, TArray<FMissionPhaseRequirement> *, AShooterCharacter *>(this, "AMissionType.GetPhaseRequirements", PhaseName, OutRequirements, ForPlayer); }
	void GetPlayerUsableItems(AShooterCharacter * Character, TArray<FItemNetID> * OutItemIDs) { NativeCall<void, AShooterCharacter *, TArray<FItemNetID> *>(this, "AMissionType.GetPlayerUsableItems", Character, OutItemIDs); }
	static FName * GetRealMissionTagFromMetaData(FName * result, UObject * WorldContextObject, TSubclassOf<AMissionType> MissionType) { return NativeCall<FName *, FName *, UObject *, TSubclassOf<AMissionType>>(nullptr, "AMissionType.GetRealMissionTagFromMetaData", result, WorldContextObject, MissionType); }
	float GetRemainingTime() { return NativeCall<float>(this, "AMissionType.GetRemainingTime"); }
	bool GetReverseTeleportReturnLocation(APrimalCharacter * Character, FVector * OutReverseTeleportLocation, FRotator * OutReverseTeleportRotation) { return NativeCall<bool, APrimalCharacter *, FVector *, FRotator *>(this, "AMissionType.GetReverseTeleportReturnLocation", Character, OutReverseTeleportLocation, OutReverseTeleportRotation); }
	bool GetTaggedString(FName Tag, FString * OutString) { return NativeCall<bool, FName, FString *>(this, "AMissionType.GetTaggedString", Tag, OutString); }
	void GetTargetingTeamsOfAllPlayersOnMission(TArray<int> * OutTargetingTeams) { NativeCall<void, TArray<int> *>(this, "AMissionType.GetTargetingTeamsOfAllPlayersOnMission", OutTargetingTeams); }
	int GetTeleportedCharactersIndex(APrimalCharacter * Character) { return NativeCall<int, APrimalCharacter *>(this, "AMissionType.GetTeleportedCharactersIndex", Character); }
	static void GivePlayerXP(AShooterCharacter * Player, float XPAmount) { NativeCall<void, AShooterCharacter *, float>(nullptr, "AMissionType.GivePlayerXP", Player, XPAmount); }
	static bool HasPlayerCompletedMission(TSubclassOf<AMissionType> MissionType, AShooterCharacter * Character, int * OutVersionCompleted, long double * OutUtcTimeCompleted) { return NativeCall<bool, TSubclassOf<AMissionType>, AShooterCharacter *, int *, long double *>(nullptr, "AMissionType.HasPlayerCompletedMission", MissionType, Character, OutVersionCompleted, OutUtcTimeCompleted); }
	static bool HasPlayerCompletedMissionByTag(FName MissionTag, AShooterCharacter * Character, int * OutVersionCompleted, long double * OutUtcTimeCompleted) { return NativeCall<bool, FName, AShooterCharacter *, int *, long double *>(nullptr, "AMissionType.HasPlayerCompletedMissionByTag", MissionTag, Character, OutVersionCompleted, OutUtcTimeCompleted); }
	void InternalUpdateMissionData() { NativeCall<void>(this, "AMissionType.InternalUpdateMissionData"); }
	bool IsActive() { return NativeCall<bool>(this, "AMissionType.IsActive"); }
	static bool IsFriendlyWithAllTargetingTeams(APrimalCharacter * Character, const TArray<int> * TargetingTeams) { return NativeCall<bool, APrimalCharacter *, const TArray<int> *>(nullptr, "AMissionType.IsFriendlyWithAllTargetingTeams", Character, TargetingTeams); }
	static bool IsFriendlyWithAnyTargetingTeam(APrimalCharacter * Character, const TArray<int> * TargetingTeams) { return NativeCall<bool, APrimalCharacter *, const TArray<int> *>(nullptr, "AMissionType.IsFriendlyWithAnyTargetingTeam", Character, TargetingTeams); }
	static bool IsMetaDataMissionType(UObject * WorldContextObject, TSubclassOf<AMissionType> MissionType) { return NativeCall<bool, UObject *, TSubclassOf<AMissionType>>(nullptr, "AMissionType.IsMetaDataMissionType", WorldContextObject, MissionType); }
	bool IsMissionComplete_Implementation(AShooterCharacter * ForCharacter, AShooterPlayerController * ForController) { return NativeCall<bool, AShooterCharacter *, AShooterPlayerController *>(this, "AMissionType.IsMissionComplete_Implementation", ForCharacter, ForController); }
	bool IsNetRelevantFor(APlayerController * RealViewer, AActor * Viewer, const FVector * SrcLocation) { return NativeCall<bool, APlayerController *, AActor *, const FVector *>(this, "AMissionType.IsNetRelevantFor", RealViewer, Viewer, SrcLocation); }
	bool IsPhaseComplete(FName PhaseName) { return NativeCall<bool, FName>(this, "AMissionType.IsPhaseComplete", PhaseName); }
	bool IsPhaseNameValid(FName Name) { return NativeCall<bool, FName>(this, "AMissionType.IsPhaseNameValid", Name); }
	static bool IsPlayerEligibleForMission(TSubclassOf<AMissionType> MissionType, APlayerController * Controller, FString * OutReason) { return NativeCall<bool, TSubclassOf<AMissionType>, APlayerController *, FString *>(nullptr, "AMissionType.IsPlayerEligibleForMission", MissionType, Controller, OutReason); }
	bool IsPlayerOnMission(AShooterCharacter * PlayerCharacter) { return NativeCall<bool, AShooterCharacter *>(this, "AMissionType.IsPlayerOnMission", PlayerCharacter); }
	static FMissionAlertEntry * ItemToAlertEntry(FMissionAlertEntry * result, UPrimalItem * Item) { return NativeCall<FMissionAlertEntry *, FMissionAlertEntry *, UPrimalItem *>(nullptr, "AMissionType.ItemToAlertEntry", result, Item); }
	bool MissionAI_FindPathToTarget(APrimalDinoCharacter * ForDino, FVector * OutNextTargetLocation) { return NativeCall<bool, APrimalDinoCharacter *, FVector *>(this, "AMissionType.MissionAI_FindPathToTarget", ForDino, OutNextTargetLocation); }
	static void MissionAI_GetMissionFromController(AActor * ControllerActor, TEnumAsByte<enum EBoolExecResult::Type> * OutResult, AMissionType ** OutMission, APrimalDinoCharacter ** OutDinoPawn, APrimalDinoAIController ** OutDinoController) { NativeCall<void, AActor *, TEnumAsByte<enum EBoolExecResult::Type> *, AMissionType **, APrimalDinoCharacter **, APrimalDinoAIController **>(nullptr, "AMissionType.MissionAI_GetMissionFromController", ControllerActor, OutResult, OutMission, OutDinoPawn, OutDinoController); }
	bool MissionAI_IsAtPathDestination(APrimalDinoCharacter * ForDino, float MaxDistance, FVector TargetOffset, ECollisionChannel TraceChannel, float DebugDrawDuration) { return NativeCall<bool, APrimalDinoCharacter *, float, FVector, ECollisionChannel, float>(this, "AMissionType.MissionAI_IsAtPathDestination", ForDino, MaxDistance, TargetOffset, TraceChannel, DebugDrawDuration); }
	void MissionAI_SetForcePathSplineForDino(APrimalDinoCharacter * ForDino, USplineComponent * path) { NativeCall<void, APrimalDinoCharacter *, USplineComponent *>(this, "AMissionType.MissionAI_SetForcePathSplineForDino", ForDino, path); }
	void MissionAI_SetReversPathForDino(APrimalDinoCharacter * ForDino, bool ShouldReverseAtEnd) { NativeCall<void, APrimalDinoCharacter *, bool>(this, "AMissionType.MissionAI_SetReversPathForDino", ForDino, ShouldReverseAtEnd); }
	int MissionFindPathAsync(UObject * WorldContext, const FVector * PathStart, const FVector * PathEnd, AActor * PathfindingContext, TSubclassOf<UNavigationQueryFilter> FilterClass) { return NativeCall<int, UObject *, const FVector *, const FVector *, AActor *, TSubclassOf<UNavigationQueryFilter>>(this, "AMissionType.MissionFindPathAsync", WorldContext, PathStart, PathEnd, PathfindingContext, FilterClass); }
	void MultiMissionPhaseEnded_Implementation(FName OldPhaseName, FName NewPhaseName) { NativeCall<void, FName, FName>(this, "AMissionType.MultiMissionPhaseEnded_Implementation", OldPhaseName, NewPhaseName); }
	void MultiMissionPhaseStarted_Implementation(FName OldPhaseName, FName NewPhaseName) { NativeCall<void, FName, FName>(this, "AMissionType.MultiMissionPhaseStarted_Implementation", OldPhaseName, NewPhaseName); }
	void MultiMissionStateChange_Implementation(EMissionState::Type NewState) { NativeCall<void, EMissionState::Type>(this, "AMissionType.MultiMissionStateChange_Implementation", NewState); }
	void MultiResetMissionTimer_Implementation(long double NewMissionStartNetworkTime) { NativeCall<void, long double>(this, "AMissionType.MultiResetMissionTimer_Implementation", NewMissionStartNetworkTime); }
	bool NetExecCommand(FName CommandName, const FNetExecParams * ExecParams) { return NativeCall<bool, FName, const FNetExecParams *>(this, "AMissionType.NetExecCommand", CommandName, ExecParams); }
	FString * NonStaticGetPhaseRequirementDescription(FString * result, const FMissionPhaseRequirement * Req) { return NativeCall<FString *, FString *, const FMissionPhaseRequirement *>(this, "AMissionType.NonStaticGetPhaseRequirementDescription", result, Req); }
	static int NumLivingPlayers(const TArray<AShooterCharacter *> * PlayerArray) { return NativeCall<int, const TArray<AShooterCharacter *> *>(nullptr, "AMissionType.NumLivingPlayers", PlayerArray); }
	void OnInventoryItemAdded(UPrimalInventoryComponent * Inventory, UPrimalItem * Item, int AmountAdded, bool bEquippedItem) { NativeCall<void, UPrimalInventoryComponent *, UPrimalItem *, int, bool>(this, "AMissionType.OnInventoryItemAdded", Inventory, Item, AmountAdded, bEquippedItem); }
	void OnInventoryItemRemoved(UPrimalInventoryComponent * Inventory, UPrimalItem * Item, int AmountRemoved) { NativeCall<void, UPrimalInventoryComponent *, UPrimalItem *, int>(this, "AMissionType.OnInventoryItemRemoved", Inventory, Item, AmountRemoved); }
	void OnMissionActivated() { NativeCall<void>(this, "AMissionType.OnMissionActivated"); }
	void OnMissionDeactivated() { NativeCall<void>(this, "AMissionType.OnMissionDeactivated"); }
	void OnMissionDinoDamage(APrimalDinoCharacter * Dino, float Damage, const FDamageEvent * DamageEvent, AController * EventInstigator, AActor * DamageCauser) { NativeCall<void, APrimalDinoCharacter *, float, const FDamageEvent *, AController *, AActor *>(this, "AMissionType.OnMissionDinoDamage", Dino, Damage, DamageEvent, EventInstigator, DamageCauser); }
	void OnMissionDinoDied(APrimalDinoCharacter * Dino, float KillingDamage, const FDamageEvent * DamageEvent, AController * Killer, AActor * DamageCauser) { NativeCall<void, APrimalDinoCharacter *, float, const FDamageEvent *, AController *, AActor *>(this, "AMissionType.OnMissionDinoDied", Dino, KillingDamage, DamageEvent, Killer, DamageCauser); }
	void OnMissionDroppedItemPickedUp(ADroppedItemMission * DroppedItem, APlayerController * ByPC, UPrimalItem * InventoryItem) { NativeCall<void, ADroppedItemMission *, APlayerController *, UPrimalItem *>(this, "AMissionType.OnMissionDroppedItemPickedUp", DroppedItem, ByPC, InventoryItem); }
	void OnMissionPlayerDied(AShooterCharacter * Player, AShooterPlayerController * Controller, float KillingDamage, const FDamageEvent * DamageEvent, AController * Killer, AActor * DamageCauser) { NativeCall<void, AShooterCharacter *, AShooterPlayerController *, float, const FDamageEvent *, AController *, AActor *>(this, "AMissionType.OnMissionPlayerDied", Player, Controller, KillingDamage, DamageEvent, Killer, DamageCauser); }
	void OnMissionPlayerRespawned(AShooterCharacter * Player, AShooterPlayerController * Controller) { NativeCall<void, AShooterCharacter *, AShooterPlayerController *>(this, "AMissionType.OnMissionPlayerRespawned", Player, Controller); }
	void OnMissionServerSetup() { NativeCall<void>(this, "AMissionType.OnMissionServerSetup"); }
	void OnMissionStructureDamage(APrimalStructure * Structure, float Damage, const FDamageEvent * DamageEvent, AController * EventInstigator, AActor * DamageCauser) { NativeCall<void, APrimalStructure *, float, const FDamageEvent *, AController *, AActor *>(this, "AMissionType.OnMissionStructureDamage", Structure, Damage, DamageEvent, EventInstigator, DamageCauser); }
	void OnMissionStructureDestroyed(APrimalStructure * Structure, float KillingDamage, const FDamageEvent * DamageEvent, AController * Killer, AActor * DamageCauser) { NativeCall<void, APrimalStructure *, float, const FDamageEvent *, AController *, AActor *>(this, "AMissionType.OnMissionStructureDestroyed", Structure, KillingDamage, DamageEvent, Killer, DamageCauser); }
	void OnMissionSuspended() { NativeCall<void>(this, "AMissionType.OnMissionSuspended"); }
	void OnMissionTriggerBeginOverlap(AMissionTrigger * Trigger, FName TriggerKey, AActor * OtherActor, UPrimitiveComponent * OtherComp, int OtherBodyIndex) { NativeCall<void, AMissionTrigger *, FName, AActor *, UPrimitiveComponent *, int>(this, "AMissionType.OnMissionTriggerBeginOverlap", Trigger, TriggerKey, OtherActor, OtherComp, OtherBodyIndex); }
	void OnMissionTriggerEndOverlap(AMissionTrigger * Trigger, FName TriggerKey, AActor * OtherActor, UPrimitiveComponent * OtherComp, int OtherBodyIndex) { NativeCall<void, AMissionTrigger *, FName, AActor *, UPrimitiveComponent *, int>(this, "AMissionType.OnMissionTriggerEndOverlap", Trigger, TriggerKey, OtherActor, OtherComp, OtherBodyIndex); }
	void OnPlayerAddedToMission(AShooterCharacter * Player, AShooterPlayerController * Controller) { NativeCall<void, AShooterCharacter *, AShooterPlayerController *>(this, "AMissionType.OnPlayerAddedToMission", Player, Controller); }
	void OnPlayerRemovedFromMission(AShooterCharacter * Player, AShooterPlayerController * Controller, bool bFromMissionCompleteEvent, bool bLastPhaseSuccess, bool bRemoveSilently) { NativeCall<void, AShooterCharacter *, AShooterPlayerController *, bool, bool, bool>(this, "AMissionType.OnPlayerRemovedFromMission", Player, Controller, bFromMissionCompleteEvent, bLastPhaseSuccess, bRemoveSilently); }
	void OnPlayerSpawned(AShooterCharacter * playerPawn) { NativeCall<void, AShooterCharacter *>(this, "AMissionType.OnPlayerSpawned", playerPawn); }
	void OnReceivedMissionPathFindingResult(unsigned int Id, ENavigationQueryResult::Type Result, TSharedPtr<FNavigationPath,1> Path) { NativeCall<void, unsigned int, ENavigationQueryResult::Type, TSharedPtr<FNavigationPath,1>>(this, "AMissionType.OnReceivedMissionPathFindingResult", Id, Result, Path); }
	void OnRep_MissionPhaseIndex() { NativeCall<void>(this, "AMissionType.OnRep_MissionPhaseIndex"); }
	void OnRep_MissionState() { NativeCall<void>(this, "AMissionType.OnRep_MissionState"); }
	void OpenLeaderboardsForAllPlayers(const TArray<FLeaderboardRow> * Rows) { NativeCall<void, const TArray<FLeaderboardRow> *>(this, "AMissionType.OpenLeaderboardsForAllPlayers", Rows); }
	void OpenLeaderboardsForPlayer(AShooterCharacter * Player, const TArray<FLeaderboardRow> * Rows) { NativeCall<void, AShooterCharacter *, const TArray<FLeaderboardRow> *>(this, "AMissionType.OpenLeaderboardsForPlayer", Player, Rows); }
	void PlayMissionMusic(USoundBase * LoopingMusicToPlay) { NativeCall<void, USoundBase *>(this, "AMissionType.PlayMissionMusic", LoopingMusicToPlay); }
	void PostLoad() { NativeCall<void>(this, "AMissionType.PostLoad"); }
	void PostLoadWorldFixup() { NativeCall<void>(this, "AMissionType.PostLoadWorldFixup"); }
	void PreInitializeComponents() { NativeCall<void>(this, "AMissionType.PreInitializeComponents"); }
	void ProcessPathResults() { NativeCall<void>(this, "AMissionType.ProcessPathResults"); }
	bool RaceClosestPlayerToCheckpoint_Implementation(const TArray<FRacePlayerData> * PlayerData, const FVector * MissionStartLocation, const TArray<AMissionTrigger *> * Checkpoints, const int * a, const int * b) { return NativeCall<bool, const TArray<FRacePlayerData> *, const FVector *, const TArray<AMissionTrigger *> *, const int *, const int *>(this, "AMissionType.RaceClosestPlayerToCheckpoint_Implementation", PlayerData, MissionStartLocation, Checkpoints, a, b); }
	static bool RacePlayerData_FixupControllers(TArray<FRacePlayerData> * InOutPlayerData) { return NativeCall<bool, TArray<FRacePlayerData> *>(nullptr, "AMissionType.RacePlayerData_FixupControllers", InOutPlayerData); }
	static void RacePlayerData_GetAllPlayerRankings(const TArray<FRacePlayerData> * PlayerData, TArray<int> * OutRankings, const FVector * MissionStartLocation, const TArray<AMissionTrigger *> * Checkpoints) { NativeCall<void, const TArray<FRacePlayerData> *, TArray<int> *, const FVector *, const TArray<AMissionTrigger *> *>(nullptr, "AMissionType.RacePlayerData_GetAllPlayerRankings", PlayerData, OutRankings, MissionStartLocation, Checkpoints); }
	static void RacePlayerData_GetCheckpointData(const TArray<FRacePlayerData> * PlayerData, int PlayerIndex, int CheckpointIndex, bool * bOutCheckpointReached, float * OutCheckpointTime) { NativeCall<void, const TArray<FRacePlayerData> *, int, int, bool *, float *>(nullptr, "AMissionType.RacePlayerData_GetCheckpointData", PlayerData, PlayerIndex, CheckpointIndex, bOutCheckpointReached, OutCheckpointTime); }
	static int RacePlayerData_GetPlayerRanking(const TArray<FRacePlayerData> * PlayerData, const FVector * MissionStartLocation, const TArray<AMissionTrigger *> * Checkpoints, int PlayerIndex) { return NativeCall<int, const TArray<FRacePlayerData> *, const FVector *, const TArray<AMissionTrigger *> *, int>(nullptr, "AMissionType.RacePlayerData_GetPlayerRanking", PlayerData, MissionStartLocation, Checkpoints, PlayerIndex); }
	static int RacePlayerData_GetTargetCheckpoint(const TArray<FRacePlayerData> * PlayerData, int PlayerIndex) { return NativeCall<int, const TArray<FRacePlayerData> *, int>(nullptr, "AMissionType.RacePlayerData_GetTargetCheckpoint", PlayerData, PlayerIndex); }
	static int RacePlayerData_IndexOfController(const TArray<FRacePlayerData> * PlayerData, AShooterPlayerController * Controller) { return NativeCall<int, const TArray<FRacePlayerData> *, AShooterPlayerController *>(nullptr, "AMissionType.RacePlayerData_IndexOfController", PlayerData, Controller); }
	static void RacePlayerData_Initialize(TArray<FRacePlayerData> * InOutPlayerData, const TArray<AShooterPlayerController *> * Controllers, int NumCheckpoints) { NativeCall<void, TArray<FRacePlayerData> *, const TArray<AShooterPlayerController *> *, int>(nullptr, "AMissionType.RacePlayerData_Initialize", InOutPlayerData, Controllers, NumCheckpoints); }
	static int RacePlayerData_NumCheckpoints(const TArray<FRacePlayerData> * PlayerData) { return NativeCall<int, const TArray<FRacePlayerData> *>(nullptr, "AMissionType.RacePlayerData_NumCheckpoints", PlayerData); }
	static void RacePlayerData_SetCheckpointData(TArray<FRacePlayerData> * InOutPlayerData, int PlayerIndex, int CheckpointIndex, bool bCheckpointReached, float CheckpointTime) { NativeCall<void, TArray<FRacePlayerData> *, int, int, bool, float>(nullptr, "AMissionType.RacePlayerData_SetCheckpointData", InOutPlayerData, PlayerIndex, CheckpointIndex, bCheckpointReached, CheckpointTime); }
	static void RacePlayerData_SetTargetCheckpoint(TArray<FRacePlayerData> * InOutPlayerData, int PlayerIndex, int NewTargetCheckpoint) { NativeCall<void, TArray<FRacePlayerData> *, int, int>(nullptr, "AMissionType.RacePlayerData_SetTargetCheckpoint", InOutPlayerData, PlayerIndex, NewTargetCheckpoint); }
	void ReAddPlayerFromReconnect(AShooterCharacter * player) { NativeCall<void, AShooterCharacter *>(this, "AMissionType.ReAddPlayerFromReconnect", player); }
	void ReactivateSuspendedMission() { NativeCall<void>(this, "AMissionType.ReactivateSuspendedMission"); }
	static void RegisterMissionActor(AActor * Actor, FName TriggerKey) { NativeCall<void, AActor *, FName>(nullptr, "AMissionType.RegisterMissionActor", Actor, TriggerKey); }
	void RemoveDinoFromDinoPathing(APrimalDinoCharacter * Dino) { NativeCall<void, APrimalDinoCharacter *>(this, "AMissionType.RemoveDinoFromDinoPathing", Dino); }
	int RemoveItemsFromInventory(UPrimalInventoryComponent * Inventory, TSubclassOf<UPrimalItem> ItemClass, int AmountToRemove, bool bMoveToMissionInventory, bool bExactClassMatch, bool bIgnoreHotbar) { return NativeCall<int, UPrimalInventoryComponent *, TSubclassOf<UPrimalItem>, int, bool, bool, bool>(this, "AMissionType.RemoveItemsFromInventory", Inventory, ItemClass, AmountToRemove, bMoveToMissionInventory, bExactClassMatch, bIgnoreHotbar); }
	int RemoveItemsFromInventory_Balanced(bool * bOutIsBalanced, const TArray<APrimalCharacter *> * FromCharacters, TSubclassOf<UPrimalItem> ItemClass, int TotalAmountToRemove, bool bMoveToMissionInventory, bool bOnlyRemoveIfEnough, bool bExactClassMatch, bool bIgnoreHotbar) { return NativeCall<int, bool *, const TArray<APrimalCharacter *> *, TSubclassOf<UPrimalItem>, int, bool, bool, bool, bool>(this, "AMissionType.RemoveItemsFromInventory_Balanced", bOutIsBalanced, FromCharacters, ItemClass, TotalAmountToRemove, bMoveToMissionInventory, bOnlyRemoveIfEnough, bExactClassMatch, bIgnoreHotbar); }
	void RemovePlayerFromMission(AShooterCharacter * PlayerCharacter, bool bCompletedSuccessfully, bool bRemoveSilently) { NativeCall<void, AShooterCharacter *, bool, bool>(this, "AMissionType.RemovePlayerFromMission", PlayerCharacter, bCompletedSuccessfully, bRemoveSilently); }
	void RemovePlayerUsableItem(AShooterCharacter * Character, FItemNetID ItemID) { NativeCall<void, AShooterCharacter *, FItemNetID>(this, "AMissionType.RemovePlayerUsableItem", Character, ItemID); }
	void ResetMissionTimer() { NativeCall<void>(this, "AMissionType.ResetMissionTimer"); }
	void ResetSplinePoints(APrimalDinoCharacter * ForDino) { NativeCall<void, APrimalDinoCharacter *>(this, "AMissionType.ResetSplinePoints", ForDino); }
	bool ReverseTeleportCharacter(APrimalCharacter * Character) { return NativeCall<bool, APrimalCharacter *>(this, "AMissionType.ReverseTeleportCharacter", Character); }
	void SendMissionAlertToAllPlayers_Implementation(EMissionAlertType::Type AlertType, const FString * AlertTitle, const TArray<FMissionAlertEntry> * AlertEntries, float DisplayTime, USoundBase * SoundToPlay, bool FlyoutFromTop, bool bTreatStringsAsFnameTags) { NativeCall<void, EMissionAlertType::Type, const FString *, const TArray<FMissionAlertEntry> *, float, USoundBase *, bool, bool>(this, "AMissionType.SendMissionAlertToAllPlayers_Implementation", AlertType, AlertTitle, AlertEntries, DisplayTime, SoundToPlay, FlyoutFromTop, bTreatStringsAsFnameTags); }
	void SendMissionAlertToPlayer_Implementation(AShooterCharacter * Player, EMissionAlertType::Type AlertType, const FString * AlertTitle, const TArray<FMissionAlertEntry> * AlertEntries, float DisplayTime, USoundBase * SoundToPlay, bool FlyoutFromTop, bool bTreatStringsAsFnameTags) { NativeCall<void, AShooterCharacter *, EMissionAlertType::Type, const FString *, const TArray<FMissionAlertEntry> *, float, USoundBase *, bool, bool>(this, "AMissionType.SendMissionAlertToPlayer_Implementation", Player, AlertType, AlertTitle, AlertEntries, DisplayTime, SoundToPlay, FlyoutFromTop, bTreatStringsAsFnameTags); }
	void SendMissionCompleteMessages(const FCharacterAndControllerPair * Player, bool bCommpletedSuccessfully, float XPRewarded, TArray<UPrimalItem *> RewardLootItems) { NativeCall<void, const FCharacterAndControllerPair *, bool, float, TArray<UPrimalItem *>>(this, "AMissionType.SendMissionCompleteMessages", Player, bCommpletedSuccessfully, XPRewarded, RewardLootItems); }
	void SendNotificationToAllPlayers(FName StringTagName, const FLinearColor * MessageColor, UTexture2D * MessageIcon, float DisplayTime, float DisplayScale, bool bIsSingleton, USoundBase * SoundToPlay) { NativeCall<void, FName, const FLinearColor *, UTexture2D *, float, float, bool, USoundBase *>(this, "AMissionType.SendNotificationToAllPlayers", StringTagName, MessageColor, MessageIcon, DisplayTime, DisplayScale, bIsSingleton, SoundToPlay); }
	void SendNotificationToPlayer(AShooterCharacter * Player, FName StringTagName, const FLinearColor * MessageColor, UTexture2D * MessageIcon, float DisplayTime, float DisplayScale, bool bIsSingleton, USoundBase * SoundToPlay) { NativeCall<void, AShooterCharacter *, FName, const FLinearColor *, UTexture2D *, float, float, bool, USoundBase *>(this, "AMissionType.SendNotificationToPlayer", Player, StringTagName, MessageColor, MessageIcon, DisplayTime, DisplayScale, bIsSingleton, SoundToPlay); }
	void ServerRequestPlayerEquipWeapon(AShooterCharacter * Character, const FItemNetID * ItemID) { NativeCall<void, AShooterCharacter *, const FItemNetID *>(this, "AMissionType.ServerRequestPlayerEquipWeapon", Character, ItemID); }
	void ServerRequestToggleWeapon_Implementation(AShooterCharacter * Character) { NativeCall<void, AShooterCharacter *>(this, "AMissionType.ServerRequestToggleWeapon_Implementation", Character); }
	bool SetDinoAIForcedTargetActor(APrimalDinoCharacter * Dino, AActor * NewTarget) { return NativeCall<bool, APrimalDinoCharacter *, AActor *>(this, "AMissionType.SetDinoAIForcedTargetActor", Dino, NewTarget); }
	bool SetDinoAINavigationTargetActor(APrimalDinoCharacter * Dino, AActor * NewTarget) { return NativeCall<bool, APrimalDinoCharacter *, AActor *>(this, "AMissionType.SetDinoAINavigationTargetActor", Dino, NewTarget); }
	bool SetDinoAITargetActor(APrimalDinoCharacter * Dino, AActor * NewTarget, float AcceptableRadius) { return NativeCall<bool, APrimalDinoCharacter *, AActor *, float>(this, "AMissionType.SetDinoAITargetActor", Dino, NewTarget, AcceptableRadius); }
	bool SetMissionCompletedStatus(AShooterCharacter * PlayerCharacter, bool bCompleted, bool bUseOverrideVersion, int OverrideVersion, bool bUseOverrideCompleteUtcTime, long double CompleteUtcTime) { return NativeCall<bool, AShooterCharacter *, bool, bool, int, bool, long double>(this, "AMissionType.SetMissionCompletedStatus", PlayerCharacter, bCompleted, bUseOverrideVersion, OverrideVersion, bUseOverrideCompleteUtcTime, CompleteUtcTime); }
	void SetMissionDeactivationTimer(float NumSeconds) { NativeCall<void, float>(this, "AMissionType.SetMissionDeactivationTimer", NumSeconds); }
	void SetMissionMusic_Implementation(USoundBase * LoopingMusicTrack) { NativeCall<void, USoundBase *>(this, "AMissionType.SetMissionMusic_Implementation", LoopingMusicTrack); }
	void SetMissionTimeRemaining(float SecondsRemaining) { NativeCall<void, float>(this, "AMissionType.SetMissionTimeRemaining", SecondsRemaining); }
	void SetPhaseCompleted(int PhaseIndex, bool bCompleted) { NativeCall<void, int, bool>(this, "AMissionType.SetPhaseCompleted", PhaseIndex, bCompleted); }
	static void SetPlayerParticleSystemIndicator(AShooterCharacter * PlayerPawn, UParticleSystem * IndicatorParticles, float RemoveAfterDuration, bool bForceNetUpdate) { NativeCall<void, AShooterCharacter *, UParticleSystem *, float, bool>(nullptr, "AMissionType.SetPlayerParticleSystemIndicator", PlayerPawn, IndicatorParticles, RemoveAfterDuration, bForceNetUpdate); }
	void SetPlayerPrepAreaState_Implementation(AShooterCharacter * PlayerPawn, bool bInsidePrepArea) { NativeCall<void, AShooterCharacter *, bool>(this, "AMissionType.SetPlayerPrepAreaState_Implementation", PlayerPawn, bInsidePrepArea); }
	void SetReverseTeleportReturnLocation(APrimalCharacter * Character, FVector NewLocation, FRotator NewRotation) { NativeCall<void, APrimalCharacter *, FVector, FRotator>(this, "AMissionType.SetReverseTeleportReturnLocation", Character, NewLocation, NewRotation); }
	void SetSpecificSplineKeyTarget(APrimalDinoCharacter * ForDino, int index) { NativeCall<void, APrimalDinoCharacter *, int>(this, "AMissionType.SetSpecificSplineKeyTarget", ForDino, index); }
	void SetupMissionPrepArea(const FVector * PrepAreaWorldLocation, FRotator PrepAreaEmitterRotation, FVector PrepAreaEmitterScale) { NativeCall<void, const FVector *, FRotator, FVector>(this, "AMissionType.SetupMissionPrepArea", PrepAreaWorldLocation, PrepAreaEmitterRotation, PrepAreaEmitterScale); }
	static void SortMissionWorldIndicatorArrayByDistance(FVector WorldLocation, APrimalCharacter * ForCharacter, bool bReverseSort, TArray<FMissionWorldIndicator> * InOutWorldIndicators) { NativeCall<void, FVector, APrimalCharacter *, bool, TArray<FMissionWorldIndicator> *>(nullptr, "AMissionType.SortMissionWorldIndicatorArrayByDistance", WorldLocation, ForCharacter, bReverseSort, InOutWorldIndicators); }
	void SpawnEmitterForPlayers(const TArray<AShooterCharacter *> * Players, TSubclassOf<APrimalEmitterSpawnable> EmitterType, FTransform EmitterTransform, float EmitterLifespan) { NativeCall<void, const TArray<AShooterCharacter *> *, TSubclassOf<APrimalEmitterSpawnable>, FTransform, float>(this, "AMissionType.SpawnEmitterForPlayers", Players, EmitterType, EmitterTransform, EmitterLifespan); }
	APrimalDinoCharacter * SpawnMissionDino(FVector SpawnLocation, FRotator SpawnRotation, const FDinoSetup * DinoSetup, AShooterPlayerController * OwnerPlayerController, float DebugDrawDuration, bool bApplyRotationToSpawnOffset, UBehaviorTree * OverrideMissionBehaviorTree, bool bDontWander, bool bTargetingIgnoredByWildDinos, bool bTargetingIgnoreWildDinos, float AIRangeMultiplier, TSubclassOf<UPrimalColorSet> ColorSet, bool bDoLosCheck, bool bDoOverlapCheck) { return NativeCall<APrimalDinoCharacter *, FVector, FRotator, const FDinoSetup *, AShooterPlayerController *, float, bool, UBehaviorTree *, bool, bool, bool, float, TSubclassOf<UPrimalColorSet>, bool, bool>(this, "AMissionType.SpawnMissionDino", SpawnLocation, SpawnRotation, DinoSetup, OwnerPlayerController, DebugDrawDuration, bApplyRotationToSpawnOffset, OverrideMissionBehaviorTree, bDontWander, bTargetingIgnoredByWildDinos, bTargetingIgnoreWildDinos, AIRangeMultiplier, ColorSet, bDoLosCheck, bDoOverlapCheck); }
	TArray<APrimalDinoCharacter *> * SpawnMissionDinoGroup(TArray<APrimalDinoCharacter *> * result, int NumDinos, float SpawnRadius, FVector SpawnLocation, FRotator SpawnRotation, const FDinoSetup * DinoSetup, TEnumAsByte<enum ESpawnPattern::Type> Pattern, AShooterPlayerController * OwnerPlayerController, float DebugDrawDuration, bool bApplyRotationToSpawnOffset, UBehaviorTree * OverrideMissionBehaviorTree, bool bDontWander, bool bTargetingIgnoredByWildDinos, bool bTargetingIgnoreWildDinos, float AIRangeMultiplier) { return NativeCall<TArray<APrimalDinoCharacter *> *, TArray<APrimalDinoCharacter *> *, int, float, FVector, FRotator, const FDinoSetup *, TEnumAsByte<enum ESpawnPattern::Type>, AShooterPlayerController *, float, bool, UBehaviorTree *, bool, bool, bool, float>(this, "AMissionType.SpawnMissionDinoGroup", result, NumDinos, SpawnRadius, SpawnLocation, SpawnRotation, DinoSetup, Pattern, OwnerPlayerController, DebugDrawDuration, bApplyRotationToSpawnOffset, OverrideMissionBehaviorTree, bDontWander, bTargetingIgnoredByWildDinos, bTargetingIgnoreWildDinos, AIRangeMultiplier); }
	TArray<APrimalDinoCharacter *> * SpawnMissionDinoGroupExtended(TArray<APrimalDinoCharacter *> * result, int NumDinos, float SpawnRadius, FVector SpawnLocation, FRotator SpawnRotation, const TArray<FDinoSetup> * DinoSetups, TEnumAsByte<enum ESpawnPattern::Type> Pattern, AShooterPlayerController * OwnerPlayerController, float DebugDrawDuration, bool bApplyRotationToSpawnOffset, UBehaviorTree * OverrideMissionBehaviorTree, bool bRandomizeDinos, bool bDontWander, bool bTargetingIgnoredByWildDinos, bool bTargetingIgnoreWildDinos, float AIRangeMultiplier, TSubclassOf<UPrimalColorSet> ColorSet, bool bDoLosCheck, bool bDoOverlapCheck) { return NativeCall<TArray<APrimalDinoCharacter *> *, TArray<APrimalDinoCharacter *> *, int, float, FVector, FRotator, const TArray<FDinoSetup> *, TEnumAsByte<enum ESpawnPattern::Type>, AShooterPlayerController *, float, bool, UBehaviorTree *, bool, bool, bool, bool, float, TSubclassOf<UPrimalColorSet>, bool, bool>(this, "AMissionType.SpawnMissionDinoGroupExtended", result, NumDinos, SpawnRadius, SpawnLocation, SpawnRotation, DinoSetups, Pattern, OwnerPlayerController, DebugDrawDuration, bApplyRotationToSpawnOffset, OverrideMissionBehaviorTree, bRandomizeDinos, bDontWander, bTargetingIgnoredByWildDinos, bTargetingIgnoreWildDinos, AIRangeMultiplier, ColorSet, bDoLosCheck, bDoOverlapCheck); }
	void Stasis() { NativeCall<void>(this, "AMissionType.Stasis"); }
	static bool StaticGetDifficultyAsInt(ENativeMissionMetaTag::Type tag, int * diffInt) { return NativeCall<bool, ENativeMissionMetaTag::Type, int *>(nullptr, "AMissionType.StaticGetDifficultyAsInt", tag, diffInt); }
	static bool StaticGetDifficultyString(ENativeMissionMetaTag::Type tag, FString * diffString, FLinearColor * diffColor) { return NativeCall<bool, ENativeMissionMetaTag::Type, FString *, FLinearColor *>(nullptr, "AMissionType.StaticGetDifficultyString", tag, diffString, diffColor); }
	static bool StaticGetTaggedString(TSubclassOf<AMissionType> MissionType, FName Tag, FString * OutString) { return NativeCall<bool, TSubclassOf<AMissionType>, FName, FString *>(nullptr, "AMissionType.StaticGetTaggedString", MissionType, Tag, OutString); }
	void StopMissionMusic() { NativeCall<void>(this, "AMissionType.StopMissionMusic"); }
	void SuspendMission() { NativeCall<void>(this, "AMissionType.SuspendMission"); }
	bool TeleportCharacterForMission(APrimalCharacter * Character, FVector NewLocation, bool bOverrideRotation, FRotator RotationOverride, bool bForceSetReturnLocation, bool bWasMountedDino, bool bSkipDinoFailChecks) { return NativeCall<bool, APrimalCharacter *, FVector, bool, FRotator, bool, bool, bool>(this, "AMissionType.TeleportCharacterForMission", Character, NewLocation, bOverrideRotation, RotationOverride, bForceSetReturnLocation, bWasMountedDino, bSkipDinoFailChecks); }
	void Tick(float DeltaTime) { NativeCall<void, float>(this, "AMissionType.Tick", DeltaTime); }
	static float TotalCurrentHealth_Players(const TArray<AShooterCharacter *> * PlayerArray) { return NativeCall<float, const TArray<AShooterCharacter *> *>(nullptr, "AMissionType.TotalCurrentHealth_Players", PlayerArray); }
	static float TotalMaxHealth_Players(const TArray<AShooterCharacter *> * PlayerArray) { return NativeCall<float, const TArray<AShooterCharacter *> *>(nullptr, "AMissionType.TotalMaxHealth_Players", PlayerArray); }
	bool TryChangeMissionPhase(FName NewPhase, bool bForceChange) { return NativeCall<bool, FName, bool>(this, "AMissionType.TryChangeMissionPhase", NewPhase, bForceChange); }
	void TryChangeMissionPhase_FromTimer() { NativeCall<void>(this, "AMissionType.TryChangeMissionPhase_FromTimer"); }
	bool TryCompletePhase(bool bForceChange) { return NativeCall<bool, bool>(this, "AMissionType.TryCompletePhase", bForceChange); }
	static void UnregisterMissionActor(AActor * Actor, FName TriggerKey) { NativeCall<void, AActor *, FName>(nullptr, "AMissionType.UnregisterMissionActor", Actor, TriggerKey); }
	void Unstasis() { NativeCall<void>(this, "AMissionType.Unstasis"); }
	void UpdateMissionPrepArea(const FVector * PrepAreaWorldLocation, float MinUpdateFrequencyInSeconds) { NativeCall<void, const FVector *, float>(this, "AMissionType.UpdateMissionPrepArea", PrepAreaWorldLocation, MinUpdateFrequencyInSeconds); }
	void UpdateRequirements(bool bForceNetUpdate) { NativeCall<void, bool>(this, "AMissionType.UpdateRequirements", bForceNetUpdate); }
	void UpdateWorldIndicators(bool bForceNetUpdate) { NativeCall<void, bool>(this, "AMissionType.UpdateWorldIndicators", bForceNetUpdate); }
	void BPOnMissionTriggerBeginOverlap_Implementation(UContextMenu * ContextMenu, UContextMenuItem * NewActiveItem, UContextMenuItem * OldActiveItem) { NativeCall<void, UContextMenu *, UContextMenuItem *, UContextMenuItem *>(this, "AMissionType.BPOnMissionTriggerBeginOverlap_Implementation", ContextMenu, NewActiveItem, OldActiveItem); }
	void BPOnMissionDinoDamage_Implementation(APrimalStructure * Structure, float KillingDamage, const FDamageEvent * DamageEvent, AController * Killer, AActor * DamageCauser) { NativeCall<void, APrimalStructure *, float, const FDamageEvent *, AController *, AActor *>(this, "AMissionType.BPOnMissionDinoDamage_Implementation", Structure, KillingDamage, DamageEvent, Killer, DamageCauser); }
	bool AllowMissionCreation(AShooterCharacter * ForCharacter, const FVector * Location, AActor * MissionDispatcherActor, FString * FailureReason) { return NativeCall<bool, AShooterCharacter *, const FVector *, AActor *, FString *>(this, "AMissionType.AllowMissionCreation", ForCharacter, Location, MissionDispatcherActor, FailureReason); }
	bool BPAllowPlayerToLeaveMission(AShooterCharacter * PlayerPawn) { return NativeCall<bool, AShooterCharacter *>(this, "AMissionType.BPAllowPlayerToLeaveMission", PlayerPawn); }
	bool BPAllowTimeout() { return NativeCall<bool>(this, "AMissionType.BPAllowTimeout"); }
	bool BPCanRideMissionDino(AShooterCharacter * Character, APrimalDinoCharacter * Dino) { return NativeCall<bool, AShooterCharacter *, APrimalDinoCharacter *>(this, "AMissionType.BPCanRideMissionDino", Character, Dino); }
	void BPGenerateMissionRewards(FCharacterAndControllerPair Player, bool bCompletedSuccessfully, float * XPReward, TArray<UPrimalItem *> * GeneratedItems) { NativeCall<void, FCharacterAndControllerPair, bool, float *, TArray<UPrimalItem *> *>(this, "AMissionType.BPGenerateMissionRewards", Player, bCompletedSuccessfully, XPReward, GeneratedItems); }
	void BPGetExtraLocalMissionIndicators(APlayerController * Controller, AShooterCharacter * PlayerPawn, const TArray<FMissionWorldIndicator> * IndicatorsIn, TArray<FMissionWorldIndicator> * IndicatorsOut) { NativeCall<void, APlayerController *, AShooterCharacter *, const TArray<FMissionWorldIndicator> *, TArray<FMissionWorldIndicator> *>(this, "AMissionType.BPGetExtraLocalMissionIndicators", Controller, PlayerPawn, IndicatorsIn, IndicatorsOut); }
	void BPGetMetaTagsAsInts(TArray<int> * OutTagIds) { NativeCall<void, TArray<int> *>(this, "AMissionType.BPGetMetaTagsAsInts", OutTagIds); }
	FString * BPGetMissionDurationText(FString * result, AShooterPlayerController * ShootCont) { return NativeCall<FString *, FString *, AShooterPlayerController *>(this, "AMissionType.BPGetMissionDurationText", result, ShootCont); }
	float BPGetMissionTargetingDesire(APrimalDinoCharacter * MissionDino, AActor * ForTarget, float ForTargetingDesireValue) { return NativeCall<float, APrimalDinoCharacter *, AActor *, float>(this, "AMissionType.BPGetMissionTargetingDesire", MissionDino, ForTarget, ForTargetingDesireValue); }
	FString * BPGetMissionTimerText(FString * result, AShooterPlayerController * ShootCont) { return NativeCall<FString *, FString *, AShooterPlayerController *>(this, "AMissionType.BPGetMissionTimerText", result, ShootCont); }
	FString * BPGetPhaseDisplayText(FString * result, FName PhaseName) { return NativeCall<FString *, FString *, FName>(this, "AMissionType.BPGetPhaseDisplayText", result, PhaseName); }
	bool BPIsPhaseComplete(FName PhaseName) { return NativeCall<bool, FName>(this, "AMissionType.BPIsPhaseComplete", PhaseName); }
	void BPOnMissionActivated() { NativeCall<void>(this, "AMissionType.BPOnMissionActivated"); }
	void BPOnMissionCheat(FName CheatName, bool bSetValue, float Value) { NativeCall<void, FName, bool, float>(this, "AMissionType.BPOnMissionCheat", CheatName, bSetValue, Value); }
	void BPOnMissionComplete(AShooterCharacter * ForPlayer, AShooterPlayerController * ForController, bool bLastPhaseSuccess, float XPRewarded, const TArray<UPrimalItem *> * ItemsRewarded) { NativeCall<void, AShooterCharacter *, AShooterPlayerController *, bool, float, const TArray<UPrimalItem *> *>(this, "AMissionType.BPOnMissionComplete", ForPlayer, ForController, bLastPhaseSuccess, XPRewarded, ItemsRewarded); }
	void BPOnMissionDeactivated() { NativeCall<void>(this, "AMissionType.BPOnMissionDeactivated"); }
	void BPOnMissionDinoDamage(APrimalDinoCharacter * Dino, float Damage, const FDamageEvent * DamageEvent, AController * EventInstigator, AActor * DamageCauser) { NativeCall<void, APrimalDinoCharacter *, float, const FDamageEvent *, AController *, AActor *>(this, "AMissionType.BPOnMissionDinoDamage", Dino, Damage, DamageEvent, EventInstigator, DamageCauser); }
	void BPOnMissionDinoDied(APrimalDinoCharacter * Dino, float KillingDamage, const FDamageEvent * DamageEvent, AController * Killer, AActor * DamageCauser) { NativeCall<void, APrimalDinoCharacter *, float, const FDamageEvent *, AController *, AActor *>(this, "AMissionType.BPOnMissionDinoDied", Dino, KillingDamage, DamageEvent, Killer, DamageCauser); }
	void BPOnMissionDroppedItemPickedUp(ADroppedItemMission * DroppedItem, APlayerController * ByPC, UPrimalItem * InventoryItem) { NativeCall<void, ADroppedItemMission *, APlayerController *, UPrimalItem *>(this, "AMissionType.BPOnMissionDroppedItemPickedUp", DroppedItem, ByPC, InventoryItem); }
	void BPOnMissionPlayerAddedInventoryItem(AShooterCharacter * Player, UPrimalInventoryComponent * Inventory, UPrimalItem * Item, int AmountAdded, bool bEquippedItem) { NativeCall<void, AShooterCharacter *, UPrimalInventoryComponent *, UPrimalItem *, int, bool>(this, "AMissionType.BPOnMissionPlayerAddedInventoryItem", Player, Inventory, Item, AmountAdded, bEquippedItem); }
	void BPOnMissionPlayerDied(AShooterCharacter * Player, AShooterPlayerController * Controller, float KillingDamage, const FDamageEvent * DamageEvent, AController * Killer, AActor * DamageCauser) { NativeCall<void, AShooterCharacter *, AShooterPlayerController *, float, const FDamageEvent *, AController *, AActor *>(this, "AMissionType.BPOnMissionPlayerDied", Player, Controller, KillingDamage, DamageEvent, Killer, DamageCauser); }
	void BPOnMissionPlayerRemovedInventoryItem(AShooterCharacter * Player, UPrimalInventoryComponent * Inventory, UPrimalItem * Item, int AmountRemoved) { NativeCall<void, AShooterCharacter *, UPrimalInventoryComponent *, UPrimalItem *, int>(this, "AMissionType.BPOnMissionPlayerRemovedInventoryItem", Player, Inventory, Item, AmountRemoved); }
	void BPOnMissionPlayerRespawned(AShooterCharacter * Player, AShooterPlayerController * Controller) { NativeCall<void, AShooterCharacter *, AShooterPlayerController *>(this, "AMissionType.BPOnMissionPlayerRespawned", Player, Controller); }
	void BPOnMissionServerSetup() { NativeCall<void>(this, "AMissionType.BPOnMissionServerSetup"); }
	void BPOnMissionStructureDamage(APrimalStructure * Structure, float Damage, const FDamageEvent * DamageEvent, AController * EventInstigator, AActor * DamageCauser) { NativeCall<void, APrimalStructure *, float, const FDamageEvent *, AController *, AActor *>(this, "AMissionType.BPOnMissionStructureDamage", Structure, Damage, DamageEvent, EventInstigator, DamageCauser); }
	void BPOnMissionStructureDestroyed(APrimalStructure * Structure, float KillingDamage, const FDamageEvent * DamageEvent, AController * Killer, AActor * DamageCauser) { NativeCall<void, APrimalStructure *, float, const FDamageEvent *, AController *, AActor *>(this, "AMissionType.BPOnMissionStructureDestroyed", Structure, KillingDamage, DamageEvent, Killer, DamageCauser); }
	void BPOnMissionSuspended() { NativeCall<void>(this, "AMissionType.BPOnMissionSuspended"); }
	void BPOnMissionTimedOut() { NativeCall<void>(this, "AMissionType.BPOnMissionTimedOut"); }
	void BPOnMissionTriggerBeginOverlap(AMissionTrigger * Trigger, AActor * OtherActor, UPrimitiveComponent * OtherComp, int OtherBodyIndex) { NativeCall<void, AMissionTrigger *, AActor *, UPrimitiveComponent *, int>(this, "AMissionType.BPOnMissionTriggerBeginOverlap", Trigger, OtherActor, OtherComp, OtherBodyIndex); }
	void BPOnMissionTriggerEndOverlap(AMissionTrigger * Trigger, AActor * OtherActor, UPrimitiveComponent * OtherComp, int OtherBodyIndex) { NativeCall<void, AMissionTrigger *, AActor *, UPrimitiveComponent *, int>(this, "AMissionType.BPOnMissionTriggerEndOverlap", Trigger, OtherActor, OtherComp, OtherBodyIndex); }
	void BPOnPlayerAddedToMission(AShooterCharacter * Player, AShooterPlayerController * Controller) { NativeCall<void, AShooterCharacter *, AShooterPlayerController *>(this, "AMissionType.BPOnPlayerAddedToMission", Player, Controller); }
	void BPOnPlayerRemovedFromMission(AShooterCharacter * Player, AShooterPlayerController * Controller, bool bFromMissionCompleteEvent, bool bLastPhaseSuccess) { NativeCall<void, AShooterCharacter *, AShooterPlayerController *, bool, bool>(this, "AMissionType.BPOnPlayerRemovedFromMission", Player, Controller, bFromMissionCompleteEvent, bLastPhaseSuccess); }
	void BPOnReceivedMissionPathFindingResult(int Id, UNavigationPath * Path, char Result) { NativeCall<void, int, UNavigationPath *, char>(this, "AMissionType.BPOnReceivedMissionPathFindingResult", Id, Path, Result); }
	FString * BPOverrideMissionIndicatorString(FString * result, AShooterCharacter * ForCharacter, FMissionWorldIndicator Indicator, const FString * String) { return NativeCall<FString *, FString *, AShooterCharacter *, FMissionWorldIndicator, const FString *>(this, "AMissionType.BPOverrideMissionIndicatorString", result, ForCharacter, Indicator, String); }
	bool BPOverrideMissionTimerColor(const AShooterPlayerController * ShooterContr, const FLinearColor * DefaultColor, const FLinearColor * CurrentColor, FLinearColor * TimerOverrideColor) { return NativeCall<bool, const AShooterPlayerController *, const FLinearColor *, const FLinearColor *, FLinearColor *>(this, "AMissionType.BPOverrideMissionTimerColor", ShooterContr, DefaultColor, CurrentColor, TimerOverrideColor); }
	bool BPOverrideRandomWanderLocation(APrimalDinoCharacter * Dino, const FVector * inVec, FVector * outVec) { return NativeCall<bool, APrimalDinoCharacter *, const FVector *, FVector *>(this, "AMissionType.BPOverrideRandomWanderLocation", Dino, inVec, outVec); }
	bool BPStaticCanStartMission(APlayerController * Controller, AShooterCharacter * PlayerPawn, APrimalBuff_MissionData * PlayerMissionData, FString * ClientFailureReason, AActor ** OutSelectedMissionDispatcher) { return NativeCall<bool, APlayerController *, AShooterCharacter *, APrimalBuff_MissionData *, FString *, AActor **>(this, "AMissionType.BPStaticCanStartMission", Controller, PlayerPawn, PlayerMissionData, ClientFailureReason, OutSelectedMissionDispatcher); }
	bool BPStaticIsPlayerEligibleForMission(APlayerController * Controller, AShooterCharacter * PlayerPawn, APrimalBuff_MissionData * PlayerMissionData, FString * OutReason) { return NativeCall<bool, APlayerController *, AShooterCharacter *, APrimalBuff_MissionData *, FString *>(this, "AMissionType.BPStaticIsPlayerEligibleForMission", Controller, PlayerPawn, PlayerMissionData, OutReason); }
	bool BPTryCompletePhase(FName PhaseName) { return NativeCall<bool, FName>(this, "AMissionType.BPTryCompletePhase", PhaseName); }
	bool CanStartPhase(FName PhaseName) { return NativeCall<bool, FName>(this, "AMissionType.CanStartPhase", PhaseName); }
	void GeneratePerPlayerPhaseRequirements(AShooterPlayerController * Controller, AShooterCharacter * Character, FName PhaseName, TArray<FMissionPhaseRequirement> * Requirements) { NativeCall<void, AShooterPlayerController *, AShooterCharacter *, FName, TArray<FMissionPhaseRequirement> *>(this, "AMissionType.GeneratePerPlayerPhaseRequirements", Controller, Character, PhaseName, Requirements); }
	void GeneratePhaseRequirements(FName PhaseName, TArray<FMissionPhaseRequirement> * Requirements) { NativeCall<void, FName, TArray<FMissionPhaseRequirement> *>(this, "AMissionType.GeneratePhaseRequirements", PhaseName, Requirements); }
	void GetCurrentWorldIndicators(TArray<FMissionWorldIndicator> * WorldIndicators) { NativeCall<void, TArray<FMissionWorldIndicator> *>(this, "AMissionType.GetCurrentWorldIndicators", WorldIndicators); }
	int GetIntFromMissionType(FName Tag, AShooterCharacter * PlayerPawn) { return NativeCall<int, FName, AShooterCharacter *>(this, "AMissionType.GetIntFromMissionType", Tag, PlayerPawn); }
	FString * GetMissionDisplayName(FString * result, APlayerController * ShootCont) { return NativeCall<FString *, FString *, APlayerController *>(this, "AMissionType.GetMissionDisplayName", result, ShootCont); }
	void GetPerPlayerWorldIndicators(AShooterPlayerController * Controller, AShooterCharacter * Character, TArray<FMissionWorldIndicator> * WorldIndicators) { NativeCall<void, AShooterPlayerController *, AShooterCharacter *, TArray<FMissionWorldIndicator> *>(this, "AMissionType.GetPerPlayerWorldIndicators", Controller, Character, WorldIndicators); }
	bool IsMissionComplete(AShooterCharacter * ForCharacter, AShooterPlayerController * ForController) { return NativeCall<bool, AShooterCharacter *, AShooterPlayerController *>(this, "AMissionType.IsMissionComplete", ForCharacter, ForController); }
	void MultiMissionPhaseEnded(FName OldPhaseName, FName NewPhaseName) { NativeCall<void, FName, FName>(this, "AMissionType.MultiMissionPhaseEnded", OldPhaseName, NewPhaseName); }
	void MultiMissionPhaseStarted(FName OldPhaseName, FName NewPhaseName) { NativeCall<void, FName, FName>(this, "AMissionType.MultiMissionPhaseStarted", OldPhaseName, NewPhaseName); }
	void MultiMissionStateChange(EMissionState::Type NewState) { NativeCall<void, EMissionState::Type>(this, "AMissionType.MultiMissionStateChange", NewState); }
	void MultiResetMissionTimer(long double NewMissionStartNetworkTime) { NativeCall<void, long double>(this, "AMissionType.MultiResetMissionTimer", NewMissionStartNetworkTime); }
	void OnMissionPhaseEnded(FName OldPhase, FName NewPhase) { NativeCall<void, FName, FName>(this, "AMissionType.OnMissionPhaseEnded", OldPhase, NewPhase); }
	void OnMissionPhaseStarted(FName OldPhase, FName NewPhase) { NativeCall<void, FName, FName>(this, "AMissionType.OnMissionPhaseStarted", OldPhase, NewPhase); }
	void OnThrottledClientTick(float DeltaTime) { NativeCall<void, float>(this, "AMissionType.OnThrottledClientTick", DeltaTime); }
	void OnThrottledServerTick(float DeltaTime) { NativeCall<void, float>(this, "AMissionType.OnThrottledServerTick", DeltaTime); }
	void OnUpdateRequirements(FName PhaseName, const TArray<FMissionPhaseRequirement> * NewRequirements) { NativeCall<void, FName, const TArray<FMissionPhaseRequirement> *>(this, "AMissionType.OnUpdateRequirements", PhaseName, NewRequirements); }
	bool RaceClosestPlayerToCheckpoint(const TArray<FRacePlayerData> * PlayerData, const FVector * MissionStartLocation, const TArray<AMissionTrigger *> * Checkpoints, const int * a, const int * b) { return NativeCall<bool, const TArray<FRacePlayerData> *, const FVector *, const TArray<AMissionTrigger *> *, const int *, const int *>(this, "AMissionType.RaceClosestPlayerToCheckpoint", PlayerData, MissionStartLocation, Checkpoints, a, b); }
	void SendMissionAlertToPlayer(AShooterCharacter * Player, EMissionAlertType::Type AlertType, const FString * AlertTitle, const TArray<FMissionAlertEntry> * AlertEntries, float DisplayTime, USoundBase * SoundToPlay, bool FlyoutFromTop, bool bTreatStringsAsFnameTags) { NativeCall<void, AShooterCharacter *, EMissionAlertType::Type, const FString *, const TArray<FMissionAlertEntry> *, float, USoundBase *, bool, bool>(this, "AMissionType.SendMissionAlertToPlayer", Player, AlertType, AlertTitle, AlertEntries, DisplayTime, SoundToPlay, FlyoutFromTop, bTreatStringsAsFnameTags); }
	void SetMissionMusic(USoundBase * LoopingMusicTrack) { NativeCall<void, USoundBase *>(this, "AMissionType.SetMissionMusic", LoopingMusicTrack); }
	void SetPlayerPrepAreaState(AShooterCharacter * PlayerPawn, bool bInsidePrepArea) { NativeCall<void, AShooterCharacter *, bool>(this, "AMissionType.SetPlayerPrepAreaState", PlayerPawn, bInsidePrepArea); }
	void StaticOnMissionDataInitialized(APrimalBuff_MissionData * missionData) { NativeCall<void, APrimalBuff_MissionData *>(this, "AMissionType.StaticOnMissionDataInitialized", missionData); }
	void StaticOnReplicatedMissionDataUpdated(APrimalBuff_MissionData * missionData) { NativeCall<void, APrimalBuff_MissionData *>(this, "AMissionType.StaticOnReplicatedMissionDataUpdated", missionData); }
};

struct AMissionType_ModularMissionBase : AMissionType
{
	char __padding[0x90L];
	TArray<TSubclassOf<UNewMissionModuleBase>>& ModulesField() { return *GetNativePointerField<TArray<TSubclassOf<UNewMissionModuleBase>>*>(this, "AMissionType_ModularMissionBase.Modules"); }
	float& DelayBeforeInitalModuleField() { return *GetNativePointerField<float*>(this, "AMissionType_ModularMissionBase.DelayBeforeInitalModule"); }
	float& MissionTimeRemainingAfterEscapePhaseField() { return *GetNativePointerField<float*>(this, "AMissionType_ModularMissionBase.MissionTimeRemainingAfterEscapePhase"); }
	int& CurrModuleField() { return *GetNativePointerField<int*>(this, "AMissionType_ModularMissionBase.CurrModule"); }
	FName& CurrRequirementsTitleField() { return *GetNativePointerField<FName*>(this, "AMissionType_ModularMissionBase.CurrRequirementsTitle"); }
	UNewMissionModuleBase * CurrentModuleField() { return GetNativePointerField<UNewMissionModuleBase *>(this, "AMissionType_ModularMissionBase.CurrentModule"); }
	long double& CurrentModuleStartTimeField() { return *GetNativePointerField<long double*>(this, "AMissionType_ModularMissionBase.CurrentModuleStartTime"); }
	float& CurrentModuleTimeLimitField() { return *GetNativePointerField<float*>(this, "AMissionType_ModularMissionBase.CurrentModuleTimeLimit"); }
	int& NumDeadMissionDinosField() { return *GetNativePointerField<int*>(this, "AMissionType_ModularMissionBase.NumDeadMissionDinos"); }
	int& NumDestroyedMissionStructuresField() { return *GetNativePointerField<int*>(this, "AMissionType_ModularMissionBase.NumDestroyedMissionStructures"); }
	TArray<FMissionWorldIndicator>& SpecialWorldIndicatorsField() { return *GetNativePointerField<TArray<FMissionWorldIndicator>*>(this, "AMissionType_ModularMissionBase.SpecialWorldIndicators"); }
	TArray<UNewMissionModuleBase *>& AdditionalModulesField() { return *GetNativePointerField<TArray<UNewMissionModuleBase *>*>(this, "AMissionType_ModularMissionBase.AdditionalModules"); }

	// Functions

	void ActivateWarmerColderHUD_Implementation(FHUDElement Background, FHUDElement Icon, float MinAlpha, float MaxAlpha, float AlphaPower, FLinearColor RightColor, FLinearColor WrongColor, bool bClearLocationsFirst, const TArray<FVector> * Locations) { NativeCall<void, FHUDElement, FHUDElement, float, float, float, FLinearColor, FLinearColor, bool, const TArray<FVector> *>(this, "AMissionType_ModularMissionBase.ActivateWarmerColderHUD_Implementation", Background, Icon, MinAlpha, MaxAlpha, AlphaPower, RightColor, WrongColor, bClearLocationsFirst, Locations); }
	void AddSpecialWorldIndicator_Implementation(FMissionWorldIndicator IndicatorToAdd) { NativeCall<void, FMissionWorldIndicator>(this, "AMissionType_ModularMissionBase.AddSpecialWorldIndicator_Implementation", IndicatorToAdd); }
	float BPGetMissionTargetingDesire_Implementation(APrimalDinoCharacter * MissionDino, AActor * ForTarget, float ForTargetingDesireValue) { return NativeCall<float, APrimalDinoCharacter *, AActor *, float>(this, "AMissionType_ModularMissionBase.BPGetMissionTargetingDesire_Implementation", MissionDino, ForTarget, ForTargetingDesireValue); }
	FString * BPGetMissionTimerText_Implementation(FString * result, AShooterPlayerController * ShootCont) { return NativeCall<FString *, FString *, AShooterPlayerController *>(this, "AMissionType_ModularMissionBase.BPGetMissionTimerText_Implementation", result, ShootCont); }
	FString * BPGetPhaseDisplayText_Implementation(FString * result, FName PhaseName) { return NativeCall<FString *, FString *, FName>(this, "AMissionType_ModularMissionBase.BPGetPhaseDisplayText_Implementation", result, PhaseName); }
	bool BPIsPhaseComplete_Implementation(FName PhaseName) { return NativeCall<bool, FName>(this, "AMissionType_ModularMissionBase.BPIsPhaseComplete_Implementation", PhaseName); }
	void BPOnMissionComplete_Implementation(AShooterCharacter * ForPlayer, AShooterPlayerController * ForController, bool bLastPhaseSuccess, float XPRewarded, const TArray<UPrimalItem *> * ItemsRewarded) { NativeCall<void, AShooterCharacter *, AShooterPlayerController *, bool, float, const TArray<UPrimalItem *> *>(this, "AMissionType_ModularMissionBase.BPOnMissionComplete_Implementation", ForPlayer, ForController, bLastPhaseSuccess, XPRewarded, ItemsRewarded); }
	void BPOnMissionDeactivated_Implementation() { NativeCall<void>(this, "AMissionType_ModularMissionBase.BPOnMissionDeactivated_Implementation"); }
	void BPOnMissionDinoDamage_Implementation(APrimalDinoCharacter * Dino, float Damage, const FDamageEvent * DamageEvent, AController * EventInstigator, AActor * DamageCauser) { NativeCall<void, APrimalDinoCharacter *, float, const FDamageEvent *, AController *, AActor *>(this, "AMissionType_ModularMissionBase.BPOnMissionDinoDamage_Implementation", Dino, Damage, DamageEvent, EventInstigator, DamageCauser); }
	void BPOnMissionDinoDied_Implementation(APrimalDinoCharacter * Dino, float KillingDamage, const FDamageEvent * DamageEvent, AController * Killer, AActor * DamageCauser) { NativeCall<void, APrimalDinoCharacter *, float, const FDamageEvent *, AController *, AActor *>(this, "AMissionType_ModularMissionBase.BPOnMissionDinoDied_Implementation", Dino, KillingDamage, DamageEvent, Killer, DamageCauser); }
	void BPOnMissionDroppedItemPickedUp_Implementation(ADroppedItemMission * DroppedItem, APlayerController * ByPC, UPrimalItem * InventoryItem) { NativeCall<void, ADroppedItemMission *, APlayerController *, UPrimalItem *>(this, "AMissionType_ModularMissionBase.BPOnMissionDroppedItemPickedUp_Implementation", DroppedItem, ByPC, InventoryItem); }
	void BPOnMissionPlayerAddedInventoryItem_Implementation(AShooterCharacter * Player, UPrimalInventoryComponent * Inventory, UPrimalItem * Item, int AmountAdded, bool bEquippedItem) { NativeCall<void, AShooterCharacter *, UPrimalInventoryComponent *, UPrimalItem *, int, bool>(this, "AMissionType_ModularMissionBase.BPOnMissionPlayerAddedInventoryItem_Implementation", Player, Inventory, Item, AmountAdded, bEquippedItem); }
	void BPOnMissionPlayerRemovedInventoryItem_Implementation(AShooterCharacter * Player, UPrimalInventoryComponent * Inventory, UPrimalItem * Item, int AmountRemoved) { NativeCall<void, AShooterCharacter *, UPrimalInventoryComponent *, UPrimalItem *, int>(this, "AMissionType_ModularMissionBase.BPOnMissionPlayerRemovedInventoryItem_Implementation", Player, Inventory, Item, AmountRemoved); }
	void BPOnMissionProjectileExpoloded_Implementation(AShooterProjectile * TheProjectile) { NativeCall<void, AShooterProjectile *>(this, "AMissionType_ModularMissionBase.BPOnMissionProjectileExpoloded_Implementation", TheProjectile); }
	void BPOnMissionServerSetup_Implementation() { NativeCall<void>(this, "AMissionType_ModularMissionBase.BPOnMissionServerSetup_Implementation"); }
	void BPOnMissionStructureDamage_Implementation(APrimalStructure * Structure, float Damage, const FDamageEvent * DamageEvent, AController * EventInstigator, AActor * DamageCauser) { NativeCall<void, APrimalStructure *, float, const FDamageEvent *, AController *, AActor *>(this, "AMissionType_ModularMissionBase.BPOnMissionStructureDamage_Implementation", Structure, Damage, DamageEvent, EventInstigator, DamageCauser); }
	void BPOnMissionStructureDestroyed_Implementation(APrimalStructure * Structure, float KillingDamage, const FDamageEvent * DamageEvent, AController * Killer, AActor * DamageCauser) { NativeCall<void, APrimalStructure *, float, const FDamageEvent *, AController *, AActor *>(this, "AMissionType_ModularMissionBase.BPOnMissionStructureDestroyed_Implementation", Structure, KillingDamage, DamageEvent, Killer, DamageCauser); }
	void BPOnMissionTriggerBeginOverlap_Implementation(AMissionTrigger * Trigger, AActor * OtherActor, UPrimitiveComponent * OtherComp, int OtherBodyIndex) { NativeCall<void, AMissionTrigger *, AActor *, UPrimitiveComponent *, int>(this, "AMissionType_ModularMissionBase.BPOnMissionTriggerBeginOverlap_Implementation", Trigger, OtherActor, OtherComp, OtherBodyIndex); }
	void BPOnMissionTriggerEndOverlap_Implementation(AMissionTrigger * Trigger, AActor * OtherActor, UPrimitiveComponent * OtherComp, int OtherBodyIndex) { NativeCall<void, AMissionTrigger *, AActor *, UPrimitiveComponent *, int>(this, "AMissionType_ModularMissionBase.BPOnMissionTriggerEndOverlap_Implementation", Trigger, OtherActor, OtherComp, OtherBodyIndex); }
	void CreateLeaderboardEntry_Implementation(AShooterPlayerController * ForPC) { NativeCall<void, AShooterPlayerController *>(this, "AMissionType_ModularMissionBase.CreateLeaderboardEntry_Implementation", ForPC); }
	void DeactivateModules() { NativeCall<void>(this, "AMissionType_ModularMissionBase.DeactivateModules"); }
	void Destroyed() { NativeCall<void>(this, "AMissionType_ModularMissionBase.Destroyed"); }
	void ExecuteNextMissionModule_Implementation() { NativeCall<void>(this, "AMissionType_ModularMissionBase.ExecuteNextMissionModule_Implementation"); }
	void GeneratePhaseRequirements_Implementation(FName PhaseName, TArray<FMissionPhaseRequirement> * Requirements) { NativeCall<void, FName, TArray<FMissionPhaseRequirement> *>(this, "AMissionType_ModularMissionBase.GeneratePhaseRequirements_Implementation", PhaseName, Requirements); }
	void GetLifetimeReplicatedProps(TArray<FLifetimeProperty> * OutLifetimeProps) { NativeCall<void, TArray<FLifetimeProperty> *>(this, "AMissionType_ModularMissionBase.GetLifetimeReplicatedProps", OutLifetimeProps); }
	void GetPerPlayerWorldIndicators_Implementation(AShooterPlayerController * Controller, AShooterCharacter * Character, TArray<FMissionWorldIndicator> * WorldIndicators) { NativeCall<void, AShooterPlayerController *, AShooterCharacter *, TArray<FMissionWorldIndicator> *>(this, "AMissionType_ModularMissionBase.GetPerPlayerWorldIndicators_Implementation", Controller, Character, WorldIndicators); }
	bool IsMissionComplete_Implementation(AShooterCharacter * ForCharacter, AShooterPlayerController * ForController) { return NativeCall<bool, AShooterCharacter *, AShooterPlayerController *>(this, "AMissionType_ModularMissionBase.IsMissionComplete_Implementation", ForCharacter, ForController); }
	void MissionSpawnCosmetic_Implementation(USoundBase * SoundTemplate, UParticleSystem * ParticleTemplate, FTransform TheTransform, float OverrideTimeDilation) { NativeCall<void, USoundBase *, UParticleSystem *, FTransform, float>(this, "AMissionType_ModularMissionBase.MissionSpawnCosmetic_Implementation", SoundTemplate, ParticleTemplate, TheTransform, OverrideTimeDilation); }
	void MultiActivateWarmerColderHUD_Implementation(FHUDElement Background, FHUDElement Icon, float MinAlpha, float MaxAlpha, float AlphaPower, FLinearColor RightColor, FLinearColor WrongColor, bool bClearLocationsFirst, const TArray<FVector> * Locations) { NativeCall<void, FHUDElement, FHUDElement, float, float, float, FLinearColor, FLinearColor, bool, const TArray<FVector> *>(this, "AMissionType_ModularMissionBase.MultiActivateWarmerColderHUD_Implementation", Background, Icon, MinAlpha, MaxAlpha, AlphaPower, RightColor, WrongColor, bClearLocationsFirst, Locations); }
	void MultiDeactivateWarmerColderHUD_Implementation() { NativeCall<void>(this, "AMissionType_ModularMissionBase.MultiDeactivateWarmerColderHUD_Implementation"); }
	void MultiFireProjectiles_Implementation(TSubclassOf<AShooterProjectile> ProjectileClass, FVector Location, FVector Velocity, const TArray<AActor *> * SubprojectileTargets, AActor * FiringActor) { NativeCall<void, TSubclassOf<AShooterProjectile>, FVector, FVector, const TArray<AActor *> *, AActor *>(this, "AMissionType_ModularMissionBase.MultiFireProjectiles_Implementation", ProjectileClass, Location, Velocity, SubprojectileTargets, FiringActor); }
	void MultiMissionSpawnCosmetic_Implementation(USoundBase * SoundTemplate, UParticleSystem * ParticleTemplate, FTransform TheTransform, float OverrideTimeDilation) { NativeCall<void, USoundBase *, UParticleSystem *, FTransform, float>(this, "AMissionType_ModularMissionBase.MultiMissionSpawnCosmetic_Implementation", SoundTemplate, ParticleTemplate, TheTransform, OverrideTimeDilation); }
	void OnMissionDeactivated() { NativeCall<void>(this, "AMissionType_ModularMissionBase.OnMissionDeactivated"); }
	void OnThrottledServerTick_Implementation(float DeltaTime) { NativeCall<void, float>(this, "AMissionType_ModularMissionBase.OnThrottledServerTick_Implementation", DeltaTime); }
	void RegisterProjectile_Implementation(AShooterProjectile * TheProjectile) { NativeCall<void, AShooterProjectile *>(this, "AMissionType_ModularMissionBase.RegisterProjectile_Implementation", TheProjectile); }
	void RemoveAllSpecialWorldIndicators_Implementation() { NativeCall<void>(this, "AMissionType_ModularMissionBase.RemoveAllSpecialWorldIndicators_Implementation"); }
	void RemoveSpecialWorldIndicator_Implementation(FMissionWorldIndicator IndicatorToRemove) { NativeCall<void, FMissionWorldIndicator>(this, "AMissionType_ModularMissionBase.RemoveSpecialWorldIndicator_Implementation", IndicatorToRemove); }
	UNewMissionModuleBase * RunMissionModule_Implementation(TSubclassOf<UNewMissionModuleBase> ModuleClass) { return NativeCall<UNewMissionModuleBase *, TSubclassOf<UNewMissionModuleBase>>(this, "AMissionType_ModularMissionBase.RunMissionModule_Implementation", ModuleClass); }
	void SetupMissionModules_Implementation() { NativeCall<void>(this, "AMissionType_ModularMissionBase.SetupMissionModules_Implementation"); }
	void ActivateWarmerColderHUD(FHUDElement Background, FHUDElement Icon, float MinAlpha, float MaxAlpha, float AlphaPower, FLinearColor RightColor, FLinearColor WrongColor, bool bClearLocationsFirst, const TArray<FVector> * Locations) { NativeCall<void, FHUDElement, FHUDElement, float, float, float, FLinearColor, FLinearColor, bool, const TArray<FVector> *>(this, "AMissionType_ModularMissionBase.ActivateWarmerColderHUD", Background, Icon, MinAlpha, MaxAlpha, AlphaPower, RightColor, WrongColor, bClearLocationsFirst, Locations); }
	void CreateLeaderboardEntry(AShooterPlayerController * ForPC) { NativeCall<void, AShooterPlayerController *>(this, "AMissionType_ModularMissionBase.CreateLeaderboardEntry", ForPC); }
	void DeactivateWarmerColderHUD() { NativeCall<void>(this, "AMissionType_ModularMissionBase.DeactivateWarmerColderHUD"); }
	void ExecuteNextMissionModule() { NativeCall<void>(this, "AMissionType_ModularMissionBase.ExecuteNextMissionModule"); }
	void MissionSpawnCosmetic(USoundBase * SoundTemplate, UParticleSystem * ParticleTemplate, FTransform TheTransform, float OverrideTimeDilation) { NativeCall<void, USoundBase *, UParticleSystem *, FTransform, float>(this, "AMissionType_ModularMissionBase.MissionSpawnCosmetic", SoundTemplate, ParticleTemplate, TheTransform, OverrideTimeDilation); }
	void RegisterProjectile(AShooterProjectile * TheProjectile) { NativeCall<void, AShooterProjectile *>(this, "AMissionType_ModularMissionBase.RegisterProjectile", TheProjectile); }
	void SetupMissionModules() { NativeCall<void>(this, "AMissionType_ModularMissionBase.SetupMissionModules"); }
};

