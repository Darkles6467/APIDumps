#pragma once

#include "BaseDeclarations.h"
#include "FDynamicRHI.h"
#include "FIntRect.h"
#include "FReadSurfaceDataFlags.h"
#include "FBox2D.h"
#include "FScreenResolutionRHI.h"
#include "FColor.h"
#include "FFloat16Color.h"

struct FD3D11DynamicRHI : FDynamicRHI
{
	char __padding[0x17c08L];
	FWindowsCriticalSection& UniformRingLockField() { return *GetNativePointerField<FWindowsCriticalSection*>(this, "FD3D11DynamicRHI.UniformRingLock"); }
	TRefCountPtr<ID3D11DeviceContext>& Direct3DDeviceIMContextField() { return *GetNativePointerField<TRefCountPtr<ID3D11DeviceContext>*>(this, "FD3D11DynamicRHI.Direct3DDeviceIMContext"); }
	TRefCountPtr<ID3D11Device>& Direct3DDeviceField() { return *GetNativePointerField<TRefCountPtr<ID3D11Device>*>(this, "FD3D11DynamicRHI.Direct3DDevice"); }
	FD3D11StateCacheBase& StateCacheField() { return *GetNativePointerField<FD3D11StateCacheBase*>(this, "FD3D11DynamicRHI.StateCache"); }
	TArray<FD3D11Viewport *>& ViewportsField() { return *GetNativePointerField<TArray<FD3D11Viewport *>*>(this, "FD3D11DynamicRHI.Viewports"); }
	TRefCountPtr<FD3D11Viewport>& DrawingViewportField() { return *GetNativePointerField<TRefCountPtr<FD3D11Viewport>*>(this, "FD3D11DynamicRHI.DrawingViewport"); }
	D3D_FEATURE_LEVEL& FeatureLevelField() { return *GetNativePointerField<D3D_FEATURE_LEVEL*>(this, "FD3D11DynamicRHI.FeatureLevel"); }
	struct AGSContext * AmdAgsContextField() { return GetNativePointerField<struct AGSContext *>(this, "FD3D11DynamicRHI.AmdAgsContext"); }
	FieldArray<unsigned int, 9> AvailableMSAAQualitiesField() { return {this, "FD3D11DynamicRHI.AvailableMSAAQualities"}; }
	void * ZeroBufferField() { return GetNativePointerField<void *>(this, "FD3D11DynamicRHI.ZeroBuffer"); }
	unsigned int& ZeroBufferSizeField() { return *GetNativePointerField<unsigned int*>(this, "FD3D11DynamicRHI.ZeroBufferSize"); }
	bool& bCurrentDepthStencilStateIsReadOnlyField() { return *GetNativePointerField<bool*>(this, "FD3D11DynamicRHI.bCurrentDepthStencilStateIsReadOnly"); }
	FieldArray<TRefCountPtr<ID3D11RenderTargetView>[8], 3118> CurrentRenderTargetsField() { return {this, "FD3D11DynamicRHI.CurrentRenderTargets"}; }
	FieldArray<TRefCountPtr<ID3D11UnorderedAccessView>[8], 3118> CurrentUAVsField() { return {this, "FD3D11DynamicRHI.CurrentUAVs"}; }
	TRefCountPtr<ID3D11DepthStencilView>& CurrentDepthStencilTargetField() { return *GetNativePointerField<TRefCountPtr<ID3D11DepthStencilView>*>(this, "FD3D11DynamicRHI.CurrentDepthStencilTarget"); }
	TRefCountPtr<FD3D11TextureBase>& CurrentDepthTextureField() { return *GetNativePointerField<TRefCountPtr<FD3D11TextureBase>*>(this, "FD3D11DynamicRHI.CurrentDepthTexture"); }
	FieldArray<int, 6> MaxBoundShaderResourcesIndexField() { return {this, "FD3D11DynamicRHI.MaxBoundShaderResourcesIndex"}; }
	unsigned int& NumSimultaneousRenderTargetsField() { return *GetNativePointerField<unsigned int*>(this, "FD3D11DynamicRHI.NumSimultaneousRenderTargets"); }
	unsigned int& NumUAVsField() { return *GetNativePointerField<unsigned int*>(this, "FD3D11DynamicRHI.NumUAVs"); }
	unsigned int& SceneFrameCounterField() { return *GetNativePointerField<unsigned int*>(this, "FD3D11DynamicRHI.SceneFrameCounter"); }
	unsigned int& PresentCounterField() { return *GetNativePointerField<unsigned int*>(this, "FD3D11DynamicRHI.PresentCounter"); }
	unsigned int& ResourceTableFrameCounterField() { return *GetNativePointerField<unsigned int*>(this, "FD3D11DynamicRHI.ResourceTableFrameCounter"); }
	FieldArray<unsigned __int16, 6> DirtyUniformBuffersField() { return {this, "FD3D11DynamicRHI.DirtyUniformBuffers"}; }
	FExclusiveDepthStencil& CurrentDSVAccessTypeField() { return *GetNativePointerField<FExclusiveDepthStencil*>(this, "FD3D11DynamicRHI.CurrentDSVAccessType"); }
	bool& bDiscardSharedConstantsField() { return *GetNativePointerField<bool*>(this, "FD3D11DynamicRHI.bDiscardSharedConstants"); }
	bool& bUsingTessellationField() { return *GetNativePointerField<bool*>(this, "FD3D11DynamicRHI.bUsingTessellation"); }
	TRefCountPtr<FD3D11DynamicBuffer>& DynamicVBField() { return *GetNativePointerField<TRefCountPtr<FD3D11DynamicBuffer>*>(this, "FD3D11DynamicRHI.DynamicVB"); }
	TRefCountPtr<FD3D11DynamicBuffer>& DynamicIBField() { return *GetNativePointerField<TRefCountPtr<FD3D11DynamicBuffer>*>(this, "FD3D11DynamicRHI.DynamicIB"); }
	unsigned int& PendingNumVerticesField() { return *GetNativePointerField<unsigned int*>(this, "FD3D11DynamicRHI.PendingNumVertices"); }
	unsigned int& PendingVertexDataStrideField() { return *GetNativePointerField<unsigned int*>(this, "FD3D11DynamicRHI.PendingVertexDataStride"); }
	unsigned int& PendingPrimitiveTypeField() { return *GetNativePointerField<unsigned int*>(this, "FD3D11DynamicRHI.PendingPrimitiveType"); }
	unsigned int& PendingNumPrimitivesField() { return *GetNativePointerField<unsigned int*>(this, "FD3D11DynamicRHI.PendingNumPrimitives"); }
	unsigned int& PendingMinVertexIndexField() { return *GetNativePointerField<unsigned int*>(this, "FD3D11DynamicRHI.PendingMinVertexIndex"); }
	unsigned int& PendingNumIndicesField() { return *GetNativePointerField<unsigned int*>(this, "FD3D11DynamicRHI.PendingNumIndices"); }
	unsigned int& PendingIndexDataStrideField() { return *GetNativePointerField<unsigned int*>(this, "FD3D11DynamicRHI.PendingIndexDataStride"); }
	TGlobalResource<TBoundShaderStateHistory<10000> >& BoundShaderStateHistoryField() { return *GetNativePointerField<TGlobalResource<TBoundShaderStateHistory<10000> >*>(this, "FD3D11DynamicRHI.BoundShaderStateHistory"); }
	unsigned int& HDRDetectedDisplayIndexField() { return *GetNativePointerField<unsigned int*>(this, "FD3D11DynamicRHI.HDRDetectedDisplayIndex"); }
	unsigned int& HDRDetectedDisplayIHVIndexField() { return *GetNativePointerField<unsigned int*>(this, "FD3D11DynamicRHI.HDRDetectedDisplayIHVIndex"); }
	FD3DGPUProfiler& GPUProfilingDataField() { return *GetNativePointerField<FD3DGPUProfiler*>(this, "FD3D11DynamicRHI.GPUProfilingData"); }
	int& ChosenAdapterField() { return *GetNativePointerField<int*>(this, "FD3D11DynamicRHI.ChosenAdapter"); }
	DXGI_ADAPTER_DESC& ChosenDescriptionField() { return *GetNativePointerField<DXGI_ADAPTER_DESC*>(this, "FD3D11DynamicRHI.ChosenDescription"); }

	// Functions

	void CleanupD3DDevice() { NativeCall<void>(this, "FD3D11DynamicRHI.CleanupD3DDevice"); }
	void CommitComputeShaderConstants() { NativeCall<void>(this, "FD3D11DynamicRHI.CommitComputeShaderConstants"); }
	void CommitGraphicsResourceTables() { NativeCall<void>(this, "FD3D11DynamicRHI.CommitGraphicsResourceTables"); }
	void CommitNonComputeShaderConstants() { NativeCall<void>(this, "FD3D11DynamicRHI.CommitNonComputeShaderConstants"); }
	void CommitRenderTargetsAndUAVs() { NativeCall<void>(this, "FD3D11DynamicRHI.CommitRenderTargetsAndUAVs"); }
	void ConditionalClearShaderResource(FD3D11BaseShaderResource * Resource) { NativeCall<void, FD3D11BaseShaderResource *>(this, "FD3D11DynamicRHI.ConditionalClearShaderResource", Resource); }
	FD3D11Texture3D * CreateD3D11Texture3D(unsigned int SizeX, unsigned int SizeY, unsigned int SizeZ, char Format, unsigned int NumMips, unsigned int Flags, FRHIResourceCreateInfo * CreateInfo) { return NativeCall<FD3D11Texture3D *, unsigned int, unsigned int, unsigned int, char, unsigned int, unsigned int, FRHIResourceCreateInfo *>(this, "FD3D11DynamicRHI.CreateD3D11Texture3D", SizeX, SizeY, SizeZ, Format, NumMips, Flags, CreateInfo); }
	void EnableHDR() { NativeCall<void>(this, "FD3D11DynamicRHI.EnableHDR"); }
	void FlushPendingLogs() { NativeCall<void>(this, "FD3D11DynamicRHI.FlushPendingLogs"); }
	const wchar_t * GetName() { return NativeCall<const wchar_t *>(this, "FD3D11DynamicRHI.GetName"); }
	bool GetQueryData(ID3D11Query * Query, void * Data, unsigned __int64 DataSize, bool bWait, ERenderQueryType QueryType) { return NativeCall<bool, ID3D11Query *, void *, unsigned __int64, bool, ERenderQueryType>(this, "FD3D11DynamicRHI.GetQueryData", Query, Data, DataSize, bWait, QueryType); }
	TRefCountPtr<ID3D11Texture2D> * GetStagingTexture(TRefCountPtr<ID3D11Texture2D> * result, FRHITexture * TextureRHI, FIntRect InRect, FIntRect * StagingRectOUT, FReadSurfaceDataFlags InFlags) { return NativeCall<TRefCountPtr<ID3D11Texture2D> *, TRefCountPtr<ID3D11Texture2D> *, FRHITexture *, FIntRect, FIntRect *, FReadSurfaceDataFlags>(this, "FD3D11DynamicRHI.GetStagingTexture", result, TextureRHI, InRect, StagingRectOUT, InFlags); }
	void Init() { NativeCall<void>(this, "FD3D11DynamicRHI.Init"); }
	void InitConstantBuffers() { NativeCall<void>(this, "FD3D11DynamicRHI.InitConstantBuffers"); }
	void InitD3DDevice() { NativeCall<void>(this, "FD3D11DynamicRHI.InitD3DDevice"); }
	void IssueLongGPUTask() { NativeCall<void>(this, "FD3D11DynamicRHI.IssueLongGPUTask"); }
	void RHIBeginDrawIndexedPrimitiveUP(unsigned int PrimitiveType, unsigned int NumPrimitives, unsigned int NumVertices, unsigned int VertexDataStride, void ** OutVertexData, unsigned int MinVertexIndex, unsigned int NumIndices, unsigned int IndexDataStride, void ** OutIndexData) { NativeCall<void, unsigned int, unsigned int, unsigned int, unsigned int, void **, unsigned int, unsigned int, unsigned int, void **>(this, "FD3D11DynamicRHI.RHIBeginDrawIndexedPrimitiveUP", PrimitiveType, NumPrimitives, NumVertices, VertexDataStride, OutVertexData, MinVertexIndex, NumIndices, IndexDataStride, OutIndexData); }
	void RHIBeginDrawPrimitiveUP(unsigned int PrimitiveType, unsigned int NumPrimitives, unsigned int NumVertices, unsigned int VertexDataStride, void ** OutVertexData) { NativeCall<void, unsigned int, unsigned int, unsigned int, unsigned int, void **>(this, "FD3D11DynamicRHI.RHIBeginDrawPrimitiveUP", PrimitiveType, NumPrimitives, NumVertices, VertexDataStride, OutVertexData); }
	void RHIBeginDrawingViewport(FRHIViewport * ViewportRHI, FRHITexture * RenderTarget) { NativeCall<void, FRHIViewport *, FRHITexture *>(this, "FD3D11DynamicRHI.RHIBeginDrawingViewport", ViewportRHI, RenderTarget); }
	void RHIBeginFrame() { NativeCall<void>(this, "FD3D11DynamicRHI.RHIBeginFrame"); }
	void RHIBeginRenderQuery(FRHIRenderQuery * QueryRHI) { NativeCall<void, FRHIRenderQuery *>(this, "FD3D11DynamicRHI.RHIBeginRenderQuery", QueryRHI); }
	void RHIBeginScene() { NativeCall<void>(this, "FD3D11DynamicRHI.RHIBeginScene"); }
	void RHIClear(bool bClearColor, const FLinearColor * Color, bool bClearDepth, float Depth, bool bClearStencil, unsigned int Stencil, FIntRect ExcludeRect) { NativeCall<void, bool, const FLinearColor *, bool, float, bool, unsigned int, FIntRect>(this, "FD3D11DynamicRHI.RHIClear", bClearColor, Color, bClearDepth, Depth, bClearStencil, Stencil, ExcludeRect); }
	void RHIClearColorTexture(FRHITexture * Texture, const FLinearColor * ColorArray, FIntRect ExcludeRect) { NativeCall<void, FRHITexture *, const FLinearColor *, FIntRect>(this, "FD3D11DynamicRHI.RHIClearColorTexture", Texture, ColorArray, ExcludeRect); }
	void RHIClearColorTextures(int NumTextures, FRHITexture ** Textures, const FLinearColor * ColorArray, FIntRect ExcludeRect) { NativeCall<void, int, FRHITexture **, const FLinearColor *, FIntRect>(this, "FD3D11DynamicRHI.RHIClearColorTextures", NumTextures, Textures, ColorArray, ExcludeRect); }
	void RHIClearDepthStencilTexture(FRHITexture * Texture, EClearDepthStencil ClearDepthStencil, float Depth, unsigned int Stencil, FIntRect ExcludeRect) { NativeCall<void, FRHITexture *, EClearDepthStencil, float, unsigned int, FIntRect>(this, "FD3D11DynamicRHI.RHIClearDepthStencilTexture", Texture, ClearDepthStencil, Depth, Stencil, ExcludeRect); }
	void RHIClearMRT(bool bClearColor, int NumClearColors, const FLinearColor * ClearColorArray, bool bClearDepth, float Depth, bool bClearStencil, unsigned int Stencil, FIntRect ExcludeRect) { NativeCall<void, bool, int, const FLinearColor *, bool, float, bool, unsigned int, FIntRect>(this, "FD3D11DynamicRHI.RHIClearMRT", bClearColor, NumClearColors, ClearColorArray, bClearDepth, Depth, bClearStencil, Stencil, ExcludeRect); }
	void RHIClearMRTImpl(bool bClearColor, int NumClearColors, const FLinearColor * ClearColorArray, bool bClearDepth, float Depth, bool bClearStencil, unsigned int Stencil, FIntRect ExcludeRect, bool bForceShaderClear, FD3D11DynamicRHI::EForceFullScreenClear ForceFullScreen) { NativeCall<void, bool, int, const FLinearColor *, bool, float, bool, unsigned int, FIntRect, bool, FD3D11DynamicRHI::EForceFullScreenClear>(this, "FD3D11DynamicRHI.RHIClearMRTImpl", bClearColor, NumClearColors, ClearColorArray, bClearDepth, Depth, bClearStencil, Stencil, ExcludeRect, bForceShaderClear, ForceFullScreen); }
	void RHIClearUAV(FRHIUnorderedAccessView * UnorderedAccessViewRHI, const unsigned int * Values) { NativeCall<void, FRHIUnorderedAccessView *, const unsigned int *>(this, "FD3D11DynamicRHI.RHIClearUAV", UnorderedAccessViewRHI, Values); }
	unsigned int RHIComputeMemorySize(FRHITexture * TextureRHI) { return NativeCall<unsigned int, FRHITexture *>(this, "FD3D11DynamicRHI.RHIComputeMemorySize", TextureRHI); }
	void RHICopySharedMips(FRHITexture2D * DestTexture2DRHI, FRHITexture2D * SrcTexture2DRHI) { NativeCall<void, FRHITexture2D *, FRHITexture2D *>(this, "FD3D11DynamicRHI.RHICopySharedMips", DestTexture2DRHI, SrcTexture2DRHI); }
	bool RHICopySubTextureRegion(FRHITexture2D * SourceTextureRHI, FRHITexture2D * DestinationTextureRHI, FBox2D SourceBox, FBox2D DestinationBox) { return NativeCall<bool, FRHITexture2D *, FRHITexture2D *, FBox2D, FBox2D>(this, "FD3D11DynamicRHI.RHICopySubTextureRegion", SourceTextureRHI, DestinationTextureRHI, SourceBox, DestinationBox); }
	void RHICopyToResolveTarget(FRHITexture * SourceTextureRHI, FRHITexture * DestTextureRHI, bool bKeepOriginalSurface, const FResolveParams * ResolveParams) { NativeCall<void, FRHITexture *, FRHITexture *, bool, const FResolveParams *>(this, "FD3D11DynamicRHI.RHICopyToResolveTarget", SourceTextureRHI, DestTextureRHI, bKeepOriginalSurface, ResolveParams); }
	void RHICopyVertexBuffer(FRHIVertexBuffer * SourceBufferRHI, FRHIVertexBuffer * DestBufferRHI) { NativeCall<void, FRHIVertexBuffer *, FRHIVertexBuffer *>(this, "FD3D11DynamicRHI.RHICopyVertexBuffer", SourceBufferRHI, DestBufferRHI); }
	void RHIDispatchComputeShader(unsigned int ThreadGroupCountX, unsigned int ThreadGroupCountY, unsigned int ThreadGroupCountZ) { NativeCall<void, unsigned int, unsigned int, unsigned int>(this, "FD3D11DynamicRHI.RHIDispatchComputeShader", ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ); }
	void RHIDispatchIndirectComputeShader(FRHIVertexBuffer * ArgumentBufferRHI, unsigned int ArgumentOffset) { NativeCall<void, FRHIVertexBuffer *, unsigned int>(this, "FD3D11DynamicRHI.RHIDispatchIndirectComputeShader", ArgumentBufferRHI, ArgumentOffset); }
	void RHIDrawIndexedIndirect(FRHIIndexBuffer * IndexBufferRHI, unsigned int PrimitiveType, FRHIStructuredBuffer * ArgumentsBufferRHI, int DrawArgumentsIndex, unsigned int NumInstances) { NativeCall<void, FRHIIndexBuffer *, unsigned int, FRHIStructuredBuffer *, int, unsigned int>(this, "FD3D11DynamicRHI.RHIDrawIndexedIndirect", IndexBufferRHI, PrimitiveType, ArgumentsBufferRHI, DrawArgumentsIndex, NumInstances); }
	void RHIDrawIndexedPrimitive(FRHIIndexBuffer * IndexBufferRHI, unsigned int PrimitiveType, int BaseVertexIndex, unsigned int FirstInstance, unsigned int NumVertices, unsigned int StartIndex, unsigned int NumPrimitives, unsigned int NumInstances) { NativeCall<void, FRHIIndexBuffer *, unsigned int, int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int>(this, "FD3D11DynamicRHI.RHIDrawIndexedPrimitive", IndexBufferRHI, PrimitiveType, BaseVertexIndex, FirstInstance, NumVertices, StartIndex, NumPrimitives, NumInstances); }
	void RHIDrawIndexedPrimitiveIndirect(unsigned int PrimitiveType, FRHIIndexBuffer * IndexBufferRHI, FRHIVertexBuffer * ArgumentBufferRHI, unsigned int ArgumentOffset) { NativeCall<void, unsigned int, FRHIIndexBuffer *, FRHIVertexBuffer *, unsigned int>(this, "FD3D11DynamicRHI.RHIDrawIndexedPrimitiveIndirect", PrimitiveType, IndexBufferRHI, ArgumentBufferRHI, ArgumentOffset); }
	void RHIDrawPrimitive(unsigned int PrimitiveType, unsigned int BaseVertexIndex, unsigned int NumPrimitives, unsigned int NumInstances) { NativeCall<void, unsigned int, unsigned int, unsigned int, unsigned int>(this, "FD3D11DynamicRHI.RHIDrawPrimitive", PrimitiveType, BaseVertexIndex, NumPrimitives, NumInstances); }
	void RHIDrawPrimitiveIndirect(unsigned int PrimitiveType, FRHIVertexBuffer * ArgumentBufferRHI, unsigned int ArgumentOffset) { NativeCall<void, unsigned int, FRHIVertexBuffer *, unsigned int>(this, "FD3D11DynamicRHI.RHIDrawPrimitiveIndirect", PrimitiveType, ArgumentBufferRHI, ArgumentOffset); }
	void RHIEndDrawIndexedPrimitiveUP() { NativeCall<void>(this, "FD3D11DynamicRHI.RHIEndDrawIndexedPrimitiveUP"); }
	void RHIEndDrawPrimitiveUP() { NativeCall<void>(this, "FD3D11DynamicRHI.RHIEndDrawPrimitiveUP"); }
	void RHIEndDrawingViewport(FRHIViewport * ViewportRHI, bool bPresent, bool bLockToVsync) { NativeCall<void, FRHIViewport *, bool, bool>(this, "FD3D11DynamicRHI.RHIEndDrawingViewport", ViewportRHI, bPresent, bLockToVsync); }
	void RHIEndFrame() { NativeCall<void>(this, "FD3D11DynamicRHI.RHIEndFrame"); }
	void RHIEndRenderQuery(FRHIRenderQuery * QueryRHI) { NativeCall<void, FRHIRenderQuery *>(this, "FD3D11DynamicRHI.RHIEndRenderQuery", QueryRHI); }
	void RHIEndScene() { NativeCall<void>(this, "FD3D11DynamicRHI.RHIEndScene"); }
	void RHIGenerateMips(FRHITexture * TextureRHI) { NativeCall<void, FRHITexture *>(this, "FD3D11DynamicRHI.RHIGenerateMips", TextureRHI); }
	bool RHIGetAvailableResolutions(TArray<FScreenResolutionRHI> * Resolutions, bool bIgnoreRefreshRate) { return NativeCall<bool, TArray<FScreenResolutionRHI> *, bool>(this, "FD3D11DynamicRHI.RHIGetAvailableResolutions", Resolutions, bIgnoreRefreshRate); }
	bool RHIGetRenderQueryResult(FRHIRenderQuery * QueryRHI, unsigned __int64 * OutResult, bool bWait) { return NativeCall<bool, FRHIRenderQuery *, unsigned __int64 *, bool>(this, "FD3D11DynamicRHI.RHIGetRenderQueryResult", QueryRHI, OutResult, bWait); }
	void RHIGetResourceInfo(FRHITexture * Ref, FRHIResourceInfo * OutInfo) { NativeCall<void, FRHITexture *, FRHIResourceInfo *>(this, "FD3D11DynamicRHI.RHIGetResourceInfo", Ref, OutInfo); }
	void RHIGetSupportedResolution(unsigned int * Width, unsigned int * Height) { NativeCall<void, unsigned int *, unsigned int *>(this, "FD3D11DynamicRHI.RHIGetSupportedResolution", Width, Height); }
	void RHIGetTextureMemoryStats(FTextureMemoryStats * OutStats) { NativeCall<void, FTextureMemoryStats *>(this, "FD3D11DynamicRHI.RHIGetTextureMemoryStats", OutStats); }
	void * RHILockIndexBuffer(FRHIIndexBuffer * IndexBufferRHI, unsigned int Offset, unsigned int Size, EResourceLockMode LockMode) { return NativeCall<void *, FRHIIndexBuffer *, unsigned int, unsigned int, EResourceLockMode>(this, "FD3D11DynamicRHI.RHILockIndexBuffer", IndexBufferRHI, Offset, Size, LockMode); }
	void * RHILockStructuredBuffer(FRHIStructuredBuffer * StructuredBufferRHI, unsigned int Offset, unsigned int Size, EResourceLockMode LockMode) { return NativeCall<void *, FRHIStructuredBuffer *, unsigned int, unsigned int, EResourceLockMode>(this, "FD3D11DynamicRHI.RHILockStructuredBuffer", StructuredBufferRHI, Offset, Size, LockMode); }
	void * RHILockTexture2D(FRHITexture2D * TextureRHI, unsigned int MipIndex, EResourceLockMode LockMode, unsigned int * DestStride, bool bLockWithinMiptail) { return NativeCall<void *, FRHITexture2D *, unsigned int, EResourceLockMode, unsigned int *, bool>(this, "FD3D11DynamicRHI.RHILockTexture2D", TextureRHI, MipIndex, LockMode, DestStride, bLockWithinMiptail); }
	void * RHILockTexture2DArray(FRHITexture2DArray * TextureRHI, unsigned int TextureIndex, unsigned int MipIndex, EResourceLockMode LockMode, unsigned int * DestStride, bool bLockWithinMiptail) { return NativeCall<void *, FRHITexture2DArray *, unsigned int, unsigned int, EResourceLockMode, unsigned int *, bool>(this, "FD3D11DynamicRHI.RHILockTexture2DArray", TextureRHI, TextureIndex, MipIndex, LockMode, DestStride, bLockWithinMiptail); }
	void * RHILockTextureCubeFace(FRHITextureCube * TextureCubeRHI, unsigned int FaceIndex, unsigned int ArrayIndex, unsigned int MipIndex, EResourceLockMode LockMode, unsigned int * DestStride, bool bLockWithinMiptail) { return NativeCall<void *, FRHITextureCube *, unsigned int, unsigned int, unsigned int, EResourceLockMode, unsigned int *, bool>(this, "FD3D11DynamicRHI.RHILockTextureCubeFace", TextureCubeRHI, FaceIndex, ArrayIndex, MipIndex, LockMode, DestStride, bLockWithinMiptail); }
	void * RHILockVertexBuffer(FRHIVertexBuffer * VertexBufferRHI, unsigned int Offset, unsigned int Size, EResourceLockMode LockMode) { return NativeCall<void *, FRHIVertexBuffer *, unsigned int, unsigned int, EResourceLockMode>(this, "FD3D11DynamicRHI.RHILockVertexBuffer", VertexBufferRHI, Offset, Size, LockMode); }
	void RHIMapStagingSurface(FRHITexture * TextureRHI, void ** OutData, int * OutWidth, int * OutHeight) { NativeCall<void, FRHITexture *, void **, int *, int *>(this, "FD3D11DynamicRHI.RHIMapStagingSurface", TextureRHI, OutData, OutWidth, OutHeight); }
	void RHIPopEvent() { NativeCall<void>(this, "FD3D11DynamicRHI.RHIPopEvent"); }
	void RHIPushEvent(const wchar_t * Name, FColor Color) { NativeCall<void, const wchar_t *, FColor>(this, "FD3D11DynamicRHI.RHIPushEvent", Name, Color); }
	void RHIRead3DSurfaceFloatData(FRHITexture * TextureRHI, FIntRect InRect, FIntPoint ZMinMax, TArray<FFloat16Color> * OutData) { NativeCall<void, FRHITexture *, FIntRect, FIntPoint, TArray<FFloat16Color> *>(this, "FD3D11DynamicRHI.RHIRead3DSurfaceFloatData", TextureRHI, InRect, ZMinMax, OutData); }
	void RHIReadSurfaceData(FRHITexture * TextureRHI, FIntRect InRect, TArray<FLinearColor> * OutData, FReadSurfaceDataFlags InFlags) { NativeCall<void, FRHITexture *, FIntRect, TArray<FLinearColor> *, FReadSurfaceDataFlags>(this, "FD3D11DynamicRHI.RHIReadSurfaceData", TextureRHI, InRect, OutData, InFlags); }
	void RHIReadSurfaceData(FRHITexture * TextureRHI, FIntRect InRect, TArray<FColor> * OutData, FReadSurfaceDataFlags InFlags) { NativeCall<void, FRHITexture *, FIntRect, TArray<FColor> *, FReadSurfaceDataFlags>(this, "FD3D11DynamicRHI.RHIReadSurfaceData", TextureRHI, InRect, OutData, InFlags); }
	void RHIReadSurfaceFloatData(FRHITexture * TextureRHI, FIntRect InRect, TArray<FFloat16Color> * OutData, ECubeFace CubeFace, int ArrayIndex, int MipIndex) { NativeCall<void, FRHITexture *, FIntRect, TArray<FFloat16Color> *, ECubeFace, int, int>(this, "FD3D11DynamicRHI.RHIReadSurfaceFloatData", TextureRHI, InRect, OutData, CubeFace, ArrayIndex, MipIndex); }
	void RHIResizeViewport(FRHIViewport * ViewportRHI, unsigned int SizeX, unsigned int SizeY, bool bIsFullscreen) { NativeCall<void, FRHIViewport *, unsigned int, unsigned int, bool>(this, "FD3D11DynamicRHI.RHIResizeViewport", ViewportRHI, SizeX, SizeY, bIsFullscreen); }
	void RHIResizeViewport(FRHIViewport * ViewportRHI, unsigned int SizeX, unsigned int SizeY, bool bIsFullscreen, EPixelFormat PreferredPixelFormat) { NativeCall<void, FRHIViewport *, unsigned int, unsigned int, bool, EPixelFormat>(this, "FD3D11DynamicRHI.RHIResizeViewport", ViewportRHI, SizeX, SizeY, bIsFullscreen, PreferredPixelFormat); }
	void RHISetBlendState(FRHIBlendState * NewStateRHI, const FLinearColor * BlendFactor) { NativeCall<void, FRHIBlendState *, const FLinearColor *>(this, "FD3D11DynamicRHI.RHISetBlendState", NewStateRHI, BlendFactor); }
	void RHISetBoundShaderState(FRHIBoundShaderState * BoundShaderStateRHI) { NativeCall<void, FRHIBoundShaderState *>(this, "FD3D11DynamicRHI.RHISetBoundShaderState", BoundShaderStateRHI); }
	void RHISetComputeShader(FRHIComputeShader * ComputeShaderRHI) { NativeCall<void, FRHIComputeShader *>(this, "FD3D11DynamicRHI.RHISetComputeShader", ComputeShaderRHI); }
	void RHISetDepthStencilState(FRHIDepthStencilState * NewStateRHI, unsigned int StencilRef) { NativeCall<void, FRHIDepthStencilState *, unsigned int>(this, "FD3D11DynamicRHI.RHISetDepthStencilState", NewStateRHI, StencilRef); }
	void RHISetMultipleViewports(unsigned int Count, const FViewportBounds * Data) { NativeCall<void, unsigned int, const FViewportBounds *>(this, "FD3D11DynamicRHI.RHISetMultipleViewports", Count, Data); }
	void RHISetRasterizerState(FRHIRasterizerState * NewStateRHI) { NativeCall<void, FRHIRasterizerState *>(this, "FD3D11DynamicRHI.RHISetRasterizerState", NewStateRHI); }
	void RHISetRenderTargets(unsigned int NewNumSimultaneousRenderTargets, const FRHIRenderTargetView * NewRenderTargetsRHI, const FRHIDepthRenderTargetView * NewDepthStencilTargetRHI, unsigned int NewNumUAVs, FRHIUnorderedAccessView *const * UAVs) { NativeCall<void, unsigned int, const FRHIRenderTargetView *, const FRHIDepthRenderTargetView *, unsigned int, FRHIUnorderedAccessView *const *>(this, "FD3D11DynamicRHI.RHISetRenderTargets", NewNumSimultaneousRenderTargets, NewRenderTargetsRHI, NewDepthStencilTargetRHI, NewNumUAVs, UAVs); }
	void RHISetRenderTargetsAndClear(const FRHISetRenderTargetsInfo * RenderTargetsInfo) { NativeCall<void, const FRHISetRenderTargetsInfo *>(this, "FD3D11DynamicRHI.RHISetRenderTargetsAndClear", RenderTargetsInfo); }
	void RHISetScissorRect(bool bEnable, unsigned int MinX, unsigned int MinY, unsigned int MaxX, unsigned int MaxY) { NativeCall<void, bool, unsigned int, unsigned int, unsigned int, unsigned int>(this, "FD3D11DynamicRHI.RHISetScissorRect", bEnable, MinX, MinY, MaxX, MaxY); }
	void RHISetShaderParameter(FRHIComputeShader * ComputeShaderRHI, unsigned int BufferIndex, unsigned int BaseIndex, unsigned int NumBytes, const void * NewValue) { NativeCall<void, FRHIComputeShader *, unsigned int, unsigned int, unsigned int, const void *>(this, "FD3D11DynamicRHI.RHISetShaderParameter", ComputeShaderRHI, BufferIndex, BaseIndex, NumBytes, NewValue); }
	void RHISetShaderParameter(FRHIDomainShader * DomainShaderRHI, unsigned int BufferIndex, unsigned int BaseIndex, unsigned int NumBytes, const void * NewValue) { NativeCall<void, FRHIDomainShader *, unsigned int, unsigned int, unsigned int, const void *>(this, "FD3D11DynamicRHI.RHISetShaderParameter", DomainShaderRHI, BufferIndex, BaseIndex, NumBytes, NewValue); }
	void RHISetShaderParameter(FRHIGeometryShader * GeometryShaderRHI, unsigned int BufferIndex, unsigned int BaseIndex, unsigned int NumBytes, const void * NewValue) { NativeCall<void, FRHIGeometryShader *, unsigned int, unsigned int, unsigned int, const void *>(this, "FD3D11DynamicRHI.RHISetShaderParameter", GeometryShaderRHI, BufferIndex, BaseIndex, NumBytes, NewValue); }
	void RHISetShaderParameter(FRHIHullShader * HullShaderRHI, unsigned int BufferIndex, unsigned int BaseIndex, unsigned int NumBytes, const void * NewValue) { NativeCall<void, FRHIHullShader *, unsigned int, unsigned int, unsigned int, const void *>(this, "FD3D11DynamicRHI.RHISetShaderParameter", HullShaderRHI, BufferIndex, BaseIndex, NumBytes, NewValue); }
	void RHISetShaderParameter(FRHIPixelShader * PixelShaderRHI, unsigned int BufferIndex, unsigned int BaseIndex, unsigned int NumBytes, const void * NewValue) { NativeCall<void, FRHIPixelShader *, unsigned int, unsigned int, unsigned int, const void *>(this, "FD3D11DynamicRHI.RHISetShaderParameter", PixelShaderRHI, BufferIndex, BaseIndex, NumBytes, NewValue); }
	void RHISetShaderParameter(FRHIVertexShader * VertexShaderRHI, unsigned int BufferIndex, unsigned int BaseIndex, unsigned int NumBytes, const void * NewValue) { NativeCall<void, FRHIVertexShader *, unsigned int, unsigned int, unsigned int, const void *>(this, "FD3D11DynamicRHI.RHISetShaderParameter", VertexShaderRHI, BufferIndex, BaseIndex, NumBytes, NewValue); }
	void RHISetShaderResourceViewParameter(FRHIComputeShader * ComputeShaderRHI, unsigned int TextureIndex, FRHIShaderResourceView * SRVRHI) { NativeCall<void, FRHIComputeShader *, unsigned int, FRHIShaderResourceView *>(this, "FD3D11DynamicRHI.RHISetShaderResourceViewParameter", ComputeShaderRHI, TextureIndex, SRVRHI); }
	void RHISetShaderResourceViewParameter(FRHIDomainShader * DomainShaderRHI, unsigned int TextureIndex, FRHIShaderResourceView * SRVRHI) { NativeCall<void, FRHIDomainShader *, unsigned int, FRHIShaderResourceView *>(this, "FD3D11DynamicRHI.RHISetShaderResourceViewParameter", DomainShaderRHI, TextureIndex, SRVRHI); }
	void RHISetShaderResourceViewParameter(FRHIGeometryShader * GeometryShaderRHI, unsigned int TextureIndex, FRHIShaderResourceView * SRVRHI) { NativeCall<void, FRHIGeometryShader *, unsigned int, FRHIShaderResourceView *>(this, "FD3D11DynamicRHI.RHISetShaderResourceViewParameter", GeometryShaderRHI, TextureIndex, SRVRHI); }
	void RHISetShaderResourceViewParameter(FRHIHullShader * HullShaderRHI, unsigned int TextureIndex, FRHIShaderResourceView * SRVRHI) { NativeCall<void, FRHIHullShader *, unsigned int, FRHIShaderResourceView *>(this, "FD3D11DynamicRHI.RHISetShaderResourceViewParameter", HullShaderRHI, TextureIndex, SRVRHI); }
	void RHISetShaderResourceViewParameter(FRHIPixelShader * PixelShaderRHI, unsigned int TextureIndex, FRHIShaderResourceView * SRVRHI) { NativeCall<void, FRHIPixelShader *, unsigned int, FRHIShaderResourceView *>(this, "FD3D11DynamicRHI.RHISetShaderResourceViewParameter", PixelShaderRHI, TextureIndex, SRVRHI); }
	void RHISetShaderResourceViewParameter(FRHIVertexShader * VertexShaderRHI, unsigned int TextureIndex, FRHIShaderResourceView * SRVRHI) { NativeCall<void, FRHIVertexShader *, unsigned int, FRHIShaderResourceView *>(this, "FD3D11DynamicRHI.RHISetShaderResourceViewParameter", VertexShaderRHI, TextureIndex, SRVRHI); }
	void RHISetShaderSampler(FRHIComputeShader * ComputeShaderRHI, unsigned int SamplerIndex, FRHISamplerState * NewStateRHI) { NativeCall<void, FRHIComputeShader *, unsigned int, FRHISamplerState *>(this, "FD3D11DynamicRHI.RHISetShaderSampler", ComputeShaderRHI, SamplerIndex, NewStateRHI); }
	void RHISetShaderSampler(FRHIDomainShader * DomainShaderRHI, unsigned int SamplerIndex, FRHISamplerState * NewStateRHI) { NativeCall<void, FRHIDomainShader *, unsigned int, FRHISamplerState *>(this, "FD3D11DynamicRHI.RHISetShaderSampler", DomainShaderRHI, SamplerIndex, NewStateRHI); }
	void RHISetShaderSampler(FRHIGeometryShader * GeometryShaderRHI, unsigned int SamplerIndex, FRHISamplerState * NewStateRHI) { NativeCall<void, FRHIGeometryShader *, unsigned int, FRHISamplerState *>(this, "FD3D11DynamicRHI.RHISetShaderSampler", GeometryShaderRHI, SamplerIndex, NewStateRHI); }
	void RHISetShaderSampler(FRHIHullShader * HullShaderRHI, unsigned int SamplerIndex, FRHISamplerState * NewStateRHI) { NativeCall<void, FRHIHullShader *, unsigned int, FRHISamplerState *>(this, "FD3D11DynamicRHI.RHISetShaderSampler", HullShaderRHI, SamplerIndex, NewStateRHI); }
	void RHISetShaderSampler(FRHIPixelShader * PixelShaderRHI, unsigned int SamplerIndex, FRHISamplerState * NewStateRHI) { NativeCall<void, FRHIPixelShader *, unsigned int, FRHISamplerState *>(this, "FD3D11DynamicRHI.RHISetShaderSampler", PixelShaderRHI, SamplerIndex, NewStateRHI); }
	void RHISetShaderSampler(FRHIVertexShader * VertexShaderRHI, unsigned int SamplerIndex, FRHISamplerState * NewStateRHI) { NativeCall<void, FRHIVertexShader *, unsigned int, FRHISamplerState *>(this, "FD3D11DynamicRHI.RHISetShaderSampler", VertexShaderRHI, SamplerIndex, NewStateRHI); }
	void RHISetShaderTexture(FRHIComputeShader * ComputeShaderRHI, unsigned int TextureIndex, FRHITexture * NewTextureRHI) { NativeCall<void, FRHIComputeShader *, unsigned int, FRHITexture *>(this, "FD3D11DynamicRHI.RHISetShaderTexture", ComputeShaderRHI, TextureIndex, NewTextureRHI); }
	void RHISetShaderTexture(FRHIDomainShader * DomainShaderRHI, unsigned int TextureIndex, FRHITexture * NewTextureRHI) { NativeCall<void, FRHIDomainShader *, unsigned int, FRHITexture *>(this, "FD3D11DynamicRHI.RHISetShaderTexture", DomainShaderRHI, TextureIndex, NewTextureRHI); }
	void RHISetShaderTexture(FRHIGeometryShader * GeometryShaderRHI, unsigned int TextureIndex, FRHITexture * NewTextureRHI) { NativeCall<void, FRHIGeometryShader *, unsigned int, FRHITexture *>(this, "FD3D11DynamicRHI.RHISetShaderTexture", GeometryShaderRHI, TextureIndex, NewTextureRHI); }
	void RHISetShaderTexture(FRHIHullShader * HullShaderRHI, unsigned int TextureIndex, FRHITexture * NewTextureRHI) { NativeCall<void, FRHIHullShader *, unsigned int, FRHITexture *>(this, "FD3D11DynamicRHI.RHISetShaderTexture", HullShaderRHI, TextureIndex, NewTextureRHI); }
	void RHISetShaderTexture(FRHIPixelShader * PixelShaderRHI, unsigned int TextureIndex, FRHITexture * NewTextureRHI) { NativeCall<void, FRHIPixelShader *, unsigned int, FRHITexture *>(this, "FD3D11DynamicRHI.RHISetShaderTexture", PixelShaderRHI, TextureIndex, NewTextureRHI); }
	void RHISetShaderTexture(FRHIVertexShader * VertexShaderRHI, unsigned int TextureIndex, FRHITexture * NewTextureRHI) { NativeCall<void, FRHIVertexShader *, unsigned int, FRHITexture *>(this, "FD3D11DynamicRHI.RHISetShaderTexture", VertexShaderRHI, TextureIndex, NewTextureRHI); }
	void RHISetShaderUniformBuffer(FRHIComputeShader * ComputeShader, unsigned int BufferIndex, FRHIUniformBuffer * BufferRHI) { NativeCall<void, FRHIComputeShader *, unsigned int, FRHIUniformBuffer *>(this, "FD3D11DynamicRHI.RHISetShaderUniformBuffer", ComputeShader, BufferIndex, BufferRHI); }
	void RHISetShaderUniformBuffer(FRHIDomainShader * DomainShader, unsigned int BufferIndex, FRHIUniformBuffer * BufferRHI) { NativeCall<void, FRHIDomainShader *, unsigned int, FRHIUniformBuffer *>(this, "FD3D11DynamicRHI.RHISetShaderUniformBuffer", DomainShader, BufferIndex, BufferRHI); }
	void RHISetShaderUniformBuffer(FRHIGeometryShader * GeometryShader, unsigned int BufferIndex, FRHIUniformBuffer * BufferRHI) { NativeCall<void, FRHIGeometryShader *, unsigned int, FRHIUniformBuffer *>(this, "FD3D11DynamicRHI.RHISetShaderUniformBuffer", GeometryShader, BufferIndex, BufferRHI); }
	void RHISetShaderUniformBuffer(FRHIHullShader * HullShader, unsigned int BufferIndex, FRHIUniformBuffer * BufferRHI) { NativeCall<void, FRHIHullShader *, unsigned int, FRHIUniformBuffer *>(this, "FD3D11DynamicRHI.RHISetShaderUniformBuffer", HullShader, BufferIndex, BufferRHI); }
	void RHISetShaderUniformBuffer(FRHIPixelShader * PixelShader, unsigned int BufferIndex, FRHIUniformBuffer * BufferRHI) { NativeCall<void, FRHIPixelShader *, unsigned int, FRHIUniformBuffer *>(this, "FD3D11DynamicRHI.RHISetShaderUniformBuffer", PixelShader, BufferIndex, BufferRHI); }
	void RHISetShaderUniformBuffer(FRHIVertexShader * VertexShader, unsigned int BufferIndex, FRHIUniformBuffer * BufferRHI) { NativeCall<void, FRHIVertexShader *, unsigned int, FRHIUniformBuffer *>(this, "FD3D11DynamicRHI.RHISetShaderUniformBuffer", VertexShader, BufferIndex, BufferRHI); }
	void RHISetStereoViewport(unsigned int LeftMinX, unsigned int RightMinX, unsigned int MinY, float MinZ, unsigned int LeftMaxX, unsigned int RightMaxX, unsigned int MaxY, float MaxZ) { NativeCall<void, unsigned int, unsigned int, unsigned int, float, unsigned int, unsigned int, unsigned int, float>(this, "FD3D11DynamicRHI.RHISetStereoViewport", LeftMinX, RightMinX, MinY, MinZ, LeftMaxX, RightMaxX, MaxY, MaxZ); }
	void RHISetStreamOutTargets(unsigned int NumTargets, FRHIVertexBuffer *const * VertexBuffers, const unsigned int * Offsets) { NativeCall<void, unsigned int, FRHIVertexBuffer *const *, const unsigned int *>(this, "FD3D11DynamicRHI.RHISetStreamOutTargets", NumTargets, VertexBuffers, Offsets); }
	void RHISetStreamSource(unsigned int StreamIndex, FRHIVertexBuffer * VertexBufferRHI, unsigned int Stride, unsigned int Offset) { NativeCall<void, unsigned int, FRHIVertexBuffer *, unsigned int, unsigned int>(this, "FD3D11DynamicRHI.RHISetStreamSource", StreamIndex, VertexBufferRHI, Stride, Offset); }
	void RHISetUAVParameter(FRHIComputeShader * ComputeShaderRHI, unsigned int UAVIndex, FRHIUnorderedAccessView * UAVRHI) { NativeCall<void, FRHIComputeShader *, unsigned int, FRHIUnorderedAccessView *>(this, "FD3D11DynamicRHI.RHISetUAVParameter", ComputeShaderRHI, UAVIndex, UAVRHI); }
	void RHISetUAVParameter(FRHIComputeShader * ComputeShaderRHI, unsigned int UAVIndex, FRHIUnorderedAccessView * UAVRHI, unsigned int InitialCount) { NativeCall<void, FRHIComputeShader *, unsigned int, FRHIUnorderedAccessView *, unsigned int>(this, "FD3D11DynamicRHI.RHISetUAVParameter", ComputeShaderRHI, UAVIndex, UAVRHI, InitialCount); }
	void RHISetViewport(int MinX, int MinY, float MinZ, int MaxX, int MaxY, float MaxZ) { NativeCall<void, int, int, float, int, int, float>(this, "FD3D11DynamicRHI.RHISetViewport", MinX, MinY, MinZ, MaxX, MaxY, MaxZ); }
	void RHITick(float DeltaTime) { NativeCall<void, float>(this, "FD3D11DynamicRHI.RHITick", DeltaTime); }
	void RHITransitionResources(EResourceTransitionAccess TransitionType, FRHITexture ** InTextures, int NumTextures) { NativeCall<void, EResourceTransitionAccess, FRHITexture **, int>(this, "FD3D11DynamicRHI.RHITransitionResources", TransitionType, InTextures, NumTextures); }
	void RHITransitionResources(EResourceTransitionAccess TransitionType, EResourceTransitionPipeline TransitionPipeline, FRHIUnorderedAccessView ** InUAVs, int InNumUAVs, FRHIComputeFence * WriteFence) { NativeCall<void, EResourceTransitionAccess, EResourceTransitionPipeline, FRHIUnorderedAccessView **, int, FRHIComputeFence *>(this, "FD3D11DynamicRHI.RHITransitionResources", TransitionType, TransitionPipeline, InUAVs, InNumUAVs, WriteFence); }
	void RHIUnlockIndexBuffer(FRHIIndexBuffer * IndexBufferRHI) { NativeCall<void, FRHIIndexBuffer *>(this, "FD3D11DynamicRHI.RHIUnlockIndexBuffer", IndexBufferRHI); }
	void RHIUnlockStructuredBuffer(FRHIStructuredBuffer * StructuredBufferRHI) { NativeCall<void, FRHIStructuredBuffer *>(this, "FD3D11DynamicRHI.RHIUnlockStructuredBuffer", StructuredBufferRHI); }
	void RHIUnlockTexture2D(FRHITexture2D * TextureRHI, unsigned int MipIndex, bool bLockWithinMiptail) { NativeCall<void, FRHITexture2D *, unsigned int, bool>(this, "FD3D11DynamicRHI.RHIUnlockTexture2D", TextureRHI, MipIndex, bLockWithinMiptail); }
	void RHIUnlockTexture2DArray(FRHITexture2DArray * TextureRHI, unsigned int TextureIndex, unsigned int MipIndex, bool bLockWithinMiptail) { NativeCall<void, FRHITexture2DArray *, unsigned int, unsigned int, bool>(this, "FD3D11DynamicRHI.RHIUnlockTexture2DArray", TextureRHI, TextureIndex, MipIndex, bLockWithinMiptail); }
	void RHIUnlockTextureCubeFace(FRHITextureCube * TextureCubeRHI, unsigned int FaceIndex, unsigned int ArrayIndex, unsigned int MipIndex, bool bLockWithinMiptail) { NativeCall<void, FRHITextureCube *, unsigned int, unsigned int, unsigned int, bool>(this, "FD3D11DynamicRHI.RHIUnlockTextureCubeFace", TextureCubeRHI, FaceIndex, ArrayIndex, MipIndex, bLockWithinMiptail); }
	void RHIUnlockVertexBuffer(FRHIVertexBuffer * VertexBufferRHI) { NativeCall<void, FRHIVertexBuffer *>(this, "FD3D11DynamicRHI.RHIUnlockVertexBuffer", VertexBufferRHI); }
	void RHIUnmapStagingSurface(FRHITexture * TextureRHI) { NativeCall<void, FRHITexture *>(this, "FD3D11DynamicRHI.RHIUnmapStagingSurface", TextureRHI); }
	void RHIUpdateTexture2D(FRHITexture2D * TextureRHI, unsigned int MipIndex, const FUpdateTextureRegion2D * UpdateRegion, unsigned int SourcePitch, const char * SourceData) { NativeCall<void, FRHITexture2D *, unsigned int, const FUpdateTextureRegion2D *, unsigned int, const char *>(this, "FD3D11DynamicRHI.RHIUpdateTexture2D", TextureRHI, MipIndex, UpdateRegion, SourcePitch, SourceData); }
	void RHIUpdateTexture3D(FRHITexture3D * TextureRHI, unsigned int MipIndex, const FUpdateTextureRegion3D * UpdateRegion, unsigned int SourceRowPitch, unsigned int SourceDepthPitch, const char * SourceData) { NativeCall<void, FRHITexture3D *, unsigned int, const FUpdateTextureRegion3D *, unsigned int, unsigned int, const char *>(this, "FD3D11DynamicRHI.RHIUpdateTexture3D", TextureRHI, MipIndex, UpdateRegion, SourceRowPitch, SourceDepthPitch, SourceData); }
	void RHIUpdateTextureReference(FRHITextureReference * TextureRefRHI, FRHITexture * NewTextureRHI) { NativeCall<void, FRHITextureReference *, FRHITexture *>(this, "FD3D11DynamicRHI.RHIUpdateTextureReference", TextureRefRHI, NewTextureRHI); }
	void ReadSurfaceDataMSAARaw(FRHICommandList_RecursiveHazardous * RHICmdList, FRHITexture * TextureRHI, FIntRect InRect, TArray<unsigned char> * OutData, FReadSurfaceDataFlags InFlags) { NativeCall<void, FRHICommandList_RecursiveHazardous *, FRHITexture *, FIntRect, TArray<unsigned char> *, FReadSurfaceDataFlags>(this, "FD3D11DynamicRHI.ReadSurfaceDataMSAARaw", RHICmdList, TextureRHI, InRect, OutData, InFlags); }
	void ReadSurfaceDataNoMSAARaw(FRHITexture * TextureRHI, FIntRect InRect, TArray<unsigned char> * OutData, FReadSurfaceDataFlags InFlags) { NativeCall<void, FRHITexture *, FIntRect, TArray<unsigned char> *, FReadSurfaceDataFlags>(this, "FD3D11DynamicRHI.ReadSurfaceDataNoMSAARaw", TextureRHI, InRect, OutData, InFlags); }
	void ReleasePooledUniformBuffers() { NativeCall<void>(this, "FD3D11DynamicRHI.ReleasePooledUniformBuffers"); }
	void SetupAfterDeviceCreation() { NativeCall<void>(this, "FD3D11DynamicRHI.SetupAfterDeviceCreation"); }
	void Shutdown() { NativeCall<void>(this, "FD3D11DynamicRHI.Shutdown"); }
	void ShutdownHDR() { NativeCall<void>(this, "FD3D11DynamicRHI.ShutdownHDR"); }
	void RHIBindDebugLabelName(FRHITexture * TextureRHI, const wchar_t * Name) { NativeCall<void, FRHITexture *, const wchar_t *>(this, "FD3D11DynamicRHI.RHIBindDebugLabelName", TextureRHI, Name); }
	unsigned __int64 RHICalcTexture3DPlatformSize(unsigned int SizeX, unsigned int SizeY, unsigned int SizeZ, char Format, unsigned int NumMips, unsigned int Flags, unsigned int * OutAlign) { return NativeCall<unsigned __int64, unsigned int, unsigned int, unsigned int, char, unsigned int, unsigned int, unsigned int *>(this, "FD3D11DynamicRHI.RHICalcTexture3DPlatformSize", SizeX, SizeY, SizeZ, Format, NumMips, Flags, OutAlign); }
};

